
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000772  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000012  00800060  00000772  000007e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  000007f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000167  00000000  00000000  00000818  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000782  00000000  00000000  0000097f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001cd  00000000  00000000  00001101  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000ad7  00000000  00000000  000012ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000150  00000000  00000000  00001da8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001ad  00000000  00000000  00001ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000002ed  00000000  00000000  000020a5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 e7       	ldi	r30, 0x72	; 114
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a2 37       	cpi	r26, 0x72	; 114
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 96 03 	call	0x72c	; 0x72c <main>
  7a:	0c 94 b7 03 	jmp	0x76e	; 0x76e <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <pinChange>:

#include<util/delay.h>

void pinChange(int a, int b)
{
	if(b == 0)
  82:	67 2b       	or	r22, r23
  84:	09 f0       	breq	.+2      	; 0x88 <pinChange+0x6>
  86:	9f c0       	rjmp	.+318    	; 0x1c6 <pinChange+0x144>
	{
		if(a == PSen_PORTA0)
  88:	00 97       	sbiw	r24, 0x00	; 0
  8a:	11 f4       	brne	.+4      	; 0x90 <pinChange+0xe>
		  PORTA &= ~(1<<PA0);
  8c:	d8 98       	cbi	0x1b, 0	; 27
  8e:	08 95       	ret
		else if(a == PSen_PORTA1)
  90:	81 30       	cpi	r24, 0x01	; 1
  92:	91 05       	cpc	r25, r1
  94:	11 f4       	brne	.+4      	; 0x9a <pinChange+0x18>
		  PORTA &= ~(1<<PA1); 
  96:	d9 98       	cbi	0x1b, 1	; 27
  98:	08 95       	ret
		else if(a == PSen_PORTA2)
  9a:	82 30       	cpi	r24, 0x02	; 2
  9c:	91 05       	cpc	r25, r1
  9e:	11 f4       	brne	.+4      	; 0xa4 <pinChange+0x22>
		  PORTA &= ~(1<<PA2);
  a0:	da 98       	cbi	0x1b, 2	; 27
  a2:	08 95       	ret
		else if(a == PSen_PORTA3)
  a4:	83 30       	cpi	r24, 0x03	; 3
  a6:	91 05       	cpc	r25, r1
  a8:	11 f4       	brne	.+4      	; 0xae <pinChange+0x2c>
		  PORTA &= ~(1<<PA3); 
  aa:	db 98       	cbi	0x1b, 3	; 27
  ac:	08 95       	ret
		else if(a == PSen_PORTA4)
  ae:	84 30       	cpi	r24, 0x04	; 4
  b0:	91 05       	cpc	r25, r1
  b2:	11 f4       	brne	.+4      	; 0xb8 <pinChange+0x36>
		  PORTA &= ~(1<<PA4); 
  b4:	dc 98       	cbi	0x1b, 4	; 27
  b6:	08 95       	ret
		else if(a == PSen_PORTA5)
  b8:	85 30       	cpi	r24, 0x05	; 5
  ba:	91 05       	cpc	r25, r1
  bc:	11 f4       	brne	.+4      	; 0xc2 <pinChange+0x40>
		  PORTA &= ~(1<<PA5); 
  be:	dd 98       	cbi	0x1b, 5	; 27
  c0:	08 95       	ret
		else if(a == PSen_PORTA6)
  c2:	86 30       	cpi	r24, 0x06	; 6
  c4:	91 05       	cpc	r25, r1
  c6:	11 f4       	brne	.+4      	; 0xcc <pinChange+0x4a>
		  PORTA &= ~(1<<PA6);  
  c8:	de 98       	cbi	0x1b, 6	; 27
  ca:	08 95       	ret
		else if(a == PSen_PORTA7)
  cc:	87 30       	cpi	r24, 0x07	; 7
  ce:	91 05       	cpc	r25, r1
  d0:	11 f4       	brne	.+4      	; 0xd6 <pinChange+0x54>
		  PORTA &= ~(1<<PA7);
  d2:	df 98       	cbi	0x1b, 7	; 27
  d4:	08 95       	ret
		else if(a == PSen_PORTB0)
  d6:	8a 30       	cpi	r24, 0x0A	; 10
  d8:	91 05       	cpc	r25, r1
  da:	11 f4       	brne	.+4      	; 0xe0 <pinChange+0x5e>
		  PORTB &= ~(1<<PB0);  
  dc:	c0 98       	cbi	0x18, 0	; 24
  de:	08 95       	ret
		else if(a == PSen_PORTB1)
  e0:	8b 30       	cpi	r24, 0x0B	; 11
  e2:	91 05       	cpc	r25, r1
  e4:	11 f4       	brne	.+4      	; 0xea <pinChange+0x68>
		  PORTB &= ~(1<<PB1);
  e6:	c1 98       	cbi	0x18, 1	; 24
  e8:	08 95       	ret
		else if(a == PSen_PORTB2)
  ea:	8c 30       	cpi	r24, 0x0C	; 12
  ec:	91 05       	cpc	r25, r1
  ee:	11 f4       	brne	.+4      	; 0xf4 <pinChange+0x72>
		  PORTB &= ~(1<<PB2);  
  f0:	c2 98       	cbi	0x18, 2	; 24
  f2:	08 95       	ret
		else if(a == PSen_PORTB3)
  f4:	8d 30       	cpi	r24, 0x0D	; 13
  f6:	91 05       	cpc	r25, r1
  f8:	11 f4       	brne	.+4      	; 0xfe <pinChange+0x7c>
		  PORTB &= ~(1<<PB3);  
  fa:	c3 98       	cbi	0x18, 3	; 24
  fc:	08 95       	ret
		else if(a == PSen_PORTB4)
  fe:	8e 30       	cpi	r24, 0x0E	; 14
 100:	91 05       	cpc	r25, r1
 102:	11 f4       	brne	.+4      	; 0x108 <pinChange+0x86>
		  PORTB &= ~(1<<PB4);  
 104:	c4 98       	cbi	0x18, 4	; 24
 106:	08 95       	ret
		else if(a == PSen_PORTB5)
 108:	8f 30       	cpi	r24, 0x0F	; 15
 10a:	91 05       	cpc	r25, r1
 10c:	11 f4       	brne	.+4      	; 0x112 <pinChange+0x90>
		  PORTB &= ~(1<<PB5);  
 10e:	c5 98       	cbi	0x18, 5	; 24
 110:	08 95       	ret
		else if(a == PSen_PORTB6)
 112:	80 31       	cpi	r24, 0x10	; 16
 114:	91 05       	cpc	r25, r1
 116:	11 f4       	brne	.+4      	; 0x11c <pinChange+0x9a>
		  PORTB &= ~(1<<PB6);  
 118:	c6 98       	cbi	0x18, 6	; 24
 11a:	08 95       	ret
		else if(a == PSen_PORTB7)
 11c:	81 31       	cpi	r24, 0x11	; 17
 11e:	91 05       	cpc	r25, r1
 120:	11 f4       	brne	.+4      	; 0x126 <pinChange+0xa4>
		  PORTB &= ~(1<<PB7);
 122:	c7 98       	cbi	0x18, 7	; 24
 124:	08 95       	ret
		else if(a == PSen_PORTC0)
 126:	84 31       	cpi	r24, 0x14	; 20
 128:	91 05       	cpc	r25, r1
 12a:	11 f4       	brne	.+4      	; 0x130 <pinChange+0xae>
		  PORTC &= ~(1<<PC0);   
 12c:	a8 98       	cbi	0x15, 0	; 21
 12e:	08 95       	ret
		else if(a == PSen_PORTC1)
 130:	85 31       	cpi	r24, 0x15	; 21
 132:	91 05       	cpc	r25, r1
 134:	11 f4       	brne	.+4      	; 0x13a <pinChange+0xb8>
		  PORTC &= ~(1<<PC1); 
 136:	a9 98       	cbi	0x15, 1	; 21
 138:	08 95       	ret
		else if(a == PSen_PORTC2)
 13a:	86 31       	cpi	r24, 0x16	; 22
 13c:	91 05       	cpc	r25, r1
 13e:	11 f4       	brne	.+4      	; 0x144 <pinChange+0xc2>
		  PORTC &= ~(1<<PC2);
 140:	aa 98       	cbi	0x15, 2	; 21
 142:	08 95       	ret
		else if(a == PSen_PORTC3)
 144:	87 31       	cpi	r24, 0x17	; 23
 146:	91 05       	cpc	r25, r1
 148:	11 f4       	brne	.+4      	; 0x14e <pinChange+0xcc>
		  PORTC &= ~(1<<PC3);   
 14a:	ab 98       	cbi	0x15, 3	; 21
 14c:	08 95       	ret
		else if(a == PSen_PORTC4)
 14e:	88 31       	cpi	r24, 0x18	; 24
 150:	91 05       	cpc	r25, r1
 152:	11 f4       	brne	.+4      	; 0x158 <pinChange+0xd6>
		  PORTC &= ~(1<<PC4);  
 154:	ac 98       	cbi	0x15, 4	; 21
 156:	08 95       	ret
		else if(a == PSen_PORTC5)
 158:	89 31       	cpi	r24, 0x19	; 25
 15a:	91 05       	cpc	r25, r1
 15c:	11 f4       	brne	.+4      	; 0x162 <pinChange+0xe0>
		  PORTC &= ~(1<<PC5);  
 15e:	ad 98       	cbi	0x15, 5	; 21
 160:	08 95       	ret
        else if(a == PSen_PORTC6)
 162:	8a 31       	cpi	r24, 0x1A	; 26
 164:	91 05       	cpc	r25, r1
 166:	11 f4       	brne	.+4      	; 0x16c <pinChange+0xea>
          PORTC &= ~(1<<PC6);		
 168:	ae 98       	cbi	0x15, 6	; 21
 16a:	08 95       	ret
		else if(a == PSen_PORTC7)
 16c:	8b 31       	cpi	r24, 0x1B	; 27
 16e:	91 05       	cpc	r25, r1
 170:	11 f4       	brne	.+4      	; 0x176 <pinChange+0xf4>
		  PORTC &= ~(1<<PC7);
 172:	af 98       	cbi	0x15, 7	; 21
 174:	08 95       	ret
		else if(a == PSen_PORTD0)
 176:	8e 31       	cpi	r24, 0x1E	; 30
 178:	91 05       	cpc	r25, r1
 17a:	11 f4       	brne	.+4      	; 0x180 <pinChange+0xfe>
		  PORTD &= ~(1<<PD0);
 17c:	90 98       	cbi	0x12, 0	; 18
 17e:	08 95       	ret
		else if(a == PSen_PORTD1)
 180:	8f 31       	cpi	r24, 0x1F	; 31
 182:	91 05       	cpc	r25, r1
 184:	11 f4       	brne	.+4      	; 0x18a <pinChange+0x108>
		  PORTD &= ~(1<<PD1);  
 186:	91 98       	cbi	0x12, 1	; 18
 188:	08 95       	ret
		else if(a == PSen_PORTD2)
 18a:	80 32       	cpi	r24, 0x20	; 32
 18c:	91 05       	cpc	r25, r1
 18e:	11 f4       	brne	.+4      	; 0x194 <pinChange+0x112>
		  PORTD &= ~(1<<PD2);
 190:	92 98       	cbi	0x12, 2	; 18
 192:	08 95       	ret
		else if(a == PSen_PORTD3)
 194:	81 32       	cpi	r24, 0x21	; 33
 196:	91 05       	cpc	r25, r1
 198:	11 f4       	brne	.+4      	; 0x19e <pinChange+0x11c>
		  PORTD &= ~(1<<PD3);
 19a:	93 98       	cbi	0x12, 3	; 18
 19c:	08 95       	ret
		else if(a == PSen_PORTD4)
 19e:	82 32       	cpi	r24, 0x22	; 34
 1a0:	91 05       	cpc	r25, r1
 1a2:	11 f4       	brne	.+4      	; 0x1a8 <pinChange+0x126>
		  PORTD &= ~(1<<PD4);
 1a4:	94 98       	cbi	0x12, 4	; 18
 1a6:	08 95       	ret
		else if(a == PSen_PORTD5)
 1a8:	83 32       	cpi	r24, 0x23	; 35
 1aa:	91 05       	cpc	r25, r1
 1ac:	11 f4       	brne	.+4      	; 0x1b2 <pinChange+0x130>
		  PORTD &= ~(1<<PD5);
 1ae:	95 98       	cbi	0x12, 5	; 18
 1b0:	08 95       	ret
		else if(a == PSen_PORTD6)
 1b2:	84 32       	cpi	r24, 0x24	; 36
 1b4:	91 05       	cpc	r25, r1
 1b6:	11 f4       	brne	.+4      	; 0x1bc <pinChange+0x13a>
		  PORTD &= ~(1<<PD6);   
 1b8:	96 98       	cbi	0x12, 6	; 18
 1ba:	08 95       	ret
		else if(a == PSen_PORTD7)
 1bc:	85 97       	sbiw	r24, 0x25	; 37
 1be:	09 f0       	breq	.+2      	; 0x1c2 <pinChange+0x140>
 1c0:	9f c0       	rjmp	.+318    	; 0x300 <pinChange+0x27e>
		  PORTD &= ~(1<<PD7);           
 1c2:	97 98       	cbi	0x12, 7	; 18
 1c4:	08 95       	ret
	}
	else
	{
		if(a == PSen_PORTA0)
 1c6:	00 97       	sbiw	r24, 0x00	; 0
 1c8:	11 f4       	brne	.+4      	; 0x1ce <pinChange+0x14c>
		  PORTA |= (1<<PA0);
 1ca:	d8 9a       	sbi	0x1b, 0	; 27
 1cc:	08 95       	ret
		else if(a == PSen_PORTA1)
 1ce:	81 30       	cpi	r24, 0x01	; 1
 1d0:	91 05       	cpc	r25, r1
 1d2:	11 f4       	brne	.+4      	; 0x1d8 <pinChange+0x156>
		  PORTA |= (1<<PA1);
 1d4:	d9 9a       	sbi	0x1b, 1	; 27
 1d6:	08 95       	ret
		else if(a == PSen_PORTA2)
 1d8:	82 30       	cpi	r24, 0x02	; 2
 1da:	91 05       	cpc	r25, r1
 1dc:	11 f4       	brne	.+4      	; 0x1e2 <pinChange+0x160>
		  PORTA |= (1<<PA2);
 1de:	da 9a       	sbi	0x1b, 2	; 27
 1e0:	08 95       	ret
		else if(a == PSen_PORTA3)
 1e2:	83 30       	cpi	r24, 0x03	; 3
 1e4:	91 05       	cpc	r25, r1
 1e6:	11 f4       	brne	.+4      	; 0x1ec <pinChange+0x16a>
		  PORTA |= (1<<PA3);
 1e8:	db 9a       	sbi	0x1b, 3	; 27
 1ea:	08 95       	ret
		else if(a == PSen_PORTA4)
 1ec:	84 30       	cpi	r24, 0x04	; 4
 1ee:	91 05       	cpc	r25, r1
 1f0:	11 f4       	brne	.+4      	; 0x1f6 <pinChange+0x174>
		  PORTA |= (1<<PA4);
 1f2:	dc 9a       	sbi	0x1b, 4	; 27
 1f4:	08 95       	ret
		else if(a == PSen_PORTA5)
 1f6:	85 30       	cpi	r24, 0x05	; 5
 1f8:	91 05       	cpc	r25, r1
 1fa:	11 f4       	brne	.+4      	; 0x200 <pinChange+0x17e>
		  PORTA |= (1<<PA5);
 1fc:	dd 9a       	sbi	0x1b, 5	; 27
 1fe:	08 95       	ret
		else if(a == PSen_PORTA6)
 200:	86 30       	cpi	r24, 0x06	; 6
 202:	91 05       	cpc	r25, r1
 204:	11 f4       	brne	.+4      	; 0x20a <pinChange+0x188>
		  PORTA |= (1<<PA6);
 206:	de 9a       	sbi	0x1b, 6	; 27
 208:	08 95       	ret
		else if(a == PSen_PORTA7)
 20a:	87 30       	cpi	r24, 0x07	; 7
 20c:	91 05       	cpc	r25, r1
 20e:	11 f4       	brne	.+4      	; 0x214 <pinChange+0x192>
		  PORTA |= (1<<PA7);
 210:	df 9a       	sbi	0x1b, 7	; 27
 212:	08 95       	ret
		else if(a == PSen_PORTB0)
 214:	8a 30       	cpi	r24, 0x0A	; 10
 216:	91 05       	cpc	r25, r1
 218:	11 f4       	brne	.+4      	; 0x21e <pinChange+0x19c>
	  	  PORTB |= (1<<PB0);
 21a:	c0 9a       	sbi	0x18, 0	; 24
 21c:	08 95       	ret
		else if(a == PSen_PORTB1)
 21e:	8b 30       	cpi	r24, 0x0B	; 11
 220:	91 05       	cpc	r25, r1
 222:	11 f4       	brne	.+4      	; 0x228 <pinChange+0x1a6>
		  PORTB |= (1<<PB1);
 224:	c1 9a       	sbi	0x18, 1	; 24
 226:	08 95       	ret
		else if(a == PSen_PORTB2)
 228:	8c 30       	cpi	r24, 0x0C	; 12
 22a:	91 05       	cpc	r25, r1
 22c:	11 f4       	brne	.+4      	; 0x232 <pinChange+0x1b0>
		  PORTB |= (1<<PB2);
 22e:	c2 9a       	sbi	0x18, 2	; 24
 230:	08 95       	ret
		else if(a == PSen_PORTB3)
 232:	8d 30       	cpi	r24, 0x0D	; 13
 234:	91 05       	cpc	r25, r1
 236:	11 f4       	brne	.+4      	; 0x23c <pinChange+0x1ba>
		  PORTB |= (1<<PB3);
 238:	c3 9a       	sbi	0x18, 3	; 24
 23a:	08 95       	ret
		else if(a == PSen_PORTB4)
 23c:	8e 30       	cpi	r24, 0x0E	; 14
 23e:	91 05       	cpc	r25, r1
 240:	11 f4       	brne	.+4      	; 0x246 <pinChange+0x1c4>
		  PORTB |= (1<<PB4);
 242:	c4 9a       	sbi	0x18, 4	; 24
 244:	08 95       	ret
		else if(a == PSen_PORTB5)
 246:	8f 30       	cpi	r24, 0x0F	; 15
 248:	91 05       	cpc	r25, r1
 24a:	11 f4       	brne	.+4      	; 0x250 <pinChange+0x1ce>
		  PORTB |= (1<<PB5);
 24c:	c5 9a       	sbi	0x18, 5	; 24
 24e:	08 95       	ret
		else if(a == PSen_PORTB6)
 250:	80 31       	cpi	r24, 0x10	; 16
 252:	91 05       	cpc	r25, r1
 254:	11 f4       	brne	.+4      	; 0x25a <pinChange+0x1d8>
		  PORTB |= (1<<PB6);
 256:	c6 9a       	sbi	0x18, 6	; 24
 258:	08 95       	ret
		else if(a == PSen_PORTB7)
 25a:	81 31       	cpi	r24, 0x11	; 17
 25c:	91 05       	cpc	r25, r1
 25e:	11 f4       	brne	.+4      	; 0x264 <pinChange+0x1e2>
		  PORTB |= (1<<PB7);
 260:	c7 9a       	sbi	0x18, 7	; 24
 262:	08 95       	ret
		else if(a == PSen_PORTC0)
 264:	84 31       	cpi	r24, 0x14	; 20
 266:	91 05       	cpc	r25, r1
 268:	11 f4       	brne	.+4      	; 0x26e <pinChange+0x1ec>
		  PORTC |= (1<<PC0);
 26a:	a8 9a       	sbi	0x15, 0	; 21
 26c:	08 95       	ret
		else if(a == PSen_PORTC1)
 26e:	85 31       	cpi	r24, 0x15	; 21
 270:	91 05       	cpc	r25, r1
 272:	11 f4       	brne	.+4      	; 0x278 <pinChange+0x1f6>
		  PORTC |= (1<<PC1);
 274:	a9 9a       	sbi	0x15, 1	; 21
 276:	08 95       	ret
		else if(a == PSen_PORTC2)
 278:	86 31       	cpi	r24, 0x16	; 22
 27a:	91 05       	cpc	r25, r1
 27c:	11 f4       	brne	.+4      	; 0x282 <pinChange+0x200>
	  	  PORTC |= (1<<PC2);
 27e:	aa 9a       	sbi	0x15, 2	; 21
 280:	08 95       	ret
		else if(a == PSen_PORTC3)
 282:	87 31       	cpi	r24, 0x17	; 23
 284:	91 05       	cpc	r25, r1
 286:	11 f4       	brne	.+4      	; 0x28c <pinChange+0x20a>
		  PORTC |= (1<<PC3);
 288:	ab 9a       	sbi	0x15, 3	; 21
 28a:	08 95       	ret
		else if(a == PSen_PORTC4)
 28c:	88 31       	cpi	r24, 0x18	; 24
 28e:	91 05       	cpc	r25, r1
 290:	11 f4       	brne	.+4      	; 0x296 <pinChange+0x214>
		  PORTC |= (1<<PC4);
 292:	ac 9a       	sbi	0x15, 4	; 21
 294:	08 95       	ret
		else if(a == PSen_PORTC5)
 296:	89 31       	cpi	r24, 0x19	; 25
 298:	91 05       	cpc	r25, r1
 29a:	11 f4       	brne	.+4      	; 0x2a0 <pinChange+0x21e>
		  PORTC |= (1<<PC5);
 29c:	ad 9a       	sbi	0x15, 5	; 21
 29e:	08 95       	ret
		else if(a == PSen_PORTC6)
 2a0:	8a 31       	cpi	r24, 0x1A	; 26
 2a2:	91 05       	cpc	r25, r1
 2a4:	11 f4       	brne	.+4      	; 0x2aa <pinChange+0x228>
		  PORTC |= (1<<PC6);  
 2a6:	ae 9a       	sbi	0x15, 6	; 21
 2a8:	08 95       	ret
		else if(a == PSen_PORTC7)
 2aa:	8b 31       	cpi	r24, 0x1B	; 27
 2ac:	91 05       	cpc	r25, r1
 2ae:	11 f4       	brne	.+4      	; 0x2b4 <pinChange+0x232>
		  PORTC |= (1<<PC7);
 2b0:	af 9a       	sbi	0x15, 7	; 21
 2b2:	08 95       	ret
		else if(a == PSen_PORTD0)
 2b4:	8e 31       	cpi	r24, 0x1E	; 30
 2b6:	91 05       	cpc	r25, r1
 2b8:	11 f4       	brne	.+4      	; 0x2be <pinChange+0x23c>
		  PORTD |= (1<<PD0);
 2ba:	90 9a       	sbi	0x12, 0	; 18
 2bc:	08 95       	ret
		else if(a == PSen_PORTD1)
 2be:	8f 31       	cpi	r24, 0x1F	; 31
 2c0:	91 05       	cpc	r25, r1
 2c2:	11 f4       	brne	.+4      	; 0x2c8 <pinChange+0x246>
		  PORTD |= (1<<PD1);
 2c4:	91 9a       	sbi	0x12, 1	; 18
 2c6:	08 95       	ret
		else if(a == PSen_PORTD2)
 2c8:	80 32       	cpi	r24, 0x20	; 32
 2ca:	91 05       	cpc	r25, r1
 2cc:	11 f4       	brne	.+4      	; 0x2d2 <pinChange+0x250>
		  PORTD |= (1<<PD2);
 2ce:	92 9a       	sbi	0x12, 2	; 18
 2d0:	08 95       	ret
		else if(a == PSen_PORTD3)
 2d2:	81 32       	cpi	r24, 0x21	; 33
 2d4:	91 05       	cpc	r25, r1
 2d6:	11 f4       	brne	.+4      	; 0x2dc <pinChange+0x25a>
		  PORTD |= (1<<PD3);
 2d8:	93 9a       	sbi	0x12, 3	; 18
 2da:	08 95       	ret
		else if(a == PSen_PORTD4)
 2dc:	82 32       	cpi	r24, 0x22	; 34
 2de:	91 05       	cpc	r25, r1
 2e0:	11 f4       	brne	.+4      	; 0x2e6 <pinChange+0x264>
		  PORTD |= (1<<PD4);
 2e2:	94 9a       	sbi	0x12, 4	; 18
 2e4:	08 95       	ret
		else if(a == PSen_PORTD5)
 2e6:	83 32       	cpi	r24, 0x23	; 35
 2e8:	91 05       	cpc	r25, r1
 2ea:	11 f4       	brne	.+4      	; 0x2f0 <pinChange+0x26e>
		  PORTD |= (1<<PD5);
 2ec:	95 9a       	sbi	0x12, 5	; 18
 2ee:	08 95       	ret
		else if(a == PSen_PORTD6)
 2f0:	84 32       	cpi	r24, 0x24	; 36
 2f2:	91 05       	cpc	r25, r1
 2f4:	11 f4       	brne	.+4      	; 0x2fa <pinChange+0x278>
		  PORTD |= (1<<PD6);
 2f6:	96 9a       	sbi	0x12, 6	; 18
 2f8:	08 95       	ret
		else if(a == PSen_PORTD7)
 2fa:	85 97       	sbiw	r24, 0x25	; 37
 2fc:	09 f4       	brne	.+2      	; 0x300 <pinChange+0x27e>
		  PORTD |= (1<<PD7);
 2fe:	97 9a       	sbi	0x12, 7	; 18
 300:	08 95       	ret

00000302 <Lcd8_Port>:



//LCD 8 Bit Interfacing Functions
void Lcd8_Port(char a)
{
 302:	0f 93       	push	r16
 304:	1f 93       	push	r17
 306:	08 2f       	mov	r16, r24
	if(a & 1)
 308:	18 2f       	mov	r17, r24
 30a:	80 ff       	sbrs	r24, 0
 30c:	05 c0       	rjmp	.+10     	; 0x318 <Lcd8_Port+0x16>
	pinChange(D0,1);
 30e:	80 e0       	ldi	r24, 0x00	; 0
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	61 e0       	ldi	r22, 0x01	; 1
 314:	70 e0       	ldi	r23, 0x00	; 0
 316:	04 c0       	rjmp	.+8      	; 0x320 <Lcd8_Port+0x1e>
	else
	pinChange(D0,0);
 318:	80 e0       	ldi	r24, 0x00	; 0
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	60 e0       	ldi	r22, 0x00	; 0
 31e:	70 e0       	ldi	r23, 0x00	; 0
 320:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
	
	if(a & 2)
 324:	11 ff       	sbrs	r17, 1
 326:	05 c0       	rjmp	.+10     	; 0x332 <Lcd8_Port+0x30>
	pinChange(D1,1);
 328:	81 e0       	ldi	r24, 0x01	; 1
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	61 e0       	ldi	r22, 0x01	; 1
 32e:	70 e0       	ldi	r23, 0x00	; 0
 330:	04 c0       	rjmp	.+8      	; 0x33a <Lcd8_Port+0x38>
	else
	pinChange(D1,0);
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	90 e0       	ldi	r25, 0x00	; 0
 336:	60 e0       	ldi	r22, 0x00	; 0
 338:	70 e0       	ldi	r23, 0x00	; 0
 33a:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
	
	if(a & 4)
 33e:	12 ff       	sbrs	r17, 2
 340:	05 c0       	rjmp	.+10     	; 0x34c <Lcd8_Port+0x4a>
	pinChange(D2,1);
 342:	82 e0       	ldi	r24, 0x02	; 2
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	61 e0       	ldi	r22, 0x01	; 1
 348:	70 e0       	ldi	r23, 0x00	; 0
 34a:	04 c0       	rjmp	.+8      	; 0x354 <Lcd8_Port+0x52>
	else
	pinChange(D2,0);
 34c:	82 e0       	ldi	r24, 0x02	; 2
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	60 e0       	ldi	r22, 0x00	; 0
 352:	70 e0       	ldi	r23, 0x00	; 0
 354:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
	
	if(a & 8)
 358:	13 ff       	sbrs	r17, 3
 35a:	05 c0       	rjmp	.+10     	; 0x366 <Lcd8_Port+0x64>
	pinChange(D3,1);
 35c:	83 e0       	ldi	r24, 0x03	; 3
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	61 e0       	ldi	r22, 0x01	; 1
 362:	70 e0       	ldi	r23, 0x00	; 0
 364:	04 c0       	rjmp	.+8      	; 0x36e <Lcd8_Port+0x6c>
	else
	pinChange(D3,0);
 366:	83 e0       	ldi	r24, 0x03	; 3
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	60 e0       	ldi	r22, 0x00	; 0
 36c:	70 e0       	ldi	r23, 0x00	; 0
 36e:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
	
	if(a & 16)
 372:	14 ff       	sbrs	r17, 4
 374:	05 c0       	rjmp	.+10     	; 0x380 <Lcd8_Port+0x7e>
	pinChange(D4,1);
 376:	82 e2       	ldi	r24, 0x22	; 34
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	61 e0       	ldi	r22, 0x01	; 1
 37c:	70 e0       	ldi	r23, 0x00	; 0
 37e:	04 c0       	rjmp	.+8      	; 0x388 <Lcd8_Port+0x86>
	else
	pinChange(D4,0);
 380:	82 e2       	ldi	r24, 0x22	; 34
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	60 e0       	ldi	r22, 0x00	; 0
 386:	70 e0       	ldi	r23, 0x00	; 0
 388:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>

	if(a & 32)
 38c:	15 ff       	sbrs	r17, 5
 38e:	05 c0       	rjmp	.+10     	; 0x39a <Lcd8_Port+0x98>
	pinChange(D5,1);
 390:	83 e2       	ldi	r24, 0x23	; 35
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	61 e0       	ldi	r22, 0x01	; 1
 396:	70 e0       	ldi	r23, 0x00	; 0
 398:	04 c0       	rjmp	.+8      	; 0x3a2 <Lcd8_Port+0xa0>
	else
	pinChange(D5,0);
 39a:	83 e2       	ldi	r24, 0x23	; 35
 39c:	90 e0       	ldi	r25, 0x00	; 0
 39e:	60 e0       	ldi	r22, 0x00	; 0
 3a0:	70 e0       	ldi	r23, 0x00	; 0
 3a2:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
	
	if(a & 64)
 3a6:	16 ff       	sbrs	r17, 6
 3a8:	05 c0       	rjmp	.+10     	; 0x3b4 <Lcd8_Port+0xb2>
	pinChange(D6,1);
 3aa:	84 e2       	ldi	r24, 0x24	; 36
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	61 e0       	ldi	r22, 0x01	; 1
 3b0:	70 e0       	ldi	r23, 0x00	; 0
 3b2:	04 c0       	rjmp	.+8      	; 0x3bc <Lcd8_Port+0xba>
	else
	pinChange(D6,0);
 3b4:	84 e2       	ldi	r24, 0x24	; 36
 3b6:	90 e0       	ldi	r25, 0x00	; 0
 3b8:	60 e0       	ldi	r22, 0x00	; 0
 3ba:	70 e0       	ldi	r23, 0x00	; 0
 3bc:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
	
	if(a & 128)
 3c0:	07 ff       	sbrs	r16, 7
 3c2:	05 c0       	rjmp	.+10     	; 0x3ce <Lcd8_Port+0xcc>
	pinChange(D7,1);
 3c4:	85 e2       	ldi	r24, 0x25	; 37
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	61 e0       	ldi	r22, 0x01	; 1
 3ca:	70 e0       	ldi	r23, 0x00	; 0
 3cc:	04 c0       	rjmp	.+8      	; 0x3d6 <Lcd8_Port+0xd4>
	else
	pinChange(D7,0);
 3ce:	85 e2       	ldi	r24, 0x25	; 37
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	60 e0       	ldi	r22, 0x00	; 0
 3d4:	70 e0       	ldi	r23, 0x00	; 0
 3d6:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
}
 3da:	1f 91       	pop	r17
 3dc:	0f 91       	pop	r16
 3de:	08 95       	ret

000003e0 <Lcd8_Cmd>:
void Lcd8_Cmd(char a)
{
 3e0:	0f 93       	push	r16
 3e2:	1f 93       	push	r17
 3e4:	18 2f       	mov	r17, r24
	pinChange(RS,0);             // => RS = 0
 3e6:	8a e1       	ldi	r24, 0x1A	; 26
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	60 e0       	ldi	r22, 0x00	; 0
 3ec:	70 e0       	ldi	r23, 0x00	; 0
 3ee:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
	Lcd8_Port(a);             //Data transfer
 3f2:	81 2f       	mov	r24, r17
 3f4:	0e 94 81 01 	call	0x302	; 0x302 <Lcd8_Port>
	pinChange(EN,1);             // => E = 1
 3f8:	8b e1       	ldi	r24, 0x1B	; 27
 3fa:	90 e0       	ldi	r25, 0x00	; 0
 3fc:	61 e0       	ldi	r22, 0x01	; 1
 3fe:	70 e0       	ldi	r23, 0x00	; 0
 400:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 404:	00 ea       	ldi	r16, 0xA0	; 160
 406:	1f e0       	ldi	r17, 0x0F	; 15
 408:	c8 01       	movw	r24, r16
 40a:	01 97       	sbiw	r24, 0x01	; 1
 40c:	f1 f7       	brne	.-4      	; 0x40a <Lcd8_Cmd+0x2a>
	_delay_ms(1);
	pinChange(EN,0);             // => E = 0
 40e:	8b e1       	ldi	r24, 0x1B	; 27
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	60 e0       	ldi	r22, 0x00	; 0
 414:	70 e0       	ldi	r23, 0x00	; 0
 416:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
 41a:	c8 01       	movw	r24, r16
 41c:	01 97       	sbiw	r24, 0x01	; 1
 41e:	f1 f7       	brne	.-4      	; 0x41c <Lcd8_Cmd+0x3c>
	_delay_ms(1);
}
 420:	1f 91       	pop	r17
 422:	0f 91       	pop	r16
 424:	08 95       	ret

00000426 <Lcd8_Clear>:

void Lcd8_Clear()
{
	Lcd8_Cmd(1);
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <Lcd8_Cmd>
}
 42c:	08 95       	ret

0000042e <Lcd8_Set_Cursor>:

void Lcd8_Set_Cursor(char a, char b)
{
	if(a == 1)
 42e:	81 30       	cpi	r24, 0x01	; 1
 430:	29 f4       	brne	.+10     	; 0x43c <Lcd8_Set_Cursor+0xe>
	Lcd8_Cmd(0x80 + b);
 432:	86 2f       	mov	r24, r22
 434:	80 58       	subi	r24, 0x80	; 128
 436:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <Lcd8_Cmd>
 43a:	08 95       	ret
	else if(a == 2)
 43c:	82 30       	cpi	r24, 0x02	; 2
 43e:	21 f4       	brne	.+8      	; 0x448 <Lcd8_Set_Cursor+0x1a>
	Lcd8_Cmd(0xC0 + b);
 440:	86 2f       	mov	r24, r22
 442:	80 54       	subi	r24, 0x40	; 64
 444:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <Lcd8_Cmd>
 448:	08 95       	ret

0000044a <Lcd8_Init>:
}

void Lcd8_Init()
{
	pinChange(RS,0);
 44a:	8a e1       	ldi	r24, 0x1A	; 26
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	60 e0       	ldi	r22, 0x00	; 0
 450:	70 e0       	ldi	r23, 0x00	; 0
 452:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
	pinChange(EN,0);
 456:	8b e1       	ldi	r24, 0x1B	; 27
 458:	90 e0       	ldi	r25, 0x00	; 0
 45a:	60 e0       	ldi	r22, 0x00	; 0
 45c:	70 e0       	ldi	r23, 0x00	; 0
 45e:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
 462:	88 ec       	ldi	r24, 0xC8	; 200
 464:	90 e0       	ldi	r25, 0x00	; 0
 466:	20 e9       	ldi	r18, 0x90	; 144
 468:	31 e0       	ldi	r19, 0x01	; 1
 46a:	f9 01       	movw	r30, r18
 46c:	31 97       	sbiw	r30, 0x01	; 1
 46e:	f1 f7       	brne	.-4      	; 0x46c <__stack+0xd>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 470:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 472:	d9 f7       	brne	.-10     	; 0x46a <__stack+0xb>
	_delay_ms(20);
	///////////// Reset process from datasheet /////////
	Lcd8_Cmd(0x30);
 474:	80 e3       	ldi	r24, 0x30	; 48
 476:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <Lcd8_Cmd>
 47a:	80 e2       	ldi	r24, 0x20	; 32
 47c:	9e e4       	ldi	r25, 0x4E	; 78
 47e:	01 97       	sbiw	r24, 0x01	; 1
 480:	f1 f7       	brne	.-4      	; 0x47e <__stack+0x1f>
	_delay_ms(5);
	Lcd8_Cmd(0x30);
 482:	80 e3       	ldi	r24, 0x30	; 48
 484:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <Lcd8_Cmd>
 488:	80 ea       	ldi	r24, 0xA0	; 160
 48a:	9f e0       	ldi	r25, 0x0F	; 15
 48c:	01 97       	sbiw	r24, 0x01	; 1
 48e:	f1 f7       	brne	.-4      	; 0x48c <__stack+0x2d>
	_delay_ms(1);
	Lcd8_Cmd(0x30);
 490:	80 e3       	ldi	r24, 0x30	; 48
 492:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <Lcd8_Cmd>
 496:	80 e4       	ldi	r24, 0x40	; 64
 498:	9c e9       	ldi	r25, 0x9C	; 156
 49a:	01 97       	sbiw	r24, 0x01	; 1
 49c:	f1 f7       	brne	.-4      	; 0x49a <__stack+0x3b>
	_delay_ms(10);
	/////////////////////////////////////////////////////
	Lcd8_Cmd(0x38);    //function set
 49e:	88 e3       	ldi	r24, 0x38	; 56
 4a0:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <Lcd8_Cmd>
	Lcd8_Cmd(0x0C);    //display on,cursor off,blink off
 4a4:	8c e0       	ldi	r24, 0x0C	; 12
 4a6:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <Lcd8_Cmd>
	Lcd8_Cmd(0x01);    //clear display
 4aa:	81 e0       	ldi	r24, 0x01	; 1
 4ac:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <Lcd8_Cmd>
	Lcd8_Cmd(0x06);    //entry mode, set increment
 4b0:	86 e0       	ldi	r24, 0x06	; 6
 4b2:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <Lcd8_Cmd>
}
 4b6:	08 95       	ret

000004b8 <Lcd8_Write_Char>:

void Lcd8_Write_Char(char a)
{
 4b8:	0f 93       	push	r16
 4ba:	1f 93       	push	r17
 4bc:	18 2f       	mov	r17, r24
	pinChange(RS,1);             // => RS = 1
 4be:	8a e1       	ldi	r24, 0x1A	; 26
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	61 e0       	ldi	r22, 0x01	; 1
 4c4:	70 e0       	ldi	r23, 0x00	; 0
 4c6:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
	Lcd8_Port(a);             //Data transfer
 4ca:	81 2f       	mov	r24, r17
 4cc:	0e 94 81 01 	call	0x302	; 0x302 <Lcd8_Port>
	pinChange(EN,1);             // => E = 1
 4d0:	8b e1       	ldi	r24, 0x1B	; 27
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	61 e0       	ldi	r22, 0x01	; 1
 4d6:	70 e0       	ldi	r23, 0x00	; 0
 4d8:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
 4dc:	00 ea       	ldi	r16, 0xA0	; 160
 4de:	1f e0       	ldi	r17, 0x0F	; 15
 4e0:	c8 01       	movw	r24, r16
 4e2:	01 97       	sbiw	r24, 0x01	; 1
 4e4:	f1 f7       	brne	.-4      	; 0x4e2 <Lcd8_Write_Char+0x2a>
	_delay_ms(1);
	pinChange(EN,0);             // => E = 04
 4e6:	8b e1       	ldi	r24, 0x1B	; 27
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	60 e0       	ldi	r22, 0x00	; 0
 4ec:	70 e0       	ldi	r23, 0x00	; 0
 4ee:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
 4f2:	c8 01       	movw	r24, r16
 4f4:	01 97       	sbiw	r24, 0x01	; 1
 4f6:	f1 f7       	brne	.-4      	; 0x4f4 <Lcd8_Write_Char+0x3c>
	_delay_ms(1);
}
 4f8:	1f 91       	pop	r17
 4fa:	0f 91       	pop	r16
 4fc:	08 95       	ret

000004fe <Lcd8_Write_String>:

void Lcd8_Write_String(char *a)
{
 4fe:	cf 93       	push	r28
 500:	df 93       	push	r29
 502:	ec 01       	movw	r28, r24
 504:	02 c0       	rjmp	.+4      	; 0x50a <Lcd8_Write_String+0xc>
	int i;
	for(i=0;a[i]!='\0';i++)
	Lcd8_Write_Char(a[i]);
 506:	0e 94 5c 02 	call	0x4b8	; 0x4b8 <Lcd8_Write_Char>
}

void Lcd8_Write_String(char *a)
{
	int i;
	for(i=0;a[i]!='\0';i++)
 50a:	89 91       	ld	r24, Y+
 50c:	88 23       	and	r24, r24
 50e:	d9 f7       	brne	.-10     	; 0x506 <Lcd8_Write_String+0x8>
	Lcd8_Write_Char(a[i]);
}
 510:	df 91       	pop	r29
 512:	cf 91       	pop	r28
 514:	08 95       	ret

00000516 <Lcd8_Shift_Right>:

void Lcd8_Shift_Right()
{
	Lcd8_Cmd(0x1C);
 516:	8c e1       	ldi	r24, 0x1C	; 28
 518:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <Lcd8_Cmd>
}
 51c:	08 95       	ret

0000051e <Lcd8_Shift_Left>:

void Lcd8_Shift_Left()
{
	Lcd8_Cmd(0x18);
 51e:	88 e1       	ldi	r24, 0x18	; 24
 520:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <Lcd8_Cmd>
}
 524:	08 95       	ret

00000526 <Lcd4_Port>:
//End LCD 8 Bit Interfacing Functions

//LCD 4 Bit Interfacing Functions

void Lcd4_Port(char a)
{
 526:	cf 93       	push	r28
 528:	df 93       	push	r29
	if(a & 1)
 52a:	c8 2f       	mov	r28, r24
 52c:	80 ff       	sbrs	r24, 0
 52e:	05 c0       	rjmp	.+10     	; 0x53a <Lcd4_Port+0x14>
	pinChange(D4,1);
 530:	82 e2       	ldi	r24, 0x22	; 34
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	61 e0       	ldi	r22, 0x01	; 1
 536:	70 e0       	ldi	r23, 0x00	; 0
 538:	04 c0       	rjmp	.+8      	; 0x542 <Lcd4_Port+0x1c>
	else
	pinChange(D4,0);
 53a:	82 e2       	ldi	r24, 0x22	; 34
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	60 e0       	ldi	r22, 0x00	; 0
 540:	70 e0       	ldi	r23, 0x00	; 0
 542:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
	
	if(a & 2)
 546:	c1 ff       	sbrs	r28, 1
 548:	05 c0       	rjmp	.+10     	; 0x554 <Lcd4_Port+0x2e>
	pinChange(D5,1);
 54a:	83 e2       	ldi	r24, 0x23	; 35
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	61 e0       	ldi	r22, 0x01	; 1
 550:	70 e0       	ldi	r23, 0x00	; 0
 552:	04 c0       	rjmp	.+8      	; 0x55c <Lcd4_Port+0x36>
	else
	pinChange(D5,0);
 554:	83 e2       	ldi	r24, 0x23	; 35
 556:	90 e0       	ldi	r25, 0x00	; 0
 558:	60 e0       	ldi	r22, 0x00	; 0
 55a:	70 e0       	ldi	r23, 0x00	; 0
 55c:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
	
	if(a & 4)
 560:	c2 ff       	sbrs	r28, 2
 562:	05 c0       	rjmp	.+10     	; 0x56e <Lcd4_Port+0x48>
	pinChange(D6,1);
 564:	84 e2       	ldi	r24, 0x24	; 36
 566:	90 e0       	ldi	r25, 0x00	; 0
 568:	61 e0       	ldi	r22, 0x01	; 1
 56a:	70 e0       	ldi	r23, 0x00	; 0
 56c:	04 c0       	rjmp	.+8      	; 0x576 <Lcd4_Port+0x50>
	else
	pinChange(D6,0);
 56e:	84 e2       	ldi	r24, 0x24	; 36
 570:	90 e0       	ldi	r25, 0x00	; 0
 572:	60 e0       	ldi	r22, 0x00	; 0
 574:	70 e0       	ldi	r23, 0x00	; 0
 576:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
	
	if(a & 8)
 57a:	c3 ff       	sbrs	r28, 3
 57c:	05 c0       	rjmp	.+10     	; 0x588 <Lcd4_Port+0x62>
	pinChange(D7,1);
 57e:	85 e2       	ldi	r24, 0x25	; 37
 580:	90 e0       	ldi	r25, 0x00	; 0
 582:	61 e0       	ldi	r22, 0x01	; 1
 584:	70 e0       	ldi	r23, 0x00	; 0
 586:	04 c0       	rjmp	.+8      	; 0x590 <Lcd4_Port+0x6a>
	else
	pinChange(D7,0);
 588:	85 e2       	ldi	r24, 0x25	; 37
 58a:	90 e0       	ldi	r25, 0x00	; 0
 58c:	60 e0       	ldi	r22, 0x00	; 0
 58e:	70 e0       	ldi	r23, 0x00	; 0
 590:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
}
 594:	df 91       	pop	r29
 596:	cf 91       	pop	r28
 598:	08 95       	ret

0000059a <Lcd4_Cmd>:
void Lcd4_Cmd(char a)
{
 59a:	0f 93       	push	r16
 59c:	1f 93       	push	r17
 59e:	18 2f       	mov	r17, r24
	pinChange(RS,0);             // => RS = 0
 5a0:	8a e1       	ldi	r24, 0x1A	; 26
 5a2:	90 e0       	ldi	r25, 0x00	; 0
 5a4:	60 e0       	ldi	r22, 0x00	; 0
 5a6:	70 e0       	ldi	r23, 0x00	; 0
 5a8:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
	Lcd4_Port(a);
 5ac:	81 2f       	mov	r24, r17
 5ae:	0e 94 93 02 	call	0x526	; 0x526 <Lcd4_Port>
	pinChange(EN,1);            // => E = 1
 5b2:	8b e1       	ldi	r24, 0x1B	; 27
 5b4:	90 e0       	ldi	r25, 0x00	; 0
 5b6:	61 e0       	ldi	r22, 0x01	; 1
 5b8:	70 e0       	ldi	r23, 0x00	; 0
 5ba:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
 5be:	00 ea       	ldi	r16, 0xA0	; 160
 5c0:	1f e0       	ldi	r17, 0x0F	; 15
 5c2:	c8 01       	movw	r24, r16
 5c4:	01 97       	sbiw	r24, 0x01	; 1
 5c6:	f1 f7       	brne	.-4      	; 0x5c4 <Lcd4_Cmd+0x2a>
	_delay_ms(1);
	pinChange(EN,0);             // => E = 0
 5c8:	8b e1       	ldi	r24, 0x1B	; 27
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	60 e0       	ldi	r22, 0x00	; 0
 5ce:	70 e0       	ldi	r23, 0x00	; 0
 5d0:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
 5d4:	c8 01       	movw	r24, r16
 5d6:	01 97       	sbiw	r24, 0x01	; 1
 5d8:	f1 f7       	brne	.-4      	; 0x5d6 <Lcd4_Cmd+0x3c>
	_delay_ms(1);
}
 5da:	1f 91       	pop	r17
 5dc:	0f 91       	pop	r16
 5de:	08 95       	ret

000005e0 <Lcd4_Clear>:

void Lcd4_Clear()
{
	Lcd4_Cmd(0);
 5e0:	80 e0       	ldi	r24, 0x00	; 0
 5e2:	0e 94 cd 02 	call	0x59a	; 0x59a <Lcd4_Cmd>
	Lcd4_Cmd(1);
 5e6:	81 e0       	ldi	r24, 0x01	; 1
 5e8:	0e 94 cd 02 	call	0x59a	; 0x59a <Lcd4_Cmd>
}
 5ec:	08 95       	ret

000005ee <Lcd4_Set_Cursor>:

void Lcd4_Set_Cursor(char a, char b)
{
 5ee:	1f 93       	push	r17
	char temp,z,y;
	if(a == 1)
 5f0:	81 30       	cpi	r24, 0x01	; 1
 5f2:	19 f4       	brne	.+6      	; 0x5fa <Lcd4_Set_Cursor+0xc>
	{
		temp = 0x80 + b;
 5f4:	16 2f       	mov	r17, r22
 5f6:	10 58       	subi	r17, 0x80	; 128
 5f8:	04 c0       	rjmp	.+8      	; 0x602 <Lcd4_Set_Cursor+0x14>
		z = temp>>4;
		y = (0x80+b) & 0x0F;
		Lcd4_Cmd(z);
		Lcd4_Cmd(y);
	}
	else if(a == 2)
 5fa:	82 30       	cpi	r24, 0x02	; 2
 5fc:	59 f4       	brne	.+22     	; 0x614 <Lcd4_Set_Cursor+0x26>
	{
		temp = 0xC0 + b;
 5fe:	16 2f       	mov	r17, r22
 600:	10 54       	subi	r17, 0x40	; 64
		z = temp>>4;
		y = (0xC0+b) & 0x0F;
		Lcd4_Cmd(z);
 602:	81 2f       	mov	r24, r17
 604:	82 95       	swap	r24
 606:	8f 70       	andi	r24, 0x0F	; 15
 608:	0e 94 cd 02 	call	0x59a	; 0x59a <Lcd4_Cmd>
		Lcd4_Cmd(y);
 60c:	81 2f       	mov	r24, r17
 60e:	8f 70       	andi	r24, 0x0F	; 15
 610:	0e 94 cd 02 	call	0x59a	; 0x59a <Lcd4_Cmd>
	}
}
 614:	1f 91       	pop	r17
 616:	08 95       	ret

00000618 <Lcd4_Init>:

void Lcd4_Init()
{
	Lcd4_Port(0x00);
 618:	80 e0       	ldi	r24, 0x00	; 0
 61a:	0e 94 93 02 	call	0x526	; 0x526 <Lcd4_Port>
 61e:	88 ec       	ldi	r24, 0xC8	; 200
 620:	90 e0       	ldi	r25, 0x00	; 0
 622:	20 e9       	ldi	r18, 0x90	; 144
 624:	31 e0       	ldi	r19, 0x01	; 1
 626:	f9 01       	movw	r30, r18
 628:	31 97       	sbiw	r30, 0x01	; 1
 62a:	f1 f7       	brne	.-4      	; 0x628 <Lcd4_Init+0x10>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 62c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 62e:	d9 f7       	brne	.-10     	; 0x626 <Lcd4_Init+0xe>
	_delay_ms(20);
	///////////// Reset process from datasheet /////////
	Lcd4_Cmd(0x03);
 630:	83 e0       	ldi	r24, 0x03	; 3
 632:	0e 94 cd 02 	call	0x59a	; 0x59a <Lcd4_Cmd>
 636:	80 e2       	ldi	r24, 0x20	; 32
 638:	9e e4       	ldi	r25, 0x4E	; 78
 63a:	01 97       	sbiw	r24, 0x01	; 1
 63c:	f1 f7       	brne	.-4      	; 0x63a <Lcd4_Init+0x22>
	_delay_ms(5);
	Lcd4_Cmd(0x03);
 63e:	83 e0       	ldi	r24, 0x03	; 3
 640:	0e 94 cd 02 	call	0x59a	; 0x59a <Lcd4_Cmd>
 644:	80 ee       	ldi	r24, 0xE0	; 224
 646:	9b ea       	ldi	r25, 0xAB	; 171
 648:	01 97       	sbiw	r24, 0x01	; 1
 64a:	f1 f7       	brne	.-4      	; 0x648 <Lcd4_Init+0x30>
	_delay_ms(11);
	Lcd4_Cmd(0x03);
 64c:	83 e0       	ldi	r24, 0x03	; 3
 64e:	0e 94 cd 02 	call	0x59a	; 0x59a <Lcd4_Cmd>
	/////////////////////////////////////////////////////
	Lcd4_Cmd(0x02);
 652:	82 e0       	ldi	r24, 0x02	; 2
 654:	0e 94 cd 02 	call	0x59a	; 0x59a <Lcd4_Cmd>
	Lcd4_Cmd(0x02);
 658:	82 e0       	ldi	r24, 0x02	; 2
 65a:	0e 94 cd 02 	call	0x59a	; 0x59a <Lcd4_Cmd>
	Lcd4_Cmd(0x08);
 65e:	88 e0       	ldi	r24, 0x08	; 8
 660:	0e 94 cd 02 	call	0x59a	; 0x59a <Lcd4_Cmd>
	Lcd4_Cmd(0x00);
 664:	80 e0       	ldi	r24, 0x00	; 0
 666:	0e 94 cd 02 	call	0x59a	; 0x59a <Lcd4_Cmd>
	Lcd4_Cmd(0x0C);
 66a:	8c e0       	ldi	r24, 0x0C	; 12
 66c:	0e 94 cd 02 	call	0x59a	; 0x59a <Lcd4_Cmd>
	Lcd4_Cmd(0x00);
 670:	80 e0       	ldi	r24, 0x00	; 0
 672:	0e 94 cd 02 	call	0x59a	; 0x59a <Lcd4_Cmd>
	Lcd4_Cmd(0x06);
 676:	86 e0       	ldi	r24, 0x06	; 6
 678:	0e 94 cd 02 	call	0x59a	; 0x59a <Lcd4_Cmd>
}
 67c:	08 95       	ret

0000067e <Lcd4_Write_Char>:

void Lcd4_Write_Char(char a)
{
 67e:	ff 92       	push	r15
 680:	0f 93       	push	r16
 682:	1f 93       	push	r17
 684:	f8 2e       	mov	r15, r24
	char temp,y;
	temp = a&0x0F;
	y = a&0xF0;
	pinChange(RS,1);             // => RS = 1
 686:	8a e1       	ldi	r24, 0x1A	; 26
 688:	90 e0       	ldi	r25, 0x00	; 0
 68a:	61 e0       	ldi	r22, 0x01	; 1
 68c:	70 e0       	ldi	r23, 0x00	; 0
 68e:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
	Lcd4_Port(y>>4);             //Data transfer
 692:	8f 2d       	mov	r24, r15
 694:	82 95       	swap	r24
 696:	8f 70       	andi	r24, 0x0F	; 15
 698:	0e 94 93 02 	call	0x526	; 0x526 <Lcd4_Port>
	pinChange(EN,1);
 69c:	8b e1       	ldi	r24, 0x1B	; 27
 69e:	90 e0       	ldi	r25, 0x00	; 0
 6a0:	61 e0       	ldi	r22, 0x01	; 1
 6a2:	70 e0       	ldi	r23, 0x00	; 0
 6a4:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
 6a8:	00 ea       	ldi	r16, 0xA0	; 160
 6aa:	1f e0       	ldi	r17, 0x0F	; 15
 6ac:	c8 01       	movw	r24, r16
 6ae:	01 97       	sbiw	r24, 0x01	; 1
 6b0:	f1 f7       	brne	.-4      	; 0x6ae <Lcd4_Write_Char+0x30>
	_delay_ms(1);
	pinChange(EN,0);
 6b2:	8b e1       	ldi	r24, 0x1B	; 27
 6b4:	90 e0       	ldi	r25, 0x00	; 0
 6b6:	60 e0       	ldi	r22, 0x00	; 0
 6b8:	70 e0       	ldi	r23, 0x00	; 0
 6ba:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
 6be:	c8 01       	movw	r24, r16
 6c0:	01 97       	sbiw	r24, 0x01	; 1
 6c2:	f1 f7       	brne	.-4      	; 0x6c0 <Lcd4_Write_Char+0x42>
	_delay_ms(1);
	Lcd4_Port(temp);
 6c4:	8f 2d       	mov	r24, r15
 6c6:	8f 70       	andi	r24, 0x0F	; 15
 6c8:	0e 94 93 02 	call	0x526	; 0x526 <Lcd4_Port>
	pinChange(EN,1);
 6cc:	8b e1       	ldi	r24, 0x1B	; 27
 6ce:	90 e0       	ldi	r25, 0x00	; 0
 6d0:	61 e0       	ldi	r22, 0x01	; 1
 6d2:	70 e0       	ldi	r23, 0x00	; 0
 6d4:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
 6d8:	c8 01       	movw	r24, r16
 6da:	01 97       	sbiw	r24, 0x01	; 1
 6dc:	f1 f7       	brne	.-4      	; 0x6da <Lcd4_Write_Char+0x5c>
	_delay_ms(1);
	pinChange(EN,0);
 6de:	8b e1       	ldi	r24, 0x1B	; 27
 6e0:	90 e0       	ldi	r25, 0x00	; 0
 6e2:	60 e0       	ldi	r22, 0x00	; 0
 6e4:	70 e0       	ldi	r23, 0x00	; 0
 6e6:	0e 94 41 00 	call	0x82	; 0x82 <pinChange>
 6ea:	c8 01       	movw	r24, r16
 6ec:	01 97       	sbiw	r24, 0x01	; 1
 6ee:	f1 f7       	brne	.-4      	; 0x6ec <Lcd4_Write_Char+0x6e>
	_delay_ms(1);
}
 6f0:	1f 91       	pop	r17
 6f2:	0f 91       	pop	r16
 6f4:	ff 90       	pop	r15
 6f6:	08 95       	ret

000006f8 <Lcd4_Write_String>:

void Lcd4_Write_String(char *a)
{
 6f8:	cf 93       	push	r28
 6fa:	df 93       	push	r29
 6fc:	ec 01       	movw	r28, r24
 6fe:	02 c0       	rjmp	.+4      	; 0x704 <Lcd4_Write_String+0xc>
	int i;
	for(i=0;a[i]!='\0';i++)
	Lcd4_Write_Char(a[i]);
 700:	0e 94 3f 03 	call	0x67e	; 0x67e <Lcd4_Write_Char>
}

void Lcd4_Write_String(char *a)
{
	int i;
	for(i=0;a[i]!='\0';i++)
 704:	89 91       	ld	r24, Y+
 706:	88 23       	and	r24, r24
 708:	d9 f7       	brne	.-10     	; 0x700 <Lcd4_Write_String+0x8>
	Lcd4_Write_Char(a[i]);
}
 70a:	df 91       	pop	r29
 70c:	cf 91       	pop	r28
 70e:	08 95       	ret

00000710 <Lcd4_Shift_Right>:

void Lcd4_Shift_Right()
{
	Lcd4_Cmd(0x01);
 710:	81 e0       	ldi	r24, 0x01	; 1
 712:	0e 94 cd 02 	call	0x59a	; 0x59a <Lcd4_Cmd>
	Lcd4_Cmd(0x0C);
 716:	8c e0       	ldi	r24, 0x0C	; 12
 718:	0e 94 cd 02 	call	0x59a	; 0x59a <Lcd4_Cmd>
}
 71c:	08 95       	ret

0000071e <Lcd4_Shift_Left>:

void Lcd4_Shift_Left()
{
	Lcd4_Cmd(0x01);
 71e:	81 e0       	ldi	r24, 0x01	; 1
 720:	0e 94 cd 02 	call	0x59a	; 0x59a <Lcd4_Cmd>
	Lcd4_Cmd(0x08);
 724:	88 e0       	ldi	r24, 0x08	; 8
 726:	0e 94 cd 02 	call	0x59a	; 0x59a <Lcd4_Cmd>
}
 72a:	08 95       	ret

0000072c <main>:
#include <util/delay.h>
#include "lcd.h" 

int main(void)
{
  DDRD = 0xF3;
 72c:	83 ef       	ldi	r24, 0xF3	; 243
 72e:	81 bb       	out	0x11, r24	; 17
  DDRC = 0xFF;
 730:	8f ef       	ldi	r24, 0xFF	; 255
 732:	84 bb       	out	0x14, r24	; 20
  PORTD |=(1<<PD1);
 734:	91 9a       	sbi	0x12, 1	; 18
  PORTD &=~(1<<PD0);
 736:	90 98       	cbi	0x12, 0	; 18
  Lcd4_Clear();
 738:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <Lcd4_Clear>
  Lcd4_Init();
 73c:	0e 94 0c 03 	call	0x618	; 0x618 <Lcd4_Init>
  while(1)
  {
  
    if(bit_is_clear(PIND,1))
 740:	81 99       	sbic	0x10, 1	; 16
 742:	07 c0       	rjmp	.+14     	; 0x752 <main+0x26>
	{
		Lcd4_Set_Cursor(1,0);
 744:	81 e0       	ldi	r24, 0x01	; 1
 746:	60 e0       	ldi	r22, 0x00	; 0
 748:	0e 94 f7 02 	call	0x5ee	; 0x5ee <Lcd4_Set_Cursor>
		Lcd4_Write_String("btn low");
 74c:	80 e6       	ldi	r24, 0x60	; 96
 74e:	90 e0       	ldi	r25, 0x00	; 0
 750:	08 c0       	rjmp	.+16     	; 0x762 <main+0x36>
	}
	
	else if(PIND &(1<<PD0))
 752:	80 9b       	sbis	0x10, 0	; 16
 754:	09 c0       	rjmp	.+18     	; 0x768 <main+0x3c>
	{
		Lcd4_Set_Cursor(2,0);
 756:	82 e0       	ldi	r24, 0x02	; 2
 758:	60 e0       	ldi	r22, 0x00	; 0
 75a:	0e 94 f7 02 	call	0x5ee	; 0x5ee <Lcd4_Set_Cursor>
		Lcd4_Write_String("btn high");
 75e:	88 e6       	ldi	r24, 0x68	; 104
 760:	90 e0       	ldi	r25, 0x00	; 0
 762:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <Lcd4_Write_String>
 766:	ec cf       	rjmp	.-40     	; 0x740 <main+0x14>
    
	}
	else Lcd4_Clear();
 768:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <Lcd4_Clear>
 76c:	e9 cf       	rjmp	.-46     	; 0x740 <main+0x14>

0000076e <_exit>:
 76e:	f8 94       	cli

00000770 <__stop_program>:
 770:	ff cf       	rjmp	.-2      	; 0x770 <__stop_program>
