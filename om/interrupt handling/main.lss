
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000134  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000005e  00000000  00000000  00000154  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000135  00000000  00000000  000001b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000009a  00000000  00000000  000002e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000124  00000000  00000000  00000381  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000080  00000000  00000000  000004a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000099  00000000  00000000  00000528  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 59 00 	jmp	0xb2	; 0xb2 <__vector_1>
   8:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__vector_2>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 67 00 	jmp	0xce	; 0xce <__vector_18>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 6e 00 	jmp	0xdc	; 0xdc <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include<avr/interrupt.h>


int main(void){

DDRB|=(1<<PB5)|(1<<PB6)|(1<<PB4);
  6c:	87 b3       	in	r24, 0x17	; 23
  6e:	80 67       	ori	r24, 0x70	; 112
  70:	87 bb       	out	0x17, r24	; 23
DDRB &=~(1<<PB2);
  72:	ba 98       	cbi	0x17, 2	; 23

DDRD &=~((1<<PD2)|(1<<PD3));
  74:	81 b3       	in	r24, 0x11	; 17
  76:	83 7f       	andi	r24, 0xF3	; 243
  78:	81 bb       	out	0x11, r24	; 17

 GICR=1<<INT0|1<<INT1|1<<INT2;
  7a:	80 ee       	ldi	r24, 0xE0	; 224
  7c:	8b bf       	out	0x3b, r24	; 59
 MCUCR=(1<<ISC00)|(1<<ISC01);
  7e:	83 e0       	ldi	r24, 0x03	; 3
  80:	85 bf       	out	0x35, r24	; 53
 MCUCR=1<<ISC11|(1<<ISC10);
  82:	8c e0       	ldi	r24, 0x0C	; 12
  84:	85 bf       	out	0x35, r24	; 53
 MCUCSR=1<<ISC2;
  86:	80 e4       	ldi	r24, 0x40	; 64
  88:	84 bf       	out	0x34, r24	; 52
 
 
 sei();
  8a:	78 94       	sei
 while(1){
   PORTB ^=(1<<PB5);
  8c:	30 e2       	ldi	r19, 0x20	; 32
    PORTB ^=(1<<PB6);
  8e:	20 e4       	ldi	r18, 0x40	; 64
	 PORTB ^=(1<<PB4);
  90:	90 e1       	ldi	r25, 0x10	; 16
 MCUCSR=1<<ISC2;
 
 
 sei();
 while(1){
   PORTB ^=(1<<PB5);
  92:	88 b3       	in	r24, 0x18	; 24
  94:	83 27       	eor	r24, r19
  96:	88 bb       	out	0x18, r24	; 24
    PORTB ^=(1<<PB6);
  98:	88 b3       	in	r24, 0x18	; 24
  9a:	82 27       	eor	r24, r18
  9c:	88 bb       	out	0x18, r24	; 24
	 PORTB ^=(1<<PB4);
  9e:	88 b3       	in	r24, 0x18	; 24
  a0:	89 27       	eor	r24, r25
  a2:	88 bb       	out	0x18, r24	; 24
  a4:	f6 cf       	rjmp	.-20     	; 0x92 <main+0x26>

000000a6 <f1>:
	 }
	
}
void f1(void){
	do{
	PORTB &=~(1<<PB4);
  a6:	c4 98       	cbi	0x18, 4	; 24
  a8:	fe cf       	rjmp	.-4      	; 0xa6 <f1>

000000aa <f2>:
	reti();
}

void f2(void){
	do{
	PORTB &=~(1<<PB5);
  aa:	c5 98       	cbi	0x18, 5	; 24
  ac:	fe cf       	rjmp	.-4      	; 0xaa <f2>

000000ae <f3>:
}


void f3(void){
	do{
	PORTB &=~(1<<PB6);
  ae:	c6 98       	cbi	0x18, 6	; 24
  b0:	fe cf       	rjmp	.-4      	; 0xae <f3>

000000b2 <__vector_1>:
	}while(1);
	reti();
}

ISR(INT0_vect)
{f1();}
  b2:	1f 92       	push	r1
  b4:	0f 92       	push	r0
  b6:	0f b6       	in	r0, 0x3f	; 63
  b8:	0f 92       	push	r0
  ba:	11 24       	eor	r1, r1
	 }
	
}
void f1(void){
	do{
	PORTB &=~(1<<PB4);
  bc:	c4 98       	cbi	0x18, 4	; 24
  be:	fe cf       	rjmp	.-4      	; 0xbc <__vector_1+0xa>

000000c0 <__vector_2>:
}

ISR(INT0_vect)
{f1();}
ISR(INT1_vect)
{f2();}
  c0:	1f 92       	push	r1
  c2:	0f 92       	push	r0
  c4:	0f b6       	in	r0, 0x3f	; 63
  c6:	0f 92       	push	r0
  c8:	11 24       	eor	r1, r1
	reti();
}

void f2(void){
	do{
	PORTB &=~(1<<PB5);
  ca:	c5 98       	cbi	0x18, 5	; 24
  cc:	fe cf       	rjmp	.-4      	; 0xca <__vector_2+0xa>

000000ce <__vector_18>:
ISR(INT0_vect)
{f1();}
ISR(INT1_vect)
{f2();}
ISR(INT2_vect)
  ce:	1f 92       	push	r1
  d0:	0f 92       	push	r0
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	0f 92       	push	r0
  d6:	11 24       	eor	r1, r1
}


void f3(void){
	do{
	PORTB &=~(1<<PB6);
  d8:	c6 98       	cbi	0x18, 6	; 24
  da:	fe cf       	rjmp	.-4      	; 0xd8 <__vector_18+0xa>

000000dc <_exit>:
  dc:	f8 94       	cli

000000de <__stop_program>:
  de:	ff cf       	rjmp	.-2      	; 0xde <__stop_program>
