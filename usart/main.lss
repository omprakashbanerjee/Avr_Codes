
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000000e2  00000156  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  00000158  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000058  00000000  00000000  00000178  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001a1  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000131  00000000  00000000  00000371  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001db  00000000  00000000  000004a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000050  00000000  00000000  00000680  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000ce  00000000  00000000  000006d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000018  00000000  00000000  0000079e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  000007b6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ee       	ldi	r30, 0xE2	; 226
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 4b 00 	call	0x96	; 0x96 <main>
  7a:	0c 94 6f 00 	jmp	0xde	; 0xde <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <USART_Init>:

}
void USART_Init(void)
{
	/* Set baud rate */
	UBRRH = 0x00;
  82:	10 bc       	out	0x20, r1	; 32
	UBRRL = 0x67;
  84:	87 e6       	ldi	r24, 0x67	; 103
  86:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	UCSRB |= (1<<RXEN)|(1<<TXEN);
  88:	8a b1       	in	r24, 0x0a	; 10
  8a:	88 61       	ori	r24, 0x18	; 24
  8c:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 2stop bit */
	UCSRC |= (1<<URSEL)|(1<<USBS)|(3<<UCSZ0);
  8e:	80 b5       	in	r24, 0x20	; 32
  90:	8e 68       	ori	r24, 0x8E	; 142
  92:	80 bd       	out	0x20, r24	; 32
}
  94:	08 95       	ret

00000096 <main>:


unsigned char data='P';
int main( void )
{
	 DDRB |=(1<<PB1);
  96:	b9 9a       	sbi	0x17, 1	; 23
	 DDRB &=~(1<<PB6);
  98:	be 98       	cbi	0x17, 6	; 23
	 PORTB &=~(1<<PB6);
  9a:	c6 98       	cbi	0x18, 6	; 24
		USART_Init();
  9c:	0e 94 41 00 	call	0x82	; 0x82 <USART_Init>
			if(PINB &(1<<PB6)) //when we press the button PB6 willget 5v input
				{ _delay_ms(50); //small delay to ignore the bouncing time
					if(bit_is_clear(PINB,6)) // then on releasing the button task will be done
						{
							PORTB^=(1<<PB1);
							USART_Transmit(data);
  a0:	40 91 60 00 	lds	r20, 0x0060
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  a4:	20 e9       	ldi	r18, 0x90	; 144
  a6:	31 e0       	ldi	r19, 0x01	; 1
		{
			if(PINB &(1<<PB6)) //when we press the button PB6 willget 5v input
				{ _delay_ms(50); //small delay to ignore the bouncing time
					if(bit_is_clear(PINB,6)) // then on releasing the button task will be done
						{
							PORTB^=(1<<PB1);
  a8:	52 e0       	ldi	r21, 0x02	; 2
	 DDRB &=~(1<<PB6);
	 PORTB &=~(1<<PB6);
		USART_Init();
		while(1)
		{
			if(PINB &(1<<PB6)) //when we press the button PB6 willget 5v input
  aa:	b6 9b       	sbis	0x16, 6	; 22
  ac:	fe cf       	rjmp	.-4      	; 0xaa <main+0x14>
  ae:	84 ef       	ldi	r24, 0xF4	; 244
  b0:	91 e0       	ldi	r25, 0x01	; 1
  b2:	f9 01       	movw	r30, r18
  b4:	31 97       	sbiw	r30, 0x01	; 1
  b6:	f1 f7       	brne	.-4      	; 0xb4 <main+0x1e>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  b8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  ba:	d9 f7       	brne	.-10     	; 0xb2 <main+0x1c>
				{ _delay_ms(50); //small delay to ignore the bouncing time
					if(bit_is_clear(PINB,6)) // then on releasing the button task will be done
  bc:	b6 99       	sbic	0x16, 6	; 22
  be:	f5 cf       	rjmp	.-22     	; 0xaa <main+0x14>
						{
							PORTB^=(1<<PB1);
  c0:	88 b3       	in	r24, 0x18	; 24
  c2:	85 27       	eor	r24, r21
  c4:	88 bb       	out	0x18, r24	; 24


void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSRA & (1<<UDRE)) );
  c6:	5d 9b       	sbis	0x0b, 5	; 11
  c8:	fe cf       	rjmp	.-4      	; 0xc6 <main+0x30>
	/* Put data into buffer, sends the data */
	UDR = data;
  ca:	4c b9       	out	0x0c, r20	; 12
  cc:	ee cf       	rjmp	.-36     	; 0xaa <main+0x14>

000000ce <USART_Transmit>:


void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSRA & (1<<UDRE)) );
  ce:	5d 9b       	sbis	0x0b, 5	; 11
  d0:	fe cf       	rjmp	.-4      	; 0xce <USART_Transmit>
	/* Put data into buffer, sends the data */
	UDR = data;
  d2:	8c b9       	out	0x0c, r24	; 12
}
  d4:	08 95       	ret

000000d6 <USART_Receive>:


unsigned char USART_Receive(void)
{
	/* Wait for data to be received */
	while ( !(UCSRA & (1<<RXC)) );
  d6:	5f 9b       	sbis	0x0b, 7	; 11
  d8:	fe cf       	rjmp	.-4      	; 0xd6 <USART_Receive>
	/* Get and return received data from buffer */
	return UDR;
  da:	8c b1       	in	r24, 0x0c	; 12
}
  dc:	08 95       	ret

000000de <_exit>:
  de:	f8 94       	cli

000000e0 <__stop_program>:
  e0:	ff cf       	rjmp	.-2      	; 0xe0 <__stop_program>
