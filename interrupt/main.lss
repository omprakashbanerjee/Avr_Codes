
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ca  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000011e  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000002a  00000000  00000000  0000013e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000131  00000000  00000000  00000168  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000cd  00000000  00000000  00000299  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000152  00000000  00000000  00000366  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000030  00000000  00000000  000004b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000b0  00000000  00000000  000004e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000030  00000000  00000000  00000598  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 58 00 	call	0xb0	; 0xb0 <main>
  64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <INT11_vect>:
#include<avr/io.h>
#include<avr/interrupt.h>
#include<util/delay.h>
ISR(INT11_vect)
	{
  6c:	1f 92       	push	r1
  6e:	0f 92       	push	r0
  70:	0f b6       	in	r0, 0x3f	; 63
  72:	0f 92       	push	r0
  74:	11 24       	eor	r1, r1
  76:	2f 93       	push	r18
  78:	3f 93       	push	r19
  7a:	8f 93       	push	r24
  7c:	9f 93       	push	r25
  7e:	ef 93       	push	r30
  80:	ff 93       	push	r31
	PORTC =~PORTC;
  82:	85 b3       	in	r24, 0x15	; 21
  84:	80 95       	com	r24
  86:	85 bb       	out	0x15, r24	; 21
  88:	84 ef       	ldi	r24, 0xF4	; 244
  8a:	91 e0       	ldi	r25, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  8c:	20 e9       	ldi	r18, 0x90	; 144
  8e:	31 e0       	ldi	r19, 0x01	; 1
  90:	f9 01       	movw	r30, r18
  92:	31 97       	sbiw	r30, 0x01	; 1
  94:	f1 f7       	brne	.-4      	; 0x92 <INT11_vect+0x26>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  96:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  98:	d9 f7       	brne	.-10     	; 0x90 <INT11_vect+0x24>
	// PORTC ^=PORTC; this is wrong statement
	_delay_ms(50);
	}
  9a:	ff 91       	pop	r31
  9c:	ef 91       	pop	r30
  9e:	9f 91       	pop	r25
  a0:	8f 91       	pop	r24
  a2:	3f 91       	pop	r19
  a4:	2f 91       	pop	r18
  a6:	0f 90       	pop	r0
  a8:	0f be       	out	0x3f, r0	; 63
  aa:	0f 90       	pop	r0
  ac:	1f 90       	pop	r1
  ae:	18 95       	reti

000000b0 <main>:
int main(void)
{
	DDRC=0x07;
  b0:	87 e0       	ldi	r24, 0x07	; 7
  b2:	84 bb       	out	0x14, r24	; 20
	PORTC=0;
  b4:	15 ba       	out	0x15, r1	; 21
	DDRD=0;
  b6:	11 ba       	out	0x11, r1	; 17
	PORTD=0x07;
  b8:	82 bb       	out	0x12, r24	; 18
	
	GICR=1<<INT1;
  ba:	80 e8       	ldi	r24, 0x80	; 128
  bc:	8b bf       	out	0x3b, r24	; 59
	MCUCR=(1<<ISC01) |(1<<ISC00);
  be:	83 e0       	ldi	r24, 0x03	; 3
  c0:	85 bf       	out	0x35, r24	; 53
	//MCUCR=(1<<ISC01);
	//MCUCR=(1<<ISC00);
	sei();
  c2:	78 94       	sei
  c4:	ff cf       	rjmp	.-2      	; 0xc4 <main+0x14>

000000c6 <_exit>:
  c6:	f8 94       	cli

000000c8 <__stop_program>:
  c8:	ff cf       	rjmp	.-2      	; 0xc8 <__stop_program>
