
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000210  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000210  00000284  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000076  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000356  00000000  00000000  0000032a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000192  00000000  00000000  00000680  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000363  00000000  00000000  00000812  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000090  00000000  00000000  00000b78  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000f7  00000000  00000000  00000c08  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000104  00000000  00000000  00000cff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e1       	ldi	r30, 0x10	; 16
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 be 00 	call	0x17c	; 0x17c <main>
  7a:	0c 94 06 01 	jmp	0x20c	; 0x20c <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <ADC_init>:
}


void ADC_init(void)
{
	ADMUX|=(1<<REFS0);//0B=01000000
  82:	3e 9a       	sbi	0x07, 6	; 7
	ADCSRA=(1<<ADEN)|(1<<ADATE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);//0b10100111
  84:	87 ea       	ldi	r24, 0xA7	; 167
  86:	86 b9       	out	0x06, r24	; 6
}
  88:	08 95       	ret

0000008a <adc_read>:

unsigned int adc_read(unsigned int cha)
{
	unsigned int channel;
	channel=cha&0b00000111;
	ADMUX|=channel;
  8a:	27 b1       	in	r18, 0x07	; 7
  8c:	87 70       	andi	r24, 0x07	; 7
  8e:	90 70       	andi	r25, 0x00	; 0
  90:	28 2b       	or	r18, r24
  92:	27 b9       	out	0x07, r18	; 7
	ADCSRA|=(1<<ADSC );
  94:	36 9a       	sbi	0x06, 6	; 6
	while(!(ADCSRA&(1<<ADIF)))//ADC CHECKING
  96:	34 9b       	sbis	0x06, 4	; 6
  98:	fe cf       	rjmp	.-4      	; 0x96 <adc_read+0xc>
	{
	}
	ADCSRA|=(1<<ADIF);
  9a:	34 9a       	sbi	0x06, 4	; 6
	return ADC;
  9c:	24 b1       	in	r18, 0x04	; 4
  9e:	35 b1       	in	r19, 0x05	; 5
}
  a0:	c9 01       	movw	r24, r18
  a2:	08 95       	ret

000000a4 <lcd_cmd>:
	lcd_cmd(0x06);
}
void lcd_cmd(unsigned char com)
{
	unsigned char cmd1;
	cmd1=(com&(0XF0));//UPPER 4 BIT DATA
  a4:	28 2f       	mov	r18, r24
  a6:	20 7f       	andi	r18, 0xF0	; 240
	lcd=cmd1;
  a8:	28 bb       	out	0x18, r18	; 24
	lcd&=~(1<<rs);//rs 0
  aa:	c0 98       	cbi	0x18, 0	; 24
	lcd&=~(1<<rw);//rw 0
  ac:	c1 98       	cbi	0x18, 1	; 24
	lcd|=(1<<en);
  ae:	c2 9a       	sbi	0x18, 2	; 24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  b0:	20 ea       	ldi	r18, 0xA0	; 160
  b2:	3f e0       	ldi	r19, 0x0F	; 15
  b4:	f9 01       	movw	r30, r18
  b6:	31 97       	sbiw	r30, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <lcd_cmd+0x12>
	_delay_ms(1);
	lcd&=~(1<<en);// en 0
  ba:	c2 98       	cbi	0x18, 2	; 24

	cmd1=((com<<4)&(0xF0));//LOWER 4 BIT DATA
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	44 e0       	ldi	r20, 0x04	; 4
  c0:	88 0f       	add	r24, r24
  c2:	99 1f       	adc	r25, r25
  c4:	4a 95       	dec	r20
  c6:	e1 f7       	brne	.-8      	; 0xc0 <lcd_cmd+0x1c>
	lcd=cmd1;
  c8:	88 bb       	out	0x18, r24	; 24
	lcd&=~(1<<rs);//rs 0
  ca:	c0 98       	cbi	0x18, 0	; 24
	lcd&=~(1<<rw);//rw 0
  cc:	c1 98       	cbi	0x18, 1	; 24
	lcd|=(1<<en);
  ce:	c2 9a       	sbi	0x18, 2	; 24
  d0:	c9 01       	movw	r24, r18
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <lcd_cmd+0x2e>
	_delay_ms(1);
	lcd&=~(1<<en);// en 0
  d6:	c2 98       	cbi	0x18, 2	; 24
}
  d8:	08 95       	ret

000000da <lcd_init>:
}


void lcd_init()
{
	lcd_cmd(0x02);
  da:	82 e0       	ldi	r24, 0x02	; 2
  dc:	0e 94 52 00 	call	0xa4	; 0xa4 <lcd_cmd>
	lcd_cmd(0x28);
  e0:	88 e2       	ldi	r24, 0x28	; 40
  e2:	0e 94 52 00 	call	0xa4	; 0xa4 <lcd_cmd>
	lcd_cmd(0x0E);
  e6:	8e e0       	ldi	r24, 0x0E	; 14
  e8:	0e 94 52 00 	call	0xa4	; 0xa4 <lcd_cmd>
	lcd_cmd(0x06);
  ec:	86 e0       	ldi	r24, 0x06	; 6
  ee:	0e 94 52 00 	call	0xa4	; 0xa4 <lcd_cmd>
}
  f2:	08 95       	ret

000000f4 <lcd_data>:
	lcd&=~(1<<en);// en 0
}
void lcd_data(unsigned char data)
{
	unsigned char data1;
	data1=(data&(0XF0));//UPPER 4 BIT DATA
  f4:	28 2f       	mov	r18, r24
  f6:	20 7f       	andi	r18, 0xF0	; 240
	lcd=data1;
  f8:	28 bb       	out	0x18, r18	; 24
	lcd|=(1<<rs);//rs 1
  fa:	c0 9a       	sbi	0x18, 0	; 24
	lcd&=~(1<<rw);//rw 1
  fc:	c1 98       	cbi	0x18, 1	; 24
	lcd|=(1<<en);//en 0
  fe:	c2 9a       	sbi	0x18, 2	; 24
 100:	20 ea       	ldi	r18, 0xA0	; 160
 102:	3f e0       	ldi	r19, 0x0F	; 15
 104:	f9 01       	movw	r30, r18
 106:	31 97       	sbiw	r30, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <lcd_data+0x12>
	_delay_ms(1);
	lcd&=~(1<<en);// en=0
 10a:	c2 98       	cbi	0x18, 2	; 24

	data1=((data<<4)&(0XF0));
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	54 e0       	ldi	r21, 0x04	; 4
 110:	88 0f       	add	r24, r24
 112:	99 1f       	adc	r25, r25
 114:	5a 95       	dec	r21
 116:	e1 f7       	brne	.-8      	; 0x110 <lcd_data+0x1c>
	lcd=data1;
 118:	88 bb       	out	0x18, r24	; 24
	lcd|=(1<<rs);//rs 1
 11a:	c0 9a       	sbi	0x18, 0	; 24
	lcd&=~(1<<rw);//rw 0
 11c:	c1 98       	cbi	0x18, 1	; 24
	lcd|=(1<<en);
 11e:	c2 9a       	sbi	0x18, 2	; 24
 120:	c9 01       	movw	r24, r18
 122:	01 97       	sbiw	r24, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <lcd_data+0x2e>
	_delay_ms(1);
	lcd&=~(1<<en);// en 0
 126:	c2 98       	cbi	0x18, 2	; 24
}
 128:	08 95       	ret

0000012a <lcd_string>:
//------------------------------------
void lcd_string(unsigned char *str)
{
 12a:	cf 93       	push	r28
 12c:	df 93       	push	r29
 12e:	ec 01       	movw	r28, r24
 130:	02 c0       	rjmp	.+4      	; 0x136 <lcd_string+0xc>
	int i=0;
	while(str[i]!='\0')
	{
		lcd_data(str[i]);
 132:	0e 94 7a 00 	call	0xf4	; 0xf4 <lcd_data>
}
//------------------------------------
void lcd_string(unsigned char *str)
{
	int i=0;
	while(str[i]!='\0')
 136:	89 91       	ld	r24, Y+
 138:	88 23       	and	r24, r24
 13a:	d9 f7       	brne	.-10     	; 0x132 <lcd_string+0x8>
	{
		lcd_data(str[i]);
		i++;
	}
}
 13c:	df 91       	pop	r29
 13e:	cf 91       	pop	r28
 140:	08 95       	ret

00000142 <lcd_num>:

void lcd_num(unsigned int value)
{
 142:	cf 93       	push	r28
 144:	df 93       	push	r29
 146:	ec 01       	movw	r28, r24
	unsigned int rem;
	lcd_cmd(0x04);
 148:	84 e0       	ldi	r24, 0x04	; 4
 14a:	0e 94 52 00 	call	0xa4	; 0xa4 <lcd_cmd>
 14e:	0e c0       	rjmp	.+28     	; 0x16c <lcd_num+0x2a>
	while(value!=0)
	{
		rem=value%10;
		lcd_data(rem+48);
 150:	ce 01       	movw	r24, r28
 152:	6a e0       	ldi	r22, 0x0A	; 10
 154:	70 e0       	ldi	r23, 0x00	; 0
 156:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <__udivmodhi4>
 15a:	80 5d       	subi	r24, 0xD0	; 208
 15c:	0e 94 7a 00 	call	0xf4	; 0xf4 <lcd_data>
		value=value/10;
 160:	ce 01       	movw	r24, r28
 162:	6a e0       	ldi	r22, 0x0A	; 10
 164:	70 e0       	ldi	r23, 0x00	; 0
 166:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <__udivmodhi4>
 16a:	eb 01       	movw	r28, r22

void lcd_num(unsigned int value)
{
	unsigned int rem;
	lcd_cmd(0x04);
	while(value!=0)
 16c:	20 97       	sbiw	r28, 0x00	; 0
 16e:	81 f7       	brne	.-32     	; 0x150 <lcd_num+0xe>
	{
		rem=value%10;
		lcd_data(rem+48);
		value=value/10;
	}
	lcd_cmd(0x06);
 170:	86 e0       	ldi	r24, 0x06	; 6
 172:	0e 94 52 00 	call	0xa4	; 0xa4 <lcd_cmd>
 176:	df 91       	pop	r29
 178:	cf 91       	pop	r28
 17a:	08 95       	ret

0000017c <main>:
unsigned int adc_read(unsigned int ch);

//--------main-----------------------------------

int main(void)
{
 17c:	0f 93       	push	r16
 17e:	1f 93       	push	r17
 180:	cf 93       	push	r28
 182:	df 93       	push	r29
	DDRA=0x00;
 184:	1a ba       	out	0x1a, r1	; 26
	DDRB=0XFF;   ////LCD OUTP
 186:	8f ef       	ldi	r24, 0xFF	; 255
 188:	87 bb       	out	0x17, r24	; 23
	lcd_init();
 18a:	0e 94 6d 00 	call	0xda	; 0xda <lcd_init>
}


void ADC_init(void)
{
	ADMUX|=(1<<REFS0);//0B=01000000
 18e:	3e 9a       	sbi	0x07, 6	; 7
	ADCSRA=(1<<ADEN)|(1<<ADATE)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);//0b10100111
 190:	87 ea       	ldi	r24, 0xA7	; 167
 192:	86 b9       	out	0x06, r24	; 6
 194:	20 ed       	ldi	r18, 0xD0	; 208
 196:	37 e0       	ldi	r19, 0x07	; 7
 198:	c0 e9       	ldi	r28, 0x90	; 144
 19a:	d1 e0       	ldi	r29, 0x01	; 1
 19c:	05 c0       	rjmp	.+10     	; 0x1a8 <main+0x2c>
 19e:	ce 01       	movw	r24, r28
 1a0:	01 97       	sbiw	r24, 0x01	; 1
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <main+0x24>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1a4:	21 50       	subi	r18, 0x01	; 1
 1a6:	30 40       	sbci	r19, 0x00	; 0
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1a8:	21 15       	cp	r18, r1
 1aa:	31 05       	cpc	r19, r1
 1ac:	c1 f7       	brne	.-16     	; 0x19e <main+0x22>

	unsigned int value;
	while(1)
	{
		_delay_ms(200);
		lcd_cmd(0x80);
 1ae:	80 e8       	ldi	r24, 0x80	; 128
 1b0:	0e 94 52 00 	call	0xa4	; 0xa4 <lcd_cmd>
		lcd_string("ADC value=    ");
 1b4:	80 e6       	ldi	r24, 0x60	; 96
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_string>
		lcd_cmd(0xc0);
 1bc:	80 ec       	ldi	r24, 0xC0	; 192
 1be:	0e 94 52 00 	call	0xa4	; 0xa4 <lcd_cmd>
		lcd_data(48);
 1c2:	80 e3       	ldi	r24, 0x30	; 48
 1c4:	0e 94 7a 00 	call	0xf4	; 0xf4 <lcd_data>
		value=adc_read(0);
 1c8:	80 e0       	ldi	r24, 0x00	; 0
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	0e 94 45 00 	call	0x8a	; 0x8a <adc_read>
 1d0:	8c 01       	movw	r16, r24
		lcd_cmd(0xc3);
 1d2:	83 ec       	ldi	r24, 0xC3	; 195
 1d4:	0e 94 52 00 	call	0xa4	; 0xa4 <lcd_cmd>
		lcd_num(value);
 1d8:	c8 01       	movw	r24, r16
 1da:	0e 94 a1 00 	call	0x142	; 0x142 <lcd_num>
 1de:	20 ed       	ldi	r18, 0xD0	; 208
 1e0:	37 e0       	ldi	r19, 0x07	; 7
 1e2:	dd cf       	rjmp	.-70     	; 0x19e <main+0x22>

000001e4 <__udivmodhi4>:
 1e4:	aa 1b       	sub	r26, r26
 1e6:	bb 1b       	sub	r27, r27
 1e8:	51 e1       	ldi	r21, 0x11	; 17
 1ea:	07 c0       	rjmp	.+14     	; 0x1fa <__udivmodhi4_ep>

000001ec <__udivmodhi4_loop>:
 1ec:	aa 1f       	adc	r26, r26
 1ee:	bb 1f       	adc	r27, r27
 1f0:	a6 17       	cp	r26, r22
 1f2:	b7 07       	cpc	r27, r23
 1f4:	10 f0       	brcs	.+4      	; 0x1fa <__udivmodhi4_ep>
 1f6:	a6 1b       	sub	r26, r22
 1f8:	b7 0b       	sbc	r27, r23

000001fa <__udivmodhi4_ep>:
 1fa:	88 1f       	adc	r24, r24
 1fc:	99 1f       	adc	r25, r25
 1fe:	5a 95       	dec	r21
 200:	a9 f7       	brne	.-22     	; 0x1ec <__udivmodhi4_loop>
 202:	80 95       	com	r24
 204:	90 95       	com	r25
 206:	bc 01       	movw	r22, r24
 208:	cd 01       	movw	r24, r26
 20a:	08 95       	ret

0000020c <_exit>:
 20c:	f8 94       	cli

0000020e <__stop_program>:
 20e:	ff cf       	rjmp	.-2      	; 0x20e <__stop_program>
