
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000138  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000039  00000000  00000000  00000158  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000013c  00000000  00000000  00000191  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000c9  00000000  00000000  000002cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000199  00000000  00000000  00000396  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000040  00000000  00000000  00000530  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000c4  00000000  00000000  00000570  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000028  00000000  00000000  00000634  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  0000065c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 56 00 	jmp	0xac	; 0xac <__vector_1>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__vector_2>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 70 00 	jmp	0xe0	; 0xe0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include<util/delay.h>
#include<avr/interrupt.h>

int main(void){

DDRD &=~((1<<PD2)|(1<<PD3));
  6c:	81 b3       	in	r24, 0x11	; 17
  6e:	83 7f       	andi	r24, 0xF3	; 243
  70:	81 bb       	out	0x11, r24	; 17
PORTD |=(1<<PD2)|(1<<PD3);
  72:	82 b3       	in	r24, 0x12	; 18
  74:	8c 60       	ori	r24, 0x0C	; 12
  76:	82 bb       	out	0x12, r24	; 18
DDRB |=(1<<PB4|1<<PB5);
  78:	87 b3       	in	r24, 0x17	; 23
  7a:	80 63       	ori	r24, 0x30	; 48
  7c:	87 bb       	out	0x17, r24	; 23


GICR =(1<<INT0)|(1<<INT1);
  7e:	80 ec       	ldi	r24, 0xC0	; 192
  80:	8b bf       	out	0x3b, r24	; 59
MCUCR=(1<<ISC00)|(ISC01)|(1<<ISC10)|(1<<ISC11);
  82:	8d e0       	ldi	r24, 0x0D	; 13
  84:	85 bf       	out	0x35, r24	; 53
sei();
  86:	78 94       	sei
	while(1)
	{
		PORTB ^=(1<<PB4);
  88:	50 e1       	ldi	r21, 0x10	; 16
		PORTB ^=(1<<PB5);
  8a:	40 e2       	ldi	r20, 0x20	; 32
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  8c:	20 e9       	ldi	r18, 0x90	; 144
  8e:	31 e0       	ldi	r19, 0x01	; 1
GICR =(1<<INT0)|(1<<INT1);
MCUCR=(1<<ISC00)|(ISC01)|(1<<ISC10)|(1<<ISC11);
sei();
	while(1)
	{
		PORTB ^=(1<<PB4);
  90:	88 b3       	in	r24, 0x18	; 24
  92:	85 27       	eor	r24, r21
  94:	88 bb       	out	0x18, r24	; 24
		PORTB ^=(1<<PB5);
  96:	88 b3       	in	r24, 0x18	; 24
  98:	84 27       	eor	r24, r20
  9a:	88 bb       	out	0x18, r24	; 24
  9c:	88 ee       	ldi	r24, 0xE8	; 232
  9e:	93 e0       	ldi	r25, 0x03	; 3
  a0:	f9 01       	movw	r30, r18
  a2:	31 97       	sbiw	r30, 0x01	; 1
  a4:	f1 f7       	brne	.-4      	; 0xa2 <main+0x36>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  a6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  a8:	d9 f7       	brne	.-10     	; 0xa0 <main+0x34>
  aa:	f2 cf       	rjmp	.-28     	; 0x90 <main+0x24>

000000ac <__vector_1>:

}


ISR(INT0_vect)
{
  ac:	1f 92       	push	r1
  ae:	0f 92       	push	r0
  b0:	0f b6       	in	r0, 0x3f	; 63
  b2:	0f 92       	push	r0
  b4:	11 24       	eor	r1, r1
  b6:	8f 93       	push	r24
MCUCR=(1<<ISC00)|(ISC01);
  b8:	81 e0       	ldi	r24, 0x01	; 1
  ba:	85 bf       	out	0x35, r24	; 53
	PORTB &=~(1<<PB4);
  bc:	c4 98       	cbi	0x18, 4	; 24
}
  be:	8f 91       	pop	r24
  c0:	0f 90       	pop	r0
  c2:	0f be       	out	0x3f, r0	; 63
  c4:	0f 90       	pop	r0
  c6:	1f 90       	pop	r1
  c8:	18 95       	reti

000000ca <__vector_2>:

ISR(INT1_vect)
{
  ca:	1f 92       	push	r1
  cc:	0f 92       	push	r0
  ce:	0f b6       	in	r0, 0x3f	; 63
  d0:	0f 92       	push	r0
  d2:	11 24       	eor	r1, r1
	PORTB &=~(1<<PB5);
  d4:	c5 98       	cbi	0x18, 5	; 24
}
  d6:	0f 90       	pop	r0
  d8:	0f be       	out	0x3f, r0	; 63
  da:	0f 90       	pop	r0
  dc:	1f 90       	pop	r1
  de:	18 95       	reti

000000e0 <_exit>:
  e0:	f8 94       	cli

000000e2 <__stop_program>:
  e2:	ff cf       	rjmp	.-2      	; 0xe2 <__stop_program>
