
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000013e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  000001b2  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  000001b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000040  00000000  00000000  000001d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000252  00000000  00000000  00000212  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000011d  00000000  00000000  00000464  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000255  00000000  00000000  00000581  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000050  00000000  00000000  000007d8  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000aa  00000000  00000000  00000828  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000060  00000000  00000000  000008d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00000932  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 6c 00 	call	0xd8	; 0xd8 <main>
  74:	0c 94 9d 00 	jmp	0x13a	; 0x13a <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <front>:
	
	}
}
void front(void)
	{
	PORTB |=(1<<PB3);
  7c:	c3 9a       	sbi	0x18, 3	; 24
	PORTD &=~(1<<PD4);
  7e:	94 98       	cbi	0x12, 4	; 18
	PORTD|=(1<<PD5);
  80:	95 9a       	sbi	0x12, 5	; 18
	PORTD &=~(1<<PD7);
  82:	97 98       	cbi	0x12, 7	; 18
  84:	88 ee       	ldi	r24, 0xE8	; 232
  86:	93 e0       	ldi	r25, 0x03	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  88:	20 e9       	ldi	r18, 0x90	; 144
  8a:	31 e0       	ldi	r19, 0x01	; 1
  8c:	f9 01       	movw	r30, r18
  8e:	31 97       	sbiw	r30, 0x01	; 1
  90:	f1 f7       	brne	.-4      	; 0x8e <front+0x12>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  92:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  94:	d9 f7       	brne	.-10     	; 0x8c <front+0x10>
	_delay_ms(100);
	}
  96:	08 95       	ret

00000098 <back>:
void back(void)
		{ 	
		PORTB &=~(1<<PB3);
  98:	c3 98       	cbi	0x18, 3	; 24
		PORTD |=(1<<PD4);
  9a:	94 9a       	sbi	0x12, 4	; 18
		PORTD&=~(1<<PD5);
  9c:	95 98       	cbi	0x12, 5	; 18
		PORTD |=(1<<PD7);
  9e:	97 9a       	sbi	0x12, 7	; 18
  a0:	88 ee       	ldi	r24, 0xE8	; 232
  a2:	93 e0       	ldi	r25, 0x03	; 3
  a4:	20 e9       	ldi	r18, 0x90	; 144
  a6:	31 e0       	ldi	r19, 0x01	; 1
  a8:	f9 01       	movw	r30, r18
  aa:	31 97       	sbiw	r30, 0x01	; 1
  ac:	f1 f7       	brne	.-4      	; 0xaa <back+0x12>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  ae:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  b0:	d9 f7       	brne	.-10     	; 0xa8 <back+0x10>
		_delay_ms(100);
		}
  b2:	08 95       	ret

000000b4 <off>:
void off(void)
	{
		count=0	;
  b4:	10 92 61 00 	sts	0x0061, r1
  b8:	10 92 60 00 	sts	0x0060, r1
		PORTB &=~(1<<PB3);
  bc:	c3 98       	cbi	0x18, 3	; 24
		PORTD &=~((1<<PD4)|(1<<PD5)|(1<<PD7));	
  be:	82 b3       	in	r24, 0x12	; 18
  c0:	8f 74       	andi	r24, 0x4F	; 79
  c2:	82 bb       	out	0x12, r24	; 18
  c4:	88 ee       	ldi	r24, 0xE8	; 232
  c6:	93 e0       	ldi	r25, 0x03	; 3
  c8:	20 e9       	ldi	r18, 0x90	; 144
  ca:	31 e0       	ldi	r19, 0x01	; 1
  cc:	f9 01       	movw	r30, r18
  ce:	31 97       	sbiw	r30, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <off+0x1a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  d2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  d4:	d9 f7       	brne	.-10     	; 0xcc <off+0x18>
		_delay_ms(100);
  d6:	08 95       	ret

000000d8 <main>:
#include<util/delay.h>
#include<avr/interrupt.h>

unsigned int count=0;
 int main(void)
 {
  d8:	cf 93       	push	r28
  da:	df 93       	push	r29
	DDRB |=(1<<PB3);
  dc:	bb 9a       	sbi	0x17, 3	; 23
	DDRD |=(1<<PD4)|(1<<PD5)|(1<<PD7);
  de:	81 b3       	in	r24, 0x11	; 17
  e0:	80 6b       	ori	r24, 0xB0	; 176
  e2:	81 bb       	out	0x11, r24	; 17
	DDRB &=~(1<<PB6); //PB6 declared as input
  e4:	be 98       	cbi	0x17, 6	; 23
	PORTB |=(1<<PB6); //PB6 pulled high initially
  e6:	c6 9a       	sbi	0x18, 6	; 24
  e8:	c0 e9       	ldi	r28, 0x90	; 144
  ea:	d1 e0       	ldi	r29, 0x01	; 1
	
	void off(void);
	
	while(1)
	{
	if(PINB &(1<<PB6))
  ec:	b6 9b       	sbis	0x16, 6	; 22
  ee:	12 c0       	rjmp	.+36     	; 0x114 <main+0x3c>
  f0:	84 ef       	ldi	r24, 0xF4	; 244
  f2:	91 e0       	ldi	r25, 0x01	; 1
  f4:	fe 01       	movw	r30, r28
  f6:	31 97       	sbiw	r30, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <main+0x1e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  fa:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  fc:	d9 f7       	brne	.-10     	; 0xf4 <main+0x1c>
	 {_delay_ms(50);
		if(bit_is_clear(PINB,6))
  fe:	b6 99       	sbic	0x16, 6	; 22
 100:	09 c0       	rjmp	.+18     	; 0x114 <main+0x3c>
	 		{count++;}
 102:	80 91 60 00 	lds	r24, 0x0060
 106:	90 91 61 00 	lds	r25, 0x0061
 10a:	01 96       	adiw	r24, 0x01	; 1
 10c:	90 93 61 00 	sts	0x0061, r25
 110:	80 93 60 00 	sts	0x0060, r24
	 }
	switch(count)
 114:	80 91 60 00 	lds	r24, 0x0060
 118:	90 91 61 00 	lds	r25, 0x0061
 11c:	81 30       	cpi	r24, 0x01	; 1
 11e:	91 05       	cpc	r25, r1
 120:	19 f0       	breq	.+6      	; 0x128 <main+0x50>
 122:	02 97       	sbiw	r24, 0x02	; 2
 124:	39 f4       	brne	.+14     	; 0x134 <main+0x5c>
 126:	03 c0       	rjmp	.+6      	; 0x12e <main+0x56>
		{
			case 1: front();
 128:	0e 94 3e 00 	call	0x7c	; 0x7c <front>
 12c:	df cf       	rjmp	.-66     	; 0xec <main+0x14>
					break;
			case 2:back();
 12e:	0e 94 4c 00 	call	0x98	; 0x98 <back>
 132:	dc cf       	rjmp	.-72     	; 0xec <main+0x14>
					break;
			default:off();
 134:	0e 94 5a 00 	call	0xb4	; 0xb4 <off>
 138:	d9 cf       	rjmp	.-78     	; 0xec <main+0x14>

0000013a <_exit>:
 13a:	f8 94       	cli

0000013c <__stop_program>:
 13c:	ff cf       	rjmp	.-2      	; 0x13c <__stop_program>
