
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000ae  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000102  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000037  00000000  00000000  00000122  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000000b8  00000000  00000000  00000159  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000085  00000000  00000000  00000211  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000ba  00000000  00000000  00000296  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000040  00000000  00000000  00000350  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000080  00000000  00000000  00000390  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 45 00 	jmp	0x8a	; 0x8a <__vector_19>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
{
// WGM0[1:0]= 10, for CTC mode
// COM0[1:0]= 01, to toggle OC0 on compare match
// CS0[2:0] =010. for prescaler 8
 
TCCR0=(1<<WGM01)|(1<<COM00)|(1<<CS01);
  6c:	8a e1       	ldi	r24, 0x1A	; 26
  6e:	83 bf       	out	0x33, r24	; 51
DDRB|=(1<<PB3); // select as output pin 
  70:	bb 9a       	sbi	0x17, 3	; 23
TIMSK|=(1<<OCIE0); //enable output compare interrupt 
  72:	89 b7       	in	r24, 0x39	; 57
  74:	82 60       	ori	r24, 0x02	; 2
  76:	89 bf       	out	0x39, r24	; 57
#define F_OUT 10000 // output frequency
#define OCR0_VALUE ((FREQ/(2*PRESCALER*F_OUT))-1)  
int main(void)
{ 
t0_init(); // timer initialize
sei(); // enable global interrupts
  78:	78 94       	sei
  7a:	ff cf       	rjmp	.-2      	; 0x7a <main+0xe>

0000007c <t0_init>:
{
// WGM0[1:0]= 10, for CTC mode
// COM0[1:0]= 01, to toggle OC0 on compare match
// CS0[2:0] =010. for prescaler 8
 
TCCR0=(1<<WGM01)|(1<<COM00)|(1<<CS01);
  7c:	8a e1       	ldi	r24, 0x1A	; 26
  7e:	83 bf       	out	0x33, r24	; 51
DDRB|=(1<<PB3); // select as output pin 
  80:	bb 9a       	sbi	0x17, 3	; 23
TIMSK|=(1<<OCIE0); //enable output compare interrupt 
  82:	89 b7       	in	r24, 0x39	; 57
  84:	82 60       	ori	r24, 0x02	; 2
  86:	89 bf       	out	0x39, r24	; 57
}
  88:	08 95       	ret

0000008a <__vector_19>:
 
ISR(TIMER0_COMP_vect) // interrupt subroutine
{
  8a:	1f 92       	push	r1
  8c:	0f 92       	push	r0
  8e:	0f b6       	in	r0, 0x3f	; 63
  90:	0f 92       	push	r0
  92:	11 24       	eor	r1, r1
  94:	8f 93       	push	r24
OCR0=OCR0_VALUE; //put OCR value
  96:	88 e2       	ldi	r24, 0x28	; 40
  98:	8c bf       	out	0x3c, r24	; 60
OCR0=49;
  9a:	81 e3       	ldi	r24, 0x31	; 49
  9c:	8c bf       	out	0x3c, r24	; 60

  9e:	8f 91       	pop	r24
  a0:	0f 90       	pop	r0
  a2:	0f be       	out	0x3f, r0	; 63
  a4:	0f 90       	pop	r0
  a6:	1f 90       	pop	r1
  a8:	18 95       	reti

000000aa <_exit>:
  aa:	f8 94       	cli

000000ac <__stop_program>:
  ac:	ff cf       	rjmp	.-2      	; 0xac <__stop_program>
