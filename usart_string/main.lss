
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000010a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  0000010a  0000019e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  0080006c  0080006c  000001aa  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000001aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000072  00000000  00000000  000001ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000001fd  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000186  00000000  00000000  00000439  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001fd  00000000  00000000  000005bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000060  00000000  00000000  000007bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000f5  00000000  00000000  0000081c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000058  00000000  00000000  00000911  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00000969  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e0       	ldi	r30, 0x0A	; 10
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ad 36       	cpi	r26, 0x6D	; 109
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 5d 00 	call	0xba	; 0xba <main>
  8a:	0c 94 83 00 	jmp	0x106	; 0x106 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <USART_putstring>:
			//USART_Receive();
			
		}

}
void USART_putstring(char* dataPtr){
  92:	fc 01       	movw	r30, r24
  94:	04 c0       	rjmp	.+8      	; 0x9e <USART_putstring+0xc>


void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSRA & (1<<UDRE)) );
  96:	5d 9b       	sbis	0x0b, 5	; 11
  98:	fe cf       	rjmp	.-4      	; 0x96 <USART_putstring+0x4>
	/* Put data into buffer, sends the data */
		UDR = data;
  9a:	8c b9       	out	0x0c, r24	; 12

}
void USART_putstring(char* dataPtr){
  while(*dataPtr != 0x00){
    USART_Transmit(*dataPtr);
  dataPtr++;}
  9c:	31 96       	adiw	r30, 0x01	; 1
			
		}

}
void USART_putstring(char* dataPtr){
  while(*dataPtr != 0x00){
  9e:	80 81       	ld	r24, Z
  a0:	88 23       	and	r24, r24
  a2:	c9 f7       	brne	.-14     	; 0x96 <USART_putstring+0x4>
    USART_Transmit(*dataPtr);
  dataPtr++;}
  
}
  a4:	08 95       	ret

000000a6 <USART_Init>:
void USART_Init(void)
{
	/* Set baud rate */
	UBRRH = 0x00; //load 0 in ubrrh
  a6:	10 bc       	out	0x20, r1	; 32
	UBRRL = 0x67; //load 67 in ubrrl this is equivalent to 103 which is for 9600 baud rate 
  a8:	87 e6       	ldi	r24, 0x67	; 103
  aa:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	UCSRB |= (1<<RXEN)|(1<<TXEN); // tx rx enbale
  ac:	8a b1       	in	r24, 0x0a	; 10
  ae:	88 61       	ori	r24, 0x18	; 24
  b0:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 2stop bit */
	UCSRC |= (1<<URSEL)|(1<<USBS)|(3<<UCSZ0); /* ursel =1 to access ucsrc, usbs=1 for 2 stob bits,
  b2:	80 b5       	in	r24, 0x20	; 32
  b4:	8e 68       	ori	r24, 0x8E	; 142
  b6:	80 bd       	out	0x20, r24	; 32
 ucsz0 =3 means ucsz0=1,ucsz1=1 for 8 bit data*/
}
  b8:	08 95       	ret

000000ba <main>:
void USART_putstring(char* dataPtr);
uint8_t i=0;

 char data[]="PRESSED \n\r\n";
int main( void )
{
  ba:	1f 93       	push	r17
  bc:	cf 93       	push	r28
  be:	df 93       	push	r29
	 DDRB |=(1<<PB1);
  c0:	b9 9a       	sbi	0x17, 1	; 23
	 DDRB &=~(1<<PB6);
  c2:	be 98       	cbi	0x17, 6	; 23
	 PORTB &=~(1<<PB6);
  c4:	c6 98       	cbi	0x18, 6	; 24
		USART_Init();
  c6:	0e 94 53 00 	call	0xa6	; 0xa6 <USART_Init>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  ca:	c0 e9       	ldi	r28, 0x90	; 144
  cc:	d1 e0       	ldi	r29, 0x01	; 1
		{
			if(PINB &(1<<PB6)) //when we press the button PB6 will get 5v input
				{ _delay_ms(50); //small delay to ignore the bouncing time
					if(bit_is_clear(PINB,6)) // then on releasing the button task will be done
						{
							PORTB^=(1<<PB1);
  ce:	12 e0       	ldi	r17, 0x02	; 2
	 DDRB &=~(1<<PB6);
	 PORTB &=~(1<<PB6);
		USART_Init();
		while(1)
		{
			if(PINB &(1<<PB6)) //when we press the button PB6 will get 5v input
  d0:	b6 9b       	sbis	0x16, 6	; 22
  d2:	fe cf       	rjmp	.-4      	; 0xd0 <main+0x16>
  d4:	84 ef       	ldi	r24, 0xF4	; 244
  d6:	91 e0       	ldi	r25, 0x01	; 1
  d8:	fe 01       	movw	r30, r28
  da:	31 97       	sbiw	r30, 0x01	; 1
  dc:	f1 f7       	brne	.-4      	; 0xda <main+0x20>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  de:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  e0:	d9 f7       	brne	.-10     	; 0xd8 <main+0x1e>
				{ _delay_ms(50); //small delay to ignore the bouncing time
					if(bit_is_clear(PINB,6)) // then on releasing the button task will be done
  e2:	b6 99       	sbic	0x16, 6	; 22
  e4:	f5 cf       	rjmp	.-22     	; 0xd0 <main+0x16>
						{
							PORTB^=(1<<PB1);
  e6:	88 b3       	in	r24, 0x18	; 24
  e8:	81 27       	eor	r24, r17
  ea:	88 bb       	out	0x18, r24	; 24
							USART_putstring(data); 
  ec:	80 e6       	ldi	r24, 0x60	; 96
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	0e 94 49 00 	call	0x92	; 0x92 <USART_putstring>
  f4:	ed cf       	rjmp	.-38     	; 0xd0 <main+0x16>

000000f6 <USART_Transmit>:


void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSRA & (1<<UDRE)) );
  f6:	5d 9b       	sbis	0x0b, 5	; 11
  f8:	fe cf       	rjmp	.-4      	; 0xf6 <USART_Transmit>
	/* Put data into buffer, sends the data */
		UDR = data;
  fa:	8c b9       	out	0x0c, r24	; 12
}
  fc:	08 95       	ret

000000fe <USART_Receive>:


unsigned char USART_Receive(void)
{
	/* Wait for data to be received */
	while ( !(UCSRA & (1<<RXC)) );
  fe:	5f 9b       	sbis	0x0b, 7	; 11
 100:	fe cf       	rjmp	.-4      	; 0xfe <USART_Receive>
	/* Get and return received data from buffer */
	return UDR;
 102:	8c b1       	in	r24, 0x0c	; 12
}
 104:	08 95       	ret

00000106 <_exit>:
 106:	f8 94       	cli

00000108 <__stop_program>:
 108:	ff cf       	rjmp	.-2      	; 0x108 <__stop_program>
