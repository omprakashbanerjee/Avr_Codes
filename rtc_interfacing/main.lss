
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000010de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000056  00800060  000010de  00001172  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  008000b6  008000b6  000011c8  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000011c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000261  00000000  00000000  000011e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000aec  00000000  00000000  00001449  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002aa  00000000  00000000  00001f35  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000ec5  00000000  00000000  000021df  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000200  00000000  00000000  000030a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002ce  00000000  00000000  000032a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000434  00000000  00000000  00003572  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000039a6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ed       	ldi	r30, 0xDE	; 222
      68:	f0 e1       	ldi	r31, 0x10	; 16
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 3b       	cpi	r26, 0xB6	; 182
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a6 eb       	ldi	r26, 0xB6	; 182
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 3c       	cpi	r26, 0xC4	; 196
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 93 04 	call	0x926	; 0x926 <main>
      8a:	0c 94 6d 08 	jmp	0x10da	; 0x10da <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <I2C_Init>:
int I2C_Read_Ack(void);							/* I2C read ack function */
int I2C_Read_Nack(void);							/* I2C read nack function */

void I2C_Init()												/* I2C initialize function */
{
	TWBR = BITRATE(TWSR = 0x00);							/* Get bit rate register value by formula */
      92:	11 b8       	out	0x01, r1	; 1
      94:	88 e4       	ldi	r24, 0x48	; 72
      96:	80 b9       	out	0x00, r24	; 0
}	
      98:	08 95       	ret

0000009a <I2C_Start>:


uint8_t I2C_Start(char write_address)						/* I2C start function */
{
      9a:	98 2f       	mov	r25, r24
	uint8_t status;											/* Declare variable */
	TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);					/* Enable TWI, generate start condition and clear interrupt flag */
      9c:	84 ea       	ldi	r24, 0xA4	; 164
      9e:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (start condition) */
      a0:	06 b6       	in	r0, 0x36	; 54
      a2:	07 fe       	sbrs	r0, 7
      a4:	fd cf       	rjmp	.-6      	; 0xa0 <I2C_Start+0x6>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
      a6:	81 b1       	in	r24, 0x01	; 1
	if (status != 0x08)										/* Check weather start condition transmitted successfully or not? */
      a8:	88 7f       	andi	r24, 0xF8	; 248
      aa:	88 30       	cpi	r24, 0x08	; 8
      ac:	11 f0       	breq	.+4      	; 0xb2 <I2C_Start+0x18>
      ae:	80 e0       	ldi	r24, 0x00	; 0
      b0:	08 95       	ret
	return 0;												/* If not then return 0 to indicate start condition fail */
	TWDR = write_address;									/* If yes then write SLA+W in TWI data register */
      b2:	93 b9       	out	0x03, r25	; 3
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
      b4:	84 e8       	ldi	r24, 0x84	; 132
      b6:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
      b8:	06 b6       	in	r0, 0x36	; 54
      ba:	07 fe       	sbrs	r0, 7
      bc:	fd cf       	rjmp	.-6      	; 0xb8 <I2C_Start+0x1e>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */	
      be:	81 b1       	in	r24, 0x01	; 1
      c0:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0x18)										/* Check weather SLA+W transmitted & ack received or not? */
      c2:	88 31       	cpi	r24, 0x18	; 24
      c4:	11 f4       	brne	.+4      	; 0xca <I2C_Start+0x30>
      c6:	81 e0       	ldi	r24, 0x01	; 1
      c8:	08 95       	ret
	return 1;												/* If yes then return 1 to indicate ack received i.e. ready to accept data byte */
	if (status == 0x20)										/* Check weather SLA+W transmitted & nack received or not? */
      ca:	80 32       	cpi	r24, 0x20	; 32
      cc:	11 f0       	breq	.+4      	; 0xd2 <I2C_Start+0x38>
      ce:	83 e0       	ldi	r24, 0x03	; 3
      d0:	08 95       	ret
      d2:	82 e0       	ldi	r24, 0x02	; 2
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
	else
	return 3;												/* Else return 3 to indicate SLA+W failed */
}
      d4:	08 95       	ret

000000d6 <I2C_Repeated_Start>:

uint8_t I2C_Repeated_Start(char read_address)				/* I2C repeated start function */
{
      d6:	98 2f       	mov	r25, r24
	uint8_t status;											/* Declare variable */
	TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);					/* Enable TWI, generate start condition and clear interrupt flag */
      d8:	84 ea       	ldi	r24, 0xA4	; 164
      da:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (start condition) */
      dc:	06 b6       	in	r0, 0x36	; 54
      de:	07 fe       	sbrs	r0, 7
      e0:	fd cf       	rjmp	.-6      	; 0xdc <I2C_Repeated_Start+0x6>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
      e2:	81 b1       	in	r24, 0x01	; 1
	if (status != 0x10)										/* Check weather repeated start condition transmitted successfully or not? */
      e4:	88 7f       	andi	r24, 0xF8	; 248
      e6:	80 31       	cpi	r24, 0x10	; 16
      e8:	11 f0       	breq	.+4      	; 0xee <I2C_Repeated_Start+0x18>
      ea:	80 e0       	ldi	r24, 0x00	; 0
      ec:	08 95       	ret
	return 0;												/* If no then return 0 to indicate repeated start condition fail */
	TWDR = read_address;									/* If yes then write SLA+R in TWI data register */
      ee:	93 b9       	out	0x03, r25	; 3
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
      f0:	84 e8       	ldi	r24, 0x84	; 132
      f2:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
      f4:	06 b6       	in	r0, 0x36	; 54
      f6:	07 fe       	sbrs	r0, 7
      f8:	fd cf       	rjmp	.-6      	; 0xf4 <I2C_Repeated_Start+0x1e>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
      fa:	81 b1       	in	r24, 0x01	; 1
      fc:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0x40)										/* Check weather SLA+R transmitted & ack received or not? */
      fe:	80 34       	cpi	r24, 0x40	; 64
     100:	11 f4       	brne	.+4      	; 0x106 <I2C_Repeated_Start+0x30>
     102:	81 e0       	ldi	r24, 0x01	; 1
     104:	08 95       	ret
	return 1;												/* If yes then return 1 to indicate ack received */ 
	if (status == 0x20)										/* Check weather SLA+R transmitted & nack received or not? */
     106:	80 32       	cpi	r24, 0x20	; 32
     108:	11 f0       	breq	.+4      	; 0x10e <I2C_Repeated_Start+0x38>
     10a:	83 e0       	ldi	r24, 0x03	; 3
     10c:	08 95       	ret
     10e:	82 e0       	ldi	r24, 0x02	; 2
	return 2;												/* If yes then return 2 to indicate nack received i.e. device is busy */
	else
	return 3;												/* Else return 3 to indicate SLA+W failed */
}
     110:	08 95       	ret

00000112 <I2C_Stop>:

void I2C_Stop()												/* I2C stop function */
{
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);					/* Enable TWI, generate stop condition and clear interrupt flag */
     112:	84 e9       	ldi	r24, 0x94	; 148
     114:	86 bf       	out	0x36, r24	; 54
	while(TWCR & (1<<TWSTO));								/* Wait until stop condition execution */ 
     116:	06 b6       	in	r0, 0x36	; 54
     118:	04 fc       	sbrc	r0, 4
     11a:	fd cf       	rjmp	.-6      	; 0x116 <I2C_Stop+0x4>
}
     11c:	08 95       	ret

0000011e <I2C_Start_Wait>:

void I2C_Start_Wait(char write_address)						/* I2C start wait function */
{
     11e:	98 2f       	mov	r25, r24
	uint8_t status;											/* Declare variable */
	while (1)
	{
		TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);				/* Enable TWI, generate start condition and clear interrupt flag */
     120:	44 ea       	ldi	r20, 0xA4	; 164
		while (!(TWCR & (1<<TWINT)));						/* Wait until TWI finish its current job (start condition) */
		status = TWSR & 0xF8;								/* Read TWI status register with masking lower three bits */
		if (status != 0x08)									/* Check weather start condition transmitted successfully or not? */
		continue;											/* If no then continue with start loop again */
		TWDR = write_address;								/* If yes then write SLA+W in TWI data register */
		TWCR = (1<<TWEN)|(1<<TWINT);						/* Enable TWI and clear interrupt flag */
     122:	34 e8       	ldi	r19, 0x84	; 132
	return 3;												/* Else return 3 to indicate SLA+W failed */
}

void I2C_Stop()												/* I2C stop function */
{
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);					/* Enable TWI, generate stop condition and clear interrupt flag */
     124:	24 e9       	ldi	r18, 0x94	; 148
void I2C_Start_Wait(char write_address)						/* I2C start wait function */
{
	uint8_t status;											/* Declare variable */
	while (1)
	{
		TWCR = (1<<TWSTA)|(1<<TWEN)|(1<<TWINT);				/* Enable TWI, generate start condition and clear interrupt flag */
     126:	46 bf       	out	0x36, r20	; 54
		while (!(TWCR & (1<<TWINT)));						/* Wait until TWI finish its current job (start condition) */
     128:	06 b6       	in	r0, 0x36	; 54
     12a:	07 fe       	sbrs	r0, 7
     12c:	fd cf       	rjmp	.-6      	; 0x128 <I2C_Start_Wait+0xa>
		status = TWSR & 0xF8;								/* Read TWI status register with masking lower three bits */
     12e:	81 b1       	in	r24, 0x01	; 1
		if (status != 0x08)									/* Check weather start condition transmitted successfully or not? */
     130:	88 7f       	andi	r24, 0xF8	; 248
     132:	88 30       	cpi	r24, 0x08	; 8
     134:	c1 f7       	brne	.-16     	; 0x126 <I2C_Start_Wait+0x8>
		continue;											/* If no then continue with start loop again */
		TWDR = write_address;								/* If yes then write SLA+W in TWI data register */
     136:	93 b9       	out	0x03, r25	; 3
		TWCR = (1<<TWEN)|(1<<TWINT);						/* Enable TWI and clear interrupt flag */
     138:	36 bf       	out	0x36, r19	; 54
		while (!(TWCR & (1<<TWINT)));						/* Wait until TWI finish its current job (Write operation) */
     13a:	06 b6       	in	r0, 0x36	; 54
     13c:	07 fe       	sbrs	r0, 7
     13e:	fd cf       	rjmp	.-6      	; 0x13a <I2C_Start_Wait+0x1c>
		status = TWSR & 0xF8;								/* Read TWI status register with masking lower three bits */
     140:	81 b1       	in	r24, 0x01	; 1
		if (status != 0x18 )								/* Check weather SLA+W transmitted & ack received or not? */
     142:	88 7f       	andi	r24, 0xF8	; 248
     144:	88 31       	cpi	r24, 0x18	; 24
     146:	29 f0       	breq	.+10     	; 0x152 <I2C_Start_Wait+0x34>
	return 3;												/* Else return 3 to indicate SLA+W failed */
}

void I2C_Stop()												/* I2C stop function */
{
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);					/* Enable TWI, generate stop condition and clear interrupt flag */
     148:	26 bf       	out	0x36, r18	; 54
	while(TWCR & (1<<TWSTO));								/* Wait until stop condition execution */ 
     14a:	06 b6       	in	r0, 0x36	; 54
     14c:	04 fc       	sbrc	r0, 4
     14e:	fd cf       	rjmp	.-6      	; 0x14a <I2C_Start_Wait+0x2c>
     150:	ea cf       	rjmp	.-44     	; 0x126 <I2C_Start_Wait+0x8>
     152:	08 95       	ret

00000154 <I2C_Write>:
}

uint8_t I2C_Write(char data)								/* I2C write function */
{
	uint8_t status;											/* Declare variable */
	TWDR = data;											/* Copy data in TWI data register */
     154:	83 b9       	out	0x03, r24	; 3
	TWCR = (1<<TWEN)|(1<<TWINT);							/* Enable TWI and clear interrupt flag */
     156:	84 e8       	ldi	r24, 0x84	; 132
     158:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (Write operation) */
     15a:	06 b6       	in	r0, 0x36	; 54
     15c:	07 fe       	sbrs	r0, 7
     15e:	fd cf       	rjmp	.-6      	; 0x15a <I2C_Write+0x6>
	status = TWSR & 0xF8;									/* Read TWI status register with masking lower three bits */
     160:	81 b1       	in	r24, 0x01	; 1
     162:	88 7f       	andi	r24, 0xF8	; 248
	if (status == 0x28)										/* Check weather data transmitted & ack received or not? */
     164:	88 32       	cpi	r24, 0x28	; 40
     166:	11 f4       	brne	.+4      	; 0x16c <I2C_Write+0x18>
     168:	80 e0       	ldi	r24, 0x00	; 0
     16a:	08 95       	ret
	return 0;												/* If yes then return 0 to indicate ack received */
	if (status == 0x30)										/* Check weather data transmitted & nack received or not? */
     16c:	80 33       	cpi	r24, 0x30	; 48
     16e:	11 f0       	breq	.+4      	; 0x174 <I2C_Write+0x20>
     170:	82 e0       	ldi	r24, 0x02	; 2
     172:	08 95       	ret
     174:	81 e0       	ldi	r24, 0x01	; 1
	return 1;												/* If yes then return 1 to indicate nack received */
	else
	return 2;												/* Else return 2 to indicate data transmission failed */
}
     176:	08 95       	ret

00000178 <I2C_Read_Ack>:

int I2C_Read_Ack()											/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
     178:	84 ec       	ldi	r24, 0xC4	; 196
     17a:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     17c:	06 b6       	in	r0, 0x36	; 54
     17e:	07 fe       	sbrs	r0, 7
     180:	fd cf       	rjmp	.-6      	; 0x17c <I2C_Read_Ack+0x4>
	return TWDR;											/* Return received data */
     182:	83 b1       	in	r24, 0x03	; 3
}	
     184:	90 e0       	ldi	r25, 0x00	; 0
     186:	08 95       	ret

00000188 <I2C_Read_Nack>:

int I2C_Read_Nack()										/* I2C read nack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT);								/* Enable TWI and clear interrupt flag */
     188:	84 e8       	ldi	r24, 0x84	; 132
     18a:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     18c:	06 b6       	in	r0, 0x36	; 54
     18e:	07 fe       	sbrs	r0, 7
     190:	fd cf       	rjmp	.-6      	; 0x18c <I2C_Read_Nack+0x4>
	return TWDR;											/* Return received data */
     192:	83 b1       	in	r24, 0x03	; 3
}	
     194:	90 e0       	ldi	r25, 0x00	; 0
     196:	08 95       	ret

00000198 <pinChange>:

#include<util/delay.h>

void pinChange(int a, int b)
{
	if(b == 0)
     198:	67 2b       	or	r22, r23
     19a:	09 f0       	breq	.+2      	; 0x19e <pinChange+0x6>
     19c:	9f c0       	rjmp	.+318    	; 0x2dc <pinChange+0x144>
	{
		if(a == PSen_PORTA0)
     19e:	00 97       	sbiw	r24, 0x00	; 0
     1a0:	11 f4       	brne	.+4      	; 0x1a6 <pinChange+0xe>
		  PORTA &= ~(1<<PA0);
     1a2:	d8 98       	cbi	0x1b, 0	; 27
     1a4:	08 95       	ret
		else if(a == PSen_PORTA1)
     1a6:	81 30       	cpi	r24, 0x01	; 1
     1a8:	91 05       	cpc	r25, r1
     1aa:	11 f4       	brne	.+4      	; 0x1b0 <pinChange+0x18>
		  PORTA &= ~(1<<PA1); 
     1ac:	d9 98       	cbi	0x1b, 1	; 27
     1ae:	08 95       	ret
		else if(a == PSen_PORTA2)
     1b0:	82 30       	cpi	r24, 0x02	; 2
     1b2:	91 05       	cpc	r25, r1
     1b4:	11 f4       	brne	.+4      	; 0x1ba <pinChange+0x22>
		  PORTA &= ~(1<<PA2);
     1b6:	da 98       	cbi	0x1b, 2	; 27
     1b8:	08 95       	ret
		else if(a == PSen_PORTA3)
     1ba:	83 30       	cpi	r24, 0x03	; 3
     1bc:	91 05       	cpc	r25, r1
     1be:	11 f4       	brne	.+4      	; 0x1c4 <pinChange+0x2c>
		  PORTA &= ~(1<<PA3); 
     1c0:	db 98       	cbi	0x1b, 3	; 27
     1c2:	08 95       	ret
		else if(a == PSen_PORTA4)
     1c4:	84 30       	cpi	r24, 0x04	; 4
     1c6:	91 05       	cpc	r25, r1
     1c8:	11 f4       	brne	.+4      	; 0x1ce <pinChange+0x36>
		  PORTA &= ~(1<<PA4); 
     1ca:	dc 98       	cbi	0x1b, 4	; 27
     1cc:	08 95       	ret
		else if(a == PSen_PORTA5)
     1ce:	85 30       	cpi	r24, 0x05	; 5
     1d0:	91 05       	cpc	r25, r1
     1d2:	11 f4       	brne	.+4      	; 0x1d8 <pinChange+0x40>
		  PORTA &= ~(1<<PA5); 
     1d4:	dd 98       	cbi	0x1b, 5	; 27
     1d6:	08 95       	ret
		else if(a == PSen_PORTA6)
     1d8:	86 30       	cpi	r24, 0x06	; 6
     1da:	91 05       	cpc	r25, r1
     1dc:	11 f4       	brne	.+4      	; 0x1e2 <pinChange+0x4a>
		  PORTA &= ~(1<<PA6);  
     1de:	de 98       	cbi	0x1b, 6	; 27
     1e0:	08 95       	ret
		else if(a == PSen_PORTA7)
     1e2:	87 30       	cpi	r24, 0x07	; 7
     1e4:	91 05       	cpc	r25, r1
     1e6:	11 f4       	brne	.+4      	; 0x1ec <pinChange+0x54>
		  PORTA &= ~(1<<PA7);
     1e8:	df 98       	cbi	0x1b, 7	; 27
     1ea:	08 95       	ret
		else if(a == PSen_PORTB0)
     1ec:	8a 30       	cpi	r24, 0x0A	; 10
     1ee:	91 05       	cpc	r25, r1
     1f0:	11 f4       	brne	.+4      	; 0x1f6 <pinChange+0x5e>
		  PORTB &= ~(1<<PB0);  
     1f2:	c0 98       	cbi	0x18, 0	; 24
     1f4:	08 95       	ret
		else if(a == PSen_PORTB1)
     1f6:	8b 30       	cpi	r24, 0x0B	; 11
     1f8:	91 05       	cpc	r25, r1
     1fa:	11 f4       	brne	.+4      	; 0x200 <pinChange+0x68>
		  PORTB &= ~(1<<PB1);
     1fc:	c1 98       	cbi	0x18, 1	; 24
     1fe:	08 95       	ret
		else if(a == PSen_PORTB2)
     200:	8c 30       	cpi	r24, 0x0C	; 12
     202:	91 05       	cpc	r25, r1
     204:	11 f4       	brne	.+4      	; 0x20a <pinChange+0x72>
		  PORTB &= ~(1<<PB2);  
     206:	c2 98       	cbi	0x18, 2	; 24
     208:	08 95       	ret
		else if(a == PSen_PORTB3)
     20a:	8d 30       	cpi	r24, 0x0D	; 13
     20c:	91 05       	cpc	r25, r1
     20e:	11 f4       	brne	.+4      	; 0x214 <pinChange+0x7c>
		  PORTB &= ~(1<<PB3);  
     210:	c3 98       	cbi	0x18, 3	; 24
     212:	08 95       	ret
		else if(a == PSen_PORTB4)
     214:	8e 30       	cpi	r24, 0x0E	; 14
     216:	91 05       	cpc	r25, r1
     218:	11 f4       	brne	.+4      	; 0x21e <pinChange+0x86>
		  PORTB &= ~(1<<PB4);  
     21a:	c4 98       	cbi	0x18, 4	; 24
     21c:	08 95       	ret
		else if(a == PSen_PORTB5)
     21e:	8f 30       	cpi	r24, 0x0F	; 15
     220:	91 05       	cpc	r25, r1
     222:	11 f4       	brne	.+4      	; 0x228 <pinChange+0x90>
		  PORTB &= ~(1<<PB5);  
     224:	c5 98       	cbi	0x18, 5	; 24
     226:	08 95       	ret
		else if(a == PSen_PORTB6)
     228:	80 31       	cpi	r24, 0x10	; 16
     22a:	91 05       	cpc	r25, r1
     22c:	11 f4       	brne	.+4      	; 0x232 <pinChange+0x9a>
		  PORTB &= ~(1<<PB6);  
     22e:	c6 98       	cbi	0x18, 6	; 24
     230:	08 95       	ret
		else if(a == PSen_PORTB7)
     232:	81 31       	cpi	r24, 0x11	; 17
     234:	91 05       	cpc	r25, r1
     236:	11 f4       	brne	.+4      	; 0x23c <pinChange+0xa4>
		  PORTB &= ~(1<<PB7);
     238:	c7 98       	cbi	0x18, 7	; 24
     23a:	08 95       	ret
		else if(a == PSen_PORTC0)
     23c:	84 31       	cpi	r24, 0x14	; 20
     23e:	91 05       	cpc	r25, r1
     240:	11 f4       	brne	.+4      	; 0x246 <pinChange+0xae>
		  PORTC &= ~(1<<PC0);   
     242:	a8 98       	cbi	0x15, 0	; 21
     244:	08 95       	ret
		else if(a == PSen_PORTC1)
     246:	85 31       	cpi	r24, 0x15	; 21
     248:	91 05       	cpc	r25, r1
     24a:	11 f4       	brne	.+4      	; 0x250 <pinChange+0xb8>
		  PORTC &= ~(1<<PC1); 
     24c:	a9 98       	cbi	0x15, 1	; 21
     24e:	08 95       	ret
		else if(a == PSen_PORTC2)
     250:	86 31       	cpi	r24, 0x16	; 22
     252:	91 05       	cpc	r25, r1
     254:	11 f4       	brne	.+4      	; 0x25a <pinChange+0xc2>
		  PORTC &= ~(1<<PC2);
     256:	aa 98       	cbi	0x15, 2	; 21
     258:	08 95       	ret
		else if(a == PSen_PORTC3)
     25a:	87 31       	cpi	r24, 0x17	; 23
     25c:	91 05       	cpc	r25, r1
     25e:	11 f4       	brne	.+4      	; 0x264 <pinChange+0xcc>
		  PORTC &= ~(1<<PC3);   
     260:	ab 98       	cbi	0x15, 3	; 21
     262:	08 95       	ret
		else if(a == PSen_PORTC4)
     264:	88 31       	cpi	r24, 0x18	; 24
     266:	91 05       	cpc	r25, r1
     268:	11 f4       	brne	.+4      	; 0x26e <pinChange+0xd6>
		  PORTC &= ~(1<<PC4);  
     26a:	ac 98       	cbi	0x15, 4	; 21
     26c:	08 95       	ret
		else if(a == PSen_PORTC5)
     26e:	89 31       	cpi	r24, 0x19	; 25
     270:	91 05       	cpc	r25, r1
     272:	11 f4       	brne	.+4      	; 0x278 <pinChange+0xe0>
		  PORTC &= ~(1<<PC5);  
     274:	ad 98       	cbi	0x15, 5	; 21
     276:	08 95       	ret
        else if(a == PSen_PORTC6)
     278:	8a 31       	cpi	r24, 0x1A	; 26
     27a:	91 05       	cpc	r25, r1
     27c:	11 f4       	brne	.+4      	; 0x282 <pinChange+0xea>
          PORTC &= ~(1<<PC6);		
     27e:	ae 98       	cbi	0x15, 6	; 21
     280:	08 95       	ret
		else if(a == PSen_PORTC7)
     282:	8b 31       	cpi	r24, 0x1B	; 27
     284:	91 05       	cpc	r25, r1
     286:	11 f4       	brne	.+4      	; 0x28c <pinChange+0xf4>
		  PORTC &= ~(1<<PC7);
     288:	af 98       	cbi	0x15, 7	; 21
     28a:	08 95       	ret
		else if(a == PSen_PORTD0)
     28c:	8e 31       	cpi	r24, 0x1E	; 30
     28e:	91 05       	cpc	r25, r1
     290:	11 f4       	brne	.+4      	; 0x296 <pinChange+0xfe>
		  PORTD &= ~(1<<PD0);
     292:	90 98       	cbi	0x12, 0	; 18
     294:	08 95       	ret
		else if(a == PSen_PORTD1)
     296:	8f 31       	cpi	r24, 0x1F	; 31
     298:	91 05       	cpc	r25, r1
     29a:	11 f4       	brne	.+4      	; 0x2a0 <pinChange+0x108>
		  PORTD &= ~(1<<PD1);  
     29c:	91 98       	cbi	0x12, 1	; 18
     29e:	08 95       	ret
		else if(a == PSen_PORTD2)
     2a0:	80 32       	cpi	r24, 0x20	; 32
     2a2:	91 05       	cpc	r25, r1
     2a4:	11 f4       	brne	.+4      	; 0x2aa <pinChange+0x112>
		  PORTD &= ~(1<<PD2);
     2a6:	92 98       	cbi	0x12, 2	; 18
     2a8:	08 95       	ret
		else if(a == PSen_PORTD3)
     2aa:	81 32       	cpi	r24, 0x21	; 33
     2ac:	91 05       	cpc	r25, r1
     2ae:	11 f4       	brne	.+4      	; 0x2b4 <pinChange+0x11c>
		  PORTD &= ~(1<<PD3);
     2b0:	93 98       	cbi	0x12, 3	; 18
     2b2:	08 95       	ret
		else if(a == PSen_PORTD4)
     2b4:	82 32       	cpi	r24, 0x22	; 34
     2b6:	91 05       	cpc	r25, r1
     2b8:	11 f4       	brne	.+4      	; 0x2be <pinChange+0x126>
		  PORTD &= ~(1<<PD4);
     2ba:	94 98       	cbi	0x12, 4	; 18
     2bc:	08 95       	ret
		else if(a == PSen_PORTD5)
     2be:	83 32       	cpi	r24, 0x23	; 35
     2c0:	91 05       	cpc	r25, r1
     2c2:	11 f4       	brne	.+4      	; 0x2c8 <pinChange+0x130>
		  PORTD &= ~(1<<PD5);
     2c4:	95 98       	cbi	0x12, 5	; 18
     2c6:	08 95       	ret
		else if(a == PSen_PORTD6)
     2c8:	84 32       	cpi	r24, 0x24	; 36
     2ca:	91 05       	cpc	r25, r1
     2cc:	11 f4       	brne	.+4      	; 0x2d2 <pinChange+0x13a>
		  PORTD &= ~(1<<PD6);   
     2ce:	96 98       	cbi	0x12, 6	; 18
     2d0:	08 95       	ret
		else if(a == PSen_PORTD7)
     2d2:	85 97       	sbiw	r24, 0x25	; 37
     2d4:	09 f0       	breq	.+2      	; 0x2d8 <pinChange+0x140>
     2d6:	9f c0       	rjmp	.+318    	; 0x416 <pinChange+0x27e>
		  PORTD &= ~(1<<PD7);           
     2d8:	97 98       	cbi	0x12, 7	; 18
     2da:	08 95       	ret
	}
	else
	{
		if(a == PSen_PORTA0)
     2dc:	00 97       	sbiw	r24, 0x00	; 0
     2de:	11 f4       	brne	.+4      	; 0x2e4 <pinChange+0x14c>
		  PORTA |= (1<<PA0);
     2e0:	d8 9a       	sbi	0x1b, 0	; 27
     2e2:	08 95       	ret
		else if(a == PSen_PORTA1)
     2e4:	81 30       	cpi	r24, 0x01	; 1
     2e6:	91 05       	cpc	r25, r1
     2e8:	11 f4       	brne	.+4      	; 0x2ee <pinChange+0x156>
		  PORTA |= (1<<PA1);
     2ea:	d9 9a       	sbi	0x1b, 1	; 27
     2ec:	08 95       	ret
		else if(a == PSen_PORTA2)
     2ee:	82 30       	cpi	r24, 0x02	; 2
     2f0:	91 05       	cpc	r25, r1
     2f2:	11 f4       	brne	.+4      	; 0x2f8 <pinChange+0x160>
		  PORTA |= (1<<PA2);
     2f4:	da 9a       	sbi	0x1b, 2	; 27
     2f6:	08 95       	ret
		else if(a == PSen_PORTA3)
     2f8:	83 30       	cpi	r24, 0x03	; 3
     2fa:	91 05       	cpc	r25, r1
     2fc:	11 f4       	brne	.+4      	; 0x302 <pinChange+0x16a>
		  PORTA |= (1<<PA3);
     2fe:	db 9a       	sbi	0x1b, 3	; 27
     300:	08 95       	ret
		else if(a == PSen_PORTA4)
     302:	84 30       	cpi	r24, 0x04	; 4
     304:	91 05       	cpc	r25, r1
     306:	11 f4       	brne	.+4      	; 0x30c <pinChange+0x174>
		  PORTA |= (1<<PA4);
     308:	dc 9a       	sbi	0x1b, 4	; 27
     30a:	08 95       	ret
		else if(a == PSen_PORTA5)
     30c:	85 30       	cpi	r24, 0x05	; 5
     30e:	91 05       	cpc	r25, r1
     310:	11 f4       	brne	.+4      	; 0x316 <pinChange+0x17e>
		  PORTA |= (1<<PA5);
     312:	dd 9a       	sbi	0x1b, 5	; 27
     314:	08 95       	ret
		else if(a == PSen_PORTA6)
     316:	86 30       	cpi	r24, 0x06	; 6
     318:	91 05       	cpc	r25, r1
     31a:	11 f4       	brne	.+4      	; 0x320 <pinChange+0x188>
		  PORTA |= (1<<PA6);
     31c:	de 9a       	sbi	0x1b, 6	; 27
     31e:	08 95       	ret
		else if(a == PSen_PORTA7)
     320:	87 30       	cpi	r24, 0x07	; 7
     322:	91 05       	cpc	r25, r1
     324:	11 f4       	brne	.+4      	; 0x32a <pinChange+0x192>
		  PORTA |= (1<<PA7);
     326:	df 9a       	sbi	0x1b, 7	; 27
     328:	08 95       	ret
		else if(a == PSen_PORTB0)
     32a:	8a 30       	cpi	r24, 0x0A	; 10
     32c:	91 05       	cpc	r25, r1
     32e:	11 f4       	brne	.+4      	; 0x334 <pinChange+0x19c>
	  	  PORTB |= (1<<PB0);
     330:	c0 9a       	sbi	0x18, 0	; 24
     332:	08 95       	ret
		else if(a == PSen_PORTB1)
     334:	8b 30       	cpi	r24, 0x0B	; 11
     336:	91 05       	cpc	r25, r1
     338:	11 f4       	brne	.+4      	; 0x33e <pinChange+0x1a6>
		  PORTB |= (1<<PB1);
     33a:	c1 9a       	sbi	0x18, 1	; 24
     33c:	08 95       	ret
		else if(a == PSen_PORTB2)
     33e:	8c 30       	cpi	r24, 0x0C	; 12
     340:	91 05       	cpc	r25, r1
     342:	11 f4       	brne	.+4      	; 0x348 <pinChange+0x1b0>
		  PORTB |= (1<<PB2);
     344:	c2 9a       	sbi	0x18, 2	; 24
     346:	08 95       	ret
		else if(a == PSen_PORTB3)
     348:	8d 30       	cpi	r24, 0x0D	; 13
     34a:	91 05       	cpc	r25, r1
     34c:	11 f4       	brne	.+4      	; 0x352 <pinChange+0x1ba>
		  PORTB |= (1<<PB3);
     34e:	c3 9a       	sbi	0x18, 3	; 24
     350:	08 95       	ret
		else if(a == PSen_PORTB4)
     352:	8e 30       	cpi	r24, 0x0E	; 14
     354:	91 05       	cpc	r25, r1
     356:	11 f4       	brne	.+4      	; 0x35c <pinChange+0x1c4>
		  PORTB |= (1<<PB4);
     358:	c4 9a       	sbi	0x18, 4	; 24
     35a:	08 95       	ret
		else if(a == PSen_PORTB5)
     35c:	8f 30       	cpi	r24, 0x0F	; 15
     35e:	91 05       	cpc	r25, r1
     360:	11 f4       	brne	.+4      	; 0x366 <pinChange+0x1ce>
		  PORTB |= (1<<PB5);
     362:	c5 9a       	sbi	0x18, 5	; 24
     364:	08 95       	ret
		else if(a == PSen_PORTB6)
     366:	80 31       	cpi	r24, 0x10	; 16
     368:	91 05       	cpc	r25, r1
     36a:	11 f4       	brne	.+4      	; 0x370 <pinChange+0x1d8>
		  PORTB |= (1<<PB6);
     36c:	c6 9a       	sbi	0x18, 6	; 24
     36e:	08 95       	ret
		else if(a == PSen_PORTB7)
     370:	81 31       	cpi	r24, 0x11	; 17
     372:	91 05       	cpc	r25, r1
     374:	11 f4       	brne	.+4      	; 0x37a <pinChange+0x1e2>
		  PORTB |= (1<<PB7);
     376:	c7 9a       	sbi	0x18, 7	; 24
     378:	08 95       	ret
		else if(a == PSen_PORTC0)
     37a:	84 31       	cpi	r24, 0x14	; 20
     37c:	91 05       	cpc	r25, r1
     37e:	11 f4       	brne	.+4      	; 0x384 <pinChange+0x1ec>
		  PORTC |= (1<<PC0);
     380:	a8 9a       	sbi	0x15, 0	; 21
     382:	08 95       	ret
		else if(a == PSen_PORTC1)
     384:	85 31       	cpi	r24, 0x15	; 21
     386:	91 05       	cpc	r25, r1
     388:	11 f4       	brne	.+4      	; 0x38e <pinChange+0x1f6>
		  PORTC |= (1<<PC1);
     38a:	a9 9a       	sbi	0x15, 1	; 21
     38c:	08 95       	ret
		else if(a == PSen_PORTC2)
     38e:	86 31       	cpi	r24, 0x16	; 22
     390:	91 05       	cpc	r25, r1
     392:	11 f4       	brne	.+4      	; 0x398 <pinChange+0x200>
	  	  PORTC |= (1<<PC2);
     394:	aa 9a       	sbi	0x15, 2	; 21
     396:	08 95       	ret
		else if(a == PSen_PORTC3)
     398:	87 31       	cpi	r24, 0x17	; 23
     39a:	91 05       	cpc	r25, r1
     39c:	11 f4       	brne	.+4      	; 0x3a2 <pinChange+0x20a>
		  PORTC |= (1<<PC3);
     39e:	ab 9a       	sbi	0x15, 3	; 21
     3a0:	08 95       	ret
		else if(a == PSen_PORTC4)
     3a2:	88 31       	cpi	r24, 0x18	; 24
     3a4:	91 05       	cpc	r25, r1
     3a6:	11 f4       	brne	.+4      	; 0x3ac <pinChange+0x214>
		  PORTC |= (1<<PC4);
     3a8:	ac 9a       	sbi	0x15, 4	; 21
     3aa:	08 95       	ret
		else if(a == PSen_PORTC5)
     3ac:	89 31       	cpi	r24, 0x19	; 25
     3ae:	91 05       	cpc	r25, r1
     3b0:	11 f4       	brne	.+4      	; 0x3b6 <pinChange+0x21e>
		  PORTC |= (1<<PC5);
     3b2:	ad 9a       	sbi	0x15, 5	; 21
     3b4:	08 95       	ret
		else if(a == PSen_PORTC6)
     3b6:	8a 31       	cpi	r24, 0x1A	; 26
     3b8:	91 05       	cpc	r25, r1
     3ba:	11 f4       	brne	.+4      	; 0x3c0 <pinChange+0x228>
		  PORTC |= (1<<PC6);  
     3bc:	ae 9a       	sbi	0x15, 6	; 21
     3be:	08 95       	ret
		else if(a == PSen_PORTC7)
     3c0:	8b 31       	cpi	r24, 0x1B	; 27
     3c2:	91 05       	cpc	r25, r1
     3c4:	11 f4       	brne	.+4      	; 0x3ca <pinChange+0x232>
		  PORTC |= (1<<PC7);
     3c6:	af 9a       	sbi	0x15, 7	; 21
     3c8:	08 95       	ret
		else if(a == PSen_PORTD0)
     3ca:	8e 31       	cpi	r24, 0x1E	; 30
     3cc:	91 05       	cpc	r25, r1
     3ce:	11 f4       	brne	.+4      	; 0x3d4 <pinChange+0x23c>
		  PORTD |= (1<<PD0);
     3d0:	90 9a       	sbi	0x12, 0	; 18
     3d2:	08 95       	ret
		else if(a == PSen_PORTD1)
     3d4:	8f 31       	cpi	r24, 0x1F	; 31
     3d6:	91 05       	cpc	r25, r1
     3d8:	11 f4       	brne	.+4      	; 0x3de <pinChange+0x246>
		  PORTD |= (1<<PD1);
     3da:	91 9a       	sbi	0x12, 1	; 18
     3dc:	08 95       	ret
		else if(a == PSen_PORTD2)
     3de:	80 32       	cpi	r24, 0x20	; 32
     3e0:	91 05       	cpc	r25, r1
     3e2:	11 f4       	brne	.+4      	; 0x3e8 <pinChange+0x250>
		  PORTD |= (1<<PD2);
     3e4:	92 9a       	sbi	0x12, 2	; 18
     3e6:	08 95       	ret
		else if(a == PSen_PORTD3)
     3e8:	81 32       	cpi	r24, 0x21	; 33
     3ea:	91 05       	cpc	r25, r1
     3ec:	11 f4       	brne	.+4      	; 0x3f2 <pinChange+0x25a>
		  PORTD |= (1<<PD3);
     3ee:	93 9a       	sbi	0x12, 3	; 18
     3f0:	08 95       	ret
		else if(a == PSen_PORTD4)
     3f2:	82 32       	cpi	r24, 0x22	; 34
     3f4:	91 05       	cpc	r25, r1
     3f6:	11 f4       	brne	.+4      	; 0x3fc <pinChange+0x264>
		  PORTD |= (1<<PD4);
     3f8:	94 9a       	sbi	0x12, 4	; 18
     3fa:	08 95       	ret
		else if(a == PSen_PORTD5)
     3fc:	83 32       	cpi	r24, 0x23	; 35
     3fe:	91 05       	cpc	r25, r1
     400:	11 f4       	brne	.+4      	; 0x406 <pinChange+0x26e>
		  PORTD |= (1<<PD5);
     402:	95 9a       	sbi	0x12, 5	; 18
     404:	08 95       	ret
		else if(a == PSen_PORTD6)
     406:	84 32       	cpi	r24, 0x24	; 36
     408:	91 05       	cpc	r25, r1
     40a:	11 f4       	brne	.+4      	; 0x410 <pinChange+0x278>
		  PORTD |= (1<<PD6);
     40c:	96 9a       	sbi	0x12, 6	; 18
     40e:	08 95       	ret
		else if(a == PSen_PORTD7)
     410:	85 97       	sbiw	r24, 0x25	; 37
     412:	09 f4       	brne	.+2      	; 0x416 <pinChange+0x27e>
		  PORTD |= (1<<PD7);
     414:	97 9a       	sbi	0x12, 7	; 18
     416:	08 95       	ret

00000418 <Lcd8_Port>:



//LCD 8 Bit Interfacing Functions
void Lcd8_Port(char a)
{
     418:	0f 93       	push	r16
     41a:	1f 93       	push	r17
     41c:	08 2f       	mov	r16, r24
	if(a & 1)
     41e:	18 2f       	mov	r17, r24
     420:	80 ff       	sbrs	r24, 0
     422:	05 c0       	rjmp	.+10     	; 0x42e <Lcd8_Port+0x16>
	pinChange(D0,1);
     424:	80 e0       	ldi	r24, 0x00	; 0
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	61 e0       	ldi	r22, 0x01	; 1
     42a:	70 e0       	ldi	r23, 0x00	; 0
     42c:	04 c0       	rjmp	.+8      	; 0x436 <Lcd8_Port+0x1e>
	else
	pinChange(D0,0);
     42e:	80 e0       	ldi	r24, 0x00	; 0
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	60 e0       	ldi	r22, 0x00	; 0
     434:	70 e0       	ldi	r23, 0x00	; 0
     436:	0e 94 cc 00 	call	0x198	; 0x198 <pinChange>
	
	if(a & 2)
     43a:	11 ff       	sbrs	r17, 1
     43c:	05 c0       	rjmp	.+10     	; 0x448 <Lcd8_Port+0x30>
	pinChange(D1,1);
     43e:	81 e0       	ldi	r24, 0x01	; 1
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	61 e0       	ldi	r22, 0x01	; 1
     444:	70 e0       	ldi	r23, 0x00	; 0
     446:	04 c0       	rjmp	.+8      	; 0x450 <Lcd8_Port+0x38>
	else
	pinChange(D1,0);
     448:	81 e0       	ldi	r24, 0x01	; 1
     44a:	90 e0       	ldi	r25, 0x00	; 0
     44c:	60 e0       	ldi	r22, 0x00	; 0
     44e:	70 e0       	ldi	r23, 0x00	; 0
     450:	0e 94 cc 00 	call	0x198	; 0x198 <pinChange>
	
	if(a & 4)
     454:	12 ff       	sbrs	r17, 2
     456:	05 c0       	rjmp	.+10     	; 0x462 <__stack+0x3>
	pinChange(D2,1);
     458:	82 e0       	ldi	r24, 0x02	; 2
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	61 e0       	ldi	r22, 0x01	; 1
     45e:	70 e0       	ldi	r23, 0x00	; 0
     460:	04 c0       	rjmp	.+8      	; 0x46a <__stack+0xb>
	else
	pinChange(D2,0);
     462:	82 e0       	ldi	r24, 0x02	; 2
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	60 e0       	ldi	r22, 0x00	; 0
     468:	70 e0       	ldi	r23, 0x00	; 0
     46a:	0e 94 cc 00 	call	0x198	; 0x198 <pinChange>
	
	if(a & 8)
     46e:	13 ff       	sbrs	r17, 3
     470:	05 c0       	rjmp	.+10     	; 0x47c <__stack+0x1d>
	pinChange(D3,1);
     472:	83 e0       	ldi	r24, 0x03	; 3
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	61 e0       	ldi	r22, 0x01	; 1
     478:	70 e0       	ldi	r23, 0x00	; 0
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__stack+0x25>
	else
	pinChange(D3,0);
     47c:	83 e0       	ldi	r24, 0x03	; 3
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	60 e0       	ldi	r22, 0x00	; 0
     482:	70 e0       	ldi	r23, 0x00	; 0
     484:	0e 94 cc 00 	call	0x198	; 0x198 <pinChange>
	
	if(a & 16)
     488:	14 ff       	sbrs	r17, 4
     48a:	05 c0       	rjmp	.+10     	; 0x496 <__stack+0x37>
	pinChange(D4,1);
     48c:	82 e2       	ldi	r24, 0x22	; 34
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	61 e0       	ldi	r22, 0x01	; 1
     492:	70 e0       	ldi	r23, 0x00	; 0
     494:	04 c0       	rjmp	.+8      	; 0x49e <__stack+0x3f>
	else
	pinChange(D4,0);
     496:	82 e2       	ldi	r24, 0x22	; 34
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	60 e0       	ldi	r22, 0x00	; 0
     49c:	70 e0       	ldi	r23, 0x00	; 0
     49e:	0e 94 cc 00 	call	0x198	; 0x198 <pinChange>

	if(a & 32)
     4a2:	15 ff       	sbrs	r17, 5
     4a4:	05 c0       	rjmp	.+10     	; 0x4b0 <__stack+0x51>
	pinChange(D5,1);
     4a6:	83 e2       	ldi	r24, 0x23	; 35
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	61 e0       	ldi	r22, 0x01	; 1
     4ac:	70 e0       	ldi	r23, 0x00	; 0
     4ae:	04 c0       	rjmp	.+8      	; 0x4b8 <__stack+0x59>
	else
	pinChange(D5,0);
     4b0:	83 e2       	ldi	r24, 0x23	; 35
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	60 e0       	ldi	r22, 0x00	; 0
     4b6:	70 e0       	ldi	r23, 0x00	; 0
     4b8:	0e 94 cc 00 	call	0x198	; 0x198 <pinChange>
	
	if(a & 64)
     4bc:	16 ff       	sbrs	r17, 6
     4be:	05 c0       	rjmp	.+10     	; 0x4ca <__stack+0x6b>
	pinChange(D6,1);
     4c0:	84 e2       	ldi	r24, 0x24	; 36
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	61 e0       	ldi	r22, 0x01	; 1
     4c6:	70 e0       	ldi	r23, 0x00	; 0
     4c8:	04 c0       	rjmp	.+8      	; 0x4d2 <__stack+0x73>
	else
	pinChange(D6,0);
     4ca:	84 e2       	ldi	r24, 0x24	; 36
     4cc:	90 e0       	ldi	r25, 0x00	; 0
     4ce:	60 e0       	ldi	r22, 0x00	; 0
     4d0:	70 e0       	ldi	r23, 0x00	; 0
     4d2:	0e 94 cc 00 	call	0x198	; 0x198 <pinChange>
	
	if(a & 128)
     4d6:	07 ff       	sbrs	r16, 7
     4d8:	05 c0       	rjmp	.+10     	; 0x4e4 <__stack+0x85>
	pinChange(D7,1);
     4da:	85 e2       	ldi	r24, 0x25	; 37
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	61 e0       	ldi	r22, 0x01	; 1
     4e0:	70 e0       	ldi	r23, 0x00	; 0
     4e2:	04 c0       	rjmp	.+8      	; 0x4ec <__stack+0x8d>
	else
	pinChange(D7,0);
     4e4:	85 e2       	ldi	r24, 0x25	; 37
     4e6:	90 e0       	ldi	r25, 0x00	; 0
     4e8:	60 e0       	ldi	r22, 0x00	; 0
     4ea:	70 e0       	ldi	r23, 0x00	; 0
     4ec:	0e 94 cc 00 	call	0x198	; 0x198 <pinChange>
}
     4f0:	1f 91       	pop	r17
     4f2:	0f 91       	pop	r16
     4f4:	08 95       	ret

000004f6 <Lcd8_Cmd>:
void Lcd8_Cmd(char a)
{
     4f6:	0f 93       	push	r16
     4f8:	1f 93       	push	r17
     4fa:	18 2f       	mov	r17, r24
	pinChange(RS,0);             // => RS = 0
     4fc:	8a e1       	ldi	r24, 0x1A	; 26
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	60 e0       	ldi	r22, 0x00	; 0
     502:	70 e0       	ldi	r23, 0x00	; 0
     504:	0e 94 cc 00 	call	0x198	; 0x198 <pinChange>
	Lcd8_Port(a);             //Data transfer
     508:	81 2f       	mov	r24, r17
     50a:	0e 94 0c 02 	call	0x418	; 0x418 <Lcd8_Port>
	pinChange(EN,1);             // => E = 1
     50e:	8b e1       	ldi	r24, 0x1B	; 27
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	61 e0       	ldi	r22, 0x01	; 1
     514:	70 e0       	ldi	r23, 0x00	; 0
     516:	0e 94 cc 00 	call	0x198	; 0x198 <pinChange>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     51a:	00 ea       	ldi	r16, 0xA0	; 160
     51c:	1f e0       	ldi	r17, 0x0F	; 15
     51e:	c8 01       	movw	r24, r16
     520:	01 97       	sbiw	r24, 0x01	; 1
     522:	f1 f7       	brne	.-4      	; 0x520 <Lcd8_Cmd+0x2a>
	_delay_ms(1);
	pinChange(EN,0);             // => E = 0
     524:	8b e1       	ldi	r24, 0x1B	; 27
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	60 e0       	ldi	r22, 0x00	; 0
     52a:	70 e0       	ldi	r23, 0x00	; 0
     52c:	0e 94 cc 00 	call	0x198	; 0x198 <pinChange>
     530:	c8 01       	movw	r24, r16
     532:	01 97       	sbiw	r24, 0x01	; 1
     534:	f1 f7       	brne	.-4      	; 0x532 <Lcd8_Cmd+0x3c>
	_delay_ms(1);
}
     536:	1f 91       	pop	r17
     538:	0f 91       	pop	r16
     53a:	08 95       	ret

0000053c <Lcd8_Clear>:

void Lcd8_Clear()
{
	Lcd8_Cmd(1);
     53c:	81 e0       	ldi	r24, 0x01	; 1
     53e:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <Lcd8_Cmd>
}
     542:	08 95       	ret

00000544 <Lcd8_Set_Cursor>:

void Lcd8_Set_Cursor(char a, char b)
{
	if(a == 1)
     544:	81 30       	cpi	r24, 0x01	; 1
     546:	29 f4       	brne	.+10     	; 0x552 <Lcd8_Set_Cursor+0xe>
	Lcd8_Cmd(0x80 + b);
     548:	86 2f       	mov	r24, r22
     54a:	80 58       	subi	r24, 0x80	; 128
     54c:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <Lcd8_Cmd>
     550:	08 95       	ret
	else if(a == 2)
     552:	82 30       	cpi	r24, 0x02	; 2
     554:	21 f4       	brne	.+8      	; 0x55e <Lcd8_Set_Cursor+0x1a>
	Lcd8_Cmd(0xC0 + b);
     556:	86 2f       	mov	r24, r22
     558:	80 54       	subi	r24, 0x40	; 64
     55a:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <Lcd8_Cmd>
     55e:	08 95       	ret

00000560 <Lcd8_Init>:
}

void Lcd8_Init()
{
	pinChange(RS,0);
     560:	8a e1       	ldi	r24, 0x1A	; 26
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	60 e0       	ldi	r22, 0x00	; 0
     566:	70 e0       	ldi	r23, 0x00	; 0
     568:	0e 94 cc 00 	call	0x198	; 0x198 <pinChange>
	pinChange(EN,0);
     56c:	8b e1       	ldi	r24, 0x1B	; 27
     56e:	90 e0       	ldi	r25, 0x00	; 0
     570:	60 e0       	ldi	r22, 0x00	; 0
     572:	70 e0       	ldi	r23, 0x00	; 0
     574:	0e 94 cc 00 	call	0x198	; 0x198 <pinChange>
     578:	88 ec       	ldi	r24, 0xC8	; 200
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	20 e9       	ldi	r18, 0x90	; 144
     57e:	31 e0       	ldi	r19, 0x01	; 1
     580:	f9 01       	movw	r30, r18
     582:	31 97       	sbiw	r30, 0x01	; 1
     584:	f1 f7       	brne	.-4      	; 0x582 <Lcd8_Init+0x22>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     586:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     588:	d9 f7       	brne	.-10     	; 0x580 <Lcd8_Init+0x20>
	_delay_ms(20);
	///////////// Reset process from datasheet /////////
	Lcd8_Cmd(0x30);
     58a:	80 e3       	ldi	r24, 0x30	; 48
     58c:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <Lcd8_Cmd>
     590:	80 e2       	ldi	r24, 0x20	; 32
     592:	9e e4       	ldi	r25, 0x4E	; 78
     594:	01 97       	sbiw	r24, 0x01	; 1
     596:	f1 f7       	brne	.-4      	; 0x594 <Lcd8_Init+0x34>
	_delay_ms(5);
	Lcd8_Cmd(0x30);
     598:	80 e3       	ldi	r24, 0x30	; 48
     59a:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <Lcd8_Cmd>
     59e:	80 ea       	ldi	r24, 0xA0	; 160
     5a0:	9f e0       	ldi	r25, 0x0F	; 15
     5a2:	01 97       	sbiw	r24, 0x01	; 1
     5a4:	f1 f7       	brne	.-4      	; 0x5a2 <Lcd8_Init+0x42>
	_delay_ms(1);
	Lcd8_Cmd(0x30);
     5a6:	80 e3       	ldi	r24, 0x30	; 48
     5a8:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <Lcd8_Cmd>
     5ac:	80 e4       	ldi	r24, 0x40	; 64
     5ae:	9c e9       	ldi	r25, 0x9C	; 156
     5b0:	01 97       	sbiw	r24, 0x01	; 1
     5b2:	f1 f7       	brne	.-4      	; 0x5b0 <Lcd8_Init+0x50>
	_delay_ms(10);
	/////////////////////////////////////////////////////
	Lcd8_Cmd(0x38);    //function set
     5b4:	88 e3       	ldi	r24, 0x38	; 56
     5b6:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <Lcd8_Cmd>
	Lcd8_Cmd(0x0C);    //display on,cursor off,blink off
     5ba:	8c e0       	ldi	r24, 0x0C	; 12
     5bc:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <Lcd8_Cmd>
	Lcd8_Cmd(0x01);    //clear display
     5c0:	81 e0       	ldi	r24, 0x01	; 1
     5c2:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <Lcd8_Cmd>
	Lcd8_Cmd(0x06);    //entry mode, set increment
     5c6:	86 e0       	ldi	r24, 0x06	; 6
     5c8:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <Lcd8_Cmd>
}
     5cc:	08 95       	ret

000005ce <Lcd8_Write_Char>:

void Lcd8_Write_Char(char a)
{
     5ce:	0f 93       	push	r16
     5d0:	1f 93       	push	r17
     5d2:	18 2f       	mov	r17, r24
	pinChange(RS,1);             // => RS = 1
     5d4:	8a e1       	ldi	r24, 0x1A	; 26
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	61 e0       	ldi	r22, 0x01	; 1
     5da:	70 e0       	ldi	r23, 0x00	; 0
     5dc:	0e 94 cc 00 	call	0x198	; 0x198 <pinChange>
	Lcd8_Port(a);             //Data transfer
     5e0:	81 2f       	mov	r24, r17
     5e2:	0e 94 0c 02 	call	0x418	; 0x418 <Lcd8_Port>
	pinChange(EN,1);             // => E = 1
     5e6:	8b e1       	ldi	r24, 0x1B	; 27
     5e8:	90 e0       	ldi	r25, 0x00	; 0
     5ea:	61 e0       	ldi	r22, 0x01	; 1
     5ec:	70 e0       	ldi	r23, 0x00	; 0
     5ee:	0e 94 cc 00 	call	0x198	; 0x198 <pinChange>
     5f2:	00 ea       	ldi	r16, 0xA0	; 160
     5f4:	1f e0       	ldi	r17, 0x0F	; 15
     5f6:	c8 01       	movw	r24, r16
     5f8:	01 97       	sbiw	r24, 0x01	; 1
     5fa:	f1 f7       	brne	.-4      	; 0x5f8 <Lcd8_Write_Char+0x2a>
	_delay_ms(1);
	pinChange(EN,0);             // => E = 04
     5fc:	8b e1       	ldi	r24, 0x1B	; 27
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	60 e0       	ldi	r22, 0x00	; 0
     602:	70 e0       	ldi	r23, 0x00	; 0
     604:	0e 94 cc 00 	call	0x198	; 0x198 <pinChange>
     608:	c8 01       	movw	r24, r16
     60a:	01 97       	sbiw	r24, 0x01	; 1
     60c:	f1 f7       	brne	.-4      	; 0x60a <Lcd8_Write_Char+0x3c>
	_delay_ms(1);
}
     60e:	1f 91       	pop	r17
     610:	0f 91       	pop	r16
     612:	08 95       	ret

00000614 <Lcd8_Write_String>:

void Lcd8_Write_String(char *a)
{
     614:	cf 93       	push	r28
     616:	df 93       	push	r29
     618:	ec 01       	movw	r28, r24
     61a:	02 c0       	rjmp	.+4      	; 0x620 <Lcd8_Write_String+0xc>
	int i;
	for(i=0;a[i]!='\0';i++)
	Lcd8_Write_Char(a[i]);
     61c:	0e 94 e7 02 	call	0x5ce	; 0x5ce <Lcd8_Write_Char>
}

void Lcd8_Write_String(char *a)
{
	int i;
	for(i=0;a[i]!='\0';i++)
     620:	89 91       	ld	r24, Y+
     622:	88 23       	and	r24, r24
     624:	d9 f7       	brne	.-10     	; 0x61c <Lcd8_Write_String+0x8>
	Lcd8_Write_Char(a[i]);
}
     626:	df 91       	pop	r29
     628:	cf 91       	pop	r28
     62a:	08 95       	ret

0000062c <Lcd8_Shift_Right>:

void Lcd8_Shift_Right()
{
	Lcd8_Cmd(0x1C);
     62c:	8c e1       	ldi	r24, 0x1C	; 28
     62e:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <Lcd8_Cmd>
}
     632:	08 95       	ret

00000634 <Lcd8_Shift_Left>:

void Lcd8_Shift_Left()
{
	Lcd8_Cmd(0x18);
     634:	88 e1       	ldi	r24, 0x18	; 24
     636:	0e 94 7b 02 	call	0x4f6	; 0x4f6 <Lcd8_Cmd>
}
     63a:	08 95       	ret

0000063c <Lcd4_Port>:
//End LCD 8 Bit Interfacing Functions

//LCD 4 Bit Interfacing Functions

void Lcd4_Port(char a)
{
     63c:	cf 93       	push	r28
     63e:	df 93       	push	r29
	if(a & 1)
     640:	c8 2f       	mov	r28, r24
     642:	80 ff       	sbrs	r24, 0
     644:	05 c0       	rjmp	.+10     	; 0x650 <Lcd4_Port+0x14>
	pinChange(D4,1);
     646:	82 e2       	ldi	r24, 0x22	; 34
     648:	90 e0       	ldi	r25, 0x00	; 0
     64a:	61 e0       	ldi	r22, 0x01	; 1
     64c:	70 e0       	ldi	r23, 0x00	; 0
     64e:	04 c0       	rjmp	.+8      	; 0x658 <Lcd4_Port+0x1c>
	else
	pinChange(D4,0);
     650:	82 e2       	ldi	r24, 0x22	; 34
     652:	90 e0       	ldi	r25, 0x00	; 0
     654:	60 e0       	ldi	r22, 0x00	; 0
     656:	70 e0       	ldi	r23, 0x00	; 0
     658:	0e 94 cc 00 	call	0x198	; 0x198 <pinChange>
	
	if(a & 2)
     65c:	c1 ff       	sbrs	r28, 1
     65e:	05 c0       	rjmp	.+10     	; 0x66a <Lcd4_Port+0x2e>
	pinChange(D5,1);
     660:	83 e2       	ldi	r24, 0x23	; 35
     662:	90 e0       	ldi	r25, 0x00	; 0
     664:	61 e0       	ldi	r22, 0x01	; 1
     666:	70 e0       	ldi	r23, 0x00	; 0
     668:	04 c0       	rjmp	.+8      	; 0x672 <Lcd4_Port+0x36>
	else
	pinChange(D5,0);
     66a:	83 e2       	ldi	r24, 0x23	; 35
     66c:	90 e0       	ldi	r25, 0x00	; 0
     66e:	60 e0       	ldi	r22, 0x00	; 0
     670:	70 e0       	ldi	r23, 0x00	; 0
     672:	0e 94 cc 00 	call	0x198	; 0x198 <pinChange>
	
	if(a & 4)
     676:	c2 ff       	sbrs	r28, 2
     678:	05 c0       	rjmp	.+10     	; 0x684 <Lcd4_Port+0x48>
	pinChange(D6,1);
     67a:	84 e2       	ldi	r24, 0x24	; 36
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	61 e0       	ldi	r22, 0x01	; 1
     680:	70 e0       	ldi	r23, 0x00	; 0
     682:	04 c0       	rjmp	.+8      	; 0x68c <Lcd4_Port+0x50>
	else
	pinChange(D6,0);
     684:	84 e2       	ldi	r24, 0x24	; 36
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	60 e0       	ldi	r22, 0x00	; 0
     68a:	70 e0       	ldi	r23, 0x00	; 0
     68c:	0e 94 cc 00 	call	0x198	; 0x198 <pinChange>
	
	if(a & 8)
     690:	c3 ff       	sbrs	r28, 3
     692:	05 c0       	rjmp	.+10     	; 0x69e <Lcd4_Port+0x62>
	pinChange(D7,1);
     694:	85 e2       	ldi	r24, 0x25	; 37
     696:	90 e0       	ldi	r25, 0x00	; 0
     698:	61 e0       	ldi	r22, 0x01	; 1
     69a:	70 e0       	ldi	r23, 0x00	; 0
     69c:	04 c0       	rjmp	.+8      	; 0x6a6 <Lcd4_Port+0x6a>
	else
	pinChange(D7,0);
     69e:	85 e2       	ldi	r24, 0x25	; 37
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	60 e0       	ldi	r22, 0x00	; 0
     6a4:	70 e0       	ldi	r23, 0x00	; 0
     6a6:	0e 94 cc 00 	call	0x198	; 0x198 <pinChange>
}
     6aa:	df 91       	pop	r29
     6ac:	cf 91       	pop	r28
     6ae:	08 95       	ret

000006b0 <Lcd4_Cmd>:
void Lcd4_Cmd(char a)
{
     6b0:	0f 93       	push	r16
     6b2:	1f 93       	push	r17
     6b4:	18 2f       	mov	r17, r24
	pinChange(RS,0);             // => RS = 0
     6b6:	8a e1       	ldi	r24, 0x1A	; 26
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	60 e0       	ldi	r22, 0x00	; 0
     6bc:	70 e0       	ldi	r23, 0x00	; 0
     6be:	0e 94 cc 00 	call	0x198	; 0x198 <pinChange>
	Lcd4_Port(a);
     6c2:	81 2f       	mov	r24, r17
     6c4:	0e 94 1e 03 	call	0x63c	; 0x63c <Lcd4_Port>
	pinChange(EN,1);            // => E = 1
     6c8:	8b e1       	ldi	r24, 0x1B	; 27
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	61 e0       	ldi	r22, 0x01	; 1
     6ce:	70 e0       	ldi	r23, 0x00	; 0
     6d0:	0e 94 cc 00 	call	0x198	; 0x198 <pinChange>
     6d4:	00 ea       	ldi	r16, 0xA0	; 160
     6d6:	1f e0       	ldi	r17, 0x0F	; 15
     6d8:	c8 01       	movw	r24, r16
     6da:	01 97       	sbiw	r24, 0x01	; 1
     6dc:	f1 f7       	brne	.-4      	; 0x6da <Lcd4_Cmd+0x2a>
	_delay_ms(1);
	pinChange(EN,0);             // => E = 0
     6de:	8b e1       	ldi	r24, 0x1B	; 27
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	60 e0       	ldi	r22, 0x00	; 0
     6e4:	70 e0       	ldi	r23, 0x00	; 0
     6e6:	0e 94 cc 00 	call	0x198	; 0x198 <pinChange>
     6ea:	c8 01       	movw	r24, r16
     6ec:	01 97       	sbiw	r24, 0x01	; 1
     6ee:	f1 f7       	brne	.-4      	; 0x6ec <Lcd4_Cmd+0x3c>
	_delay_ms(1);
}
     6f0:	1f 91       	pop	r17
     6f2:	0f 91       	pop	r16
     6f4:	08 95       	ret

000006f6 <Lcd4_Clear>:

void Lcd4_Clear()
{
	Lcd4_Cmd(0);
     6f6:	80 e0       	ldi	r24, 0x00	; 0
     6f8:	0e 94 58 03 	call	0x6b0	; 0x6b0 <Lcd4_Cmd>
	Lcd4_Cmd(1);
     6fc:	81 e0       	ldi	r24, 0x01	; 1
     6fe:	0e 94 58 03 	call	0x6b0	; 0x6b0 <Lcd4_Cmd>
}
     702:	08 95       	ret

00000704 <Lcd4_Set_Cursor>:

void Lcd4_Set_Cursor(char a, char b)
{
     704:	1f 93       	push	r17
	char temp,z,y;
	if(a == 1)
     706:	81 30       	cpi	r24, 0x01	; 1
     708:	19 f4       	brne	.+6      	; 0x710 <Lcd4_Set_Cursor+0xc>
	{
		temp = 0x80 + b;
     70a:	16 2f       	mov	r17, r22
     70c:	10 58       	subi	r17, 0x80	; 128
     70e:	04 c0       	rjmp	.+8      	; 0x718 <Lcd4_Set_Cursor+0x14>
		z = temp>>4;
		y = (0x80+b) & 0x0F;
		Lcd4_Cmd(z);
		Lcd4_Cmd(y);
	}
	else if(a == 2)
     710:	82 30       	cpi	r24, 0x02	; 2
     712:	59 f4       	brne	.+22     	; 0x72a <Lcd4_Set_Cursor+0x26>
	{
		temp = 0xC0 + b;
     714:	16 2f       	mov	r17, r22
     716:	10 54       	subi	r17, 0x40	; 64
		z = temp>>4;
		y = (0xC0+b) & 0x0F;
		Lcd4_Cmd(z);
     718:	81 2f       	mov	r24, r17
     71a:	82 95       	swap	r24
     71c:	8f 70       	andi	r24, 0x0F	; 15
     71e:	0e 94 58 03 	call	0x6b0	; 0x6b0 <Lcd4_Cmd>
		Lcd4_Cmd(y);
     722:	81 2f       	mov	r24, r17
     724:	8f 70       	andi	r24, 0x0F	; 15
     726:	0e 94 58 03 	call	0x6b0	; 0x6b0 <Lcd4_Cmd>
	}
}
     72a:	1f 91       	pop	r17
     72c:	08 95       	ret

0000072e <Lcd4_Init>:

void Lcd4_Init()
{
	Lcd4_Port(0x00);
     72e:	80 e0       	ldi	r24, 0x00	; 0
     730:	0e 94 1e 03 	call	0x63c	; 0x63c <Lcd4_Port>
     734:	88 ec       	ldi	r24, 0xC8	; 200
     736:	90 e0       	ldi	r25, 0x00	; 0
     738:	20 e9       	ldi	r18, 0x90	; 144
     73a:	31 e0       	ldi	r19, 0x01	; 1
     73c:	f9 01       	movw	r30, r18
     73e:	31 97       	sbiw	r30, 0x01	; 1
     740:	f1 f7       	brne	.-4      	; 0x73e <Lcd4_Init+0x10>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     742:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     744:	d9 f7       	brne	.-10     	; 0x73c <Lcd4_Init+0xe>
	_delay_ms(20);
	///////////// Reset process from datasheet /////////
	Lcd4_Cmd(0x03);
     746:	83 e0       	ldi	r24, 0x03	; 3
     748:	0e 94 58 03 	call	0x6b0	; 0x6b0 <Lcd4_Cmd>
     74c:	80 e2       	ldi	r24, 0x20	; 32
     74e:	9e e4       	ldi	r25, 0x4E	; 78
     750:	01 97       	sbiw	r24, 0x01	; 1
     752:	f1 f7       	brne	.-4      	; 0x750 <Lcd4_Init+0x22>
	_delay_ms(5);
	Lcd4_Cmd(0x03);
     754:	83 e0       	ldi	r24, 0x03	; 3
     756:	0e 94 58 03 	call	0x6b0	; 0x6b0 <Lcd4_Cmd>
     75a:	80 ee       	ldi	r24, 0xE0	; 224
     75c:	9b ea       	ldi	r25, 0xAB	; 171
     75e:	01 97       	sbiw	r24, 0x01	; 1
     760:	f1 f7       	brne	.-4      	; 0x75e <Lcd4_Init+0x30>
	_delay_ms(11);
	Lcd4_Cmd(0x03);
     762:	83 e0       	ldi	r24, 0x03	; 3
     764:	0e 94 58 03 	call	0x6b0	; 0x6b0 <Lcd4_Cmd>
	/////////////////////////////////////////////////////
	Lcd4_Cmd(0x02);
     768:	82 e0       	ldi	r24, 0x02	; 2
     76a:	0e 94 58 03 	call	0x6b0	; 0x6b0 <Lcd4_Cmd>
	Lcd4_Cmd(0x02);
     76e:	82 e0       	ldi	r24, 0x02	; 2
     770:	0e 94 58 03 	call	0x6b0	; 0x6b0 <Lcd4_Cmd>
	Lcd4_Cmd(0x08);
     774:	88 e0       	ldi	r24, 0x08	; 8
     776:	0e 94 58 03 	call	0x6b0	; 0x6b0 <Lcd4_Cmd>
	Lcd4_Cmd(0x00);
     77a:	80 e0       	ldi	r24, 0x00	; 0
     77c:	0e 94 58 03 	call	0x6b0	; 0x6b0 <Lcd4_Cmd>
	Lcd4_Cmd(0x0C);
     780:	8c e0       	ldi	r24, 0x0C	; 12
     782:	0e 94 58 03 	call	0x6b0	; 0x6b0 <Lcd4_Cmd>
	Lcd4_Cmd(0x00);
     786:	80 e0       	ldi	r24, 0x00	; 0
     788:	0e 94 58 03 	call	0x6b0	; 0x6b0 <Lcd4_Cmd>
	Lcd4_Cmd(0x06);
     78c:	86 e0       	ldi	r24, 0x06	; 6
     78e:	0e 94 58 03 	call	0x6b0	; 0x6b0 <Lcd4_Cmd>
}
     792:	08 95       	ret

00000794 <Lcd4_Write_Char>:

void Lcd4_Write_Char(char a)
{
     794:	ff 92       	push	r15
     796:	0f 93       	push	r16
     798:	1f 93       	push	r17
     79a:	f8 2e       	mov	r15, r24
	char temp,y;
	temp = a&0x0F;
	y = a&0xF0;
	pinChange(RS,1);             // => RS = 1
     79c:	8a e1       	ldi	r24, 0x1A	; 26
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	61 e0       	ldi	r22, 0x01	; 1
     7a2:	70 e0       	ldi	r23, 0x00	; 0
     7a4:	0e 94 cc 00 	call	0x198	; 0x198 <pinChange>
	Lcd4_Port(y>>4);             //Data transfer
     7a8:	8f 2d       	mov	r24, r15
     7aa:	82 95       	swap	r24
     7ac:	8f 70       	andi	r24, 0x0F	; 15
     7ae:	0e 94 1e 03 	call	0x63c	; 0x63c <Lcd4_Port>
	pinChange(EN,1);
     7b2:	8b e1       	ldi	r24, 0x1B	; 27
     7b4:	90 e0       	ldi	r25, 0x00	; 0
     7b6:	61 e0       	ldi	r22, 0x01	; 1
     7b8:	70 e0       	ldi	r23, 0x00	; 0
     7ba:	0e 94 cc 00 	call	0x198	; 0x198 <pinChange>
     7be:	00 ea       	ldi	r16, 0xA0	; 160
     7c0:	1f e0       	ldi	r17, 0x0F	; 15
     7c2:	c8 01       	movw	r24, r16
     7c4:	01 97       	sbiw	r24, 0x01	; 1
     7c6:	f1 f7       	brne	.-4      	; 0x7c4 <Lcd4_Write_Char+0x30>
	_delay_ms(1);
	pinChange(EN,0);
     7c8:	8b e1       	ldi	r24, 0x1B	; 27
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	60 e0       	ldi	r22, 0x00	; 0
     7ce:	70 e0       	ldi	r23, 0x00	; 0
     7d0:	0e 94 cc 00 	call	0x198	; 0x198 <pinChange>
     7d4:	c8 01       	movw	r24, r16
     7d6:	01 97       	sbiw	r24, 0x01	; 1
     7d8:	f1 f7       	brne	.-4      	; 0x7d6 <Lcd4_Write_Char+0x42>
	_delay_ms(1);
	Lcd4_Port(temp);
     7da:	8f 2d       	mov	r24, r15
     7dc:	8f 70       	andi	r24, 0x0F	; 15
     7de:	0e 94 1e 03 	call	0x63c	; 0x63c <Lcd4_Port>
	pinChange(EN,1);
     7e2:	8b e1       	ldi	r24, 0x1B	; 27
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	61 e0       	ldi	r22, 0x01	; 1
     7e8:	70 e0       	ldi	r23, 0x00	; 0
     7ea:	0e 94 cc 00 	call	0x198	; 0x198 <pinChange>
     7ee:	c8 01       	movw	r24, r16
     7f0:	01 97       	sbiw	r24, 0x01	; 1
     7f2:	f1 f7       	brne	.-4      	; 0x7f0 <Lcd4_Write_Char+0x5c>
	_delay_ms(1);
	pinChange(EN,0);
     7f4:	8b e1       	ldi	r24, 0x1B	; 27
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	60 e0       	ldi	r22, 0x00	; 0
     7fa:	70 e0       	ldi	r23, 0x00	; 0
     7fc:	0e 94 cc 00 	call	0x198	; 0x198 <pinChange>
     800:	c8 01       	movw	r24, r16
     802:	01 97       	sbiw	r24, 0x01	; 1
     804:	f1 f7       	brne	.-4      	; 0x802 <Lcd4_Write_Char+0x6e>
	_delay_ms(1);
}
     806:	1f 91       	pop	r17
     808:	0f 91       	pop	r16
     80a:	ff 90       	pop	r15
     80c:	08 95       	ret

0000080e <Lcd4_Write_String>:

void Lcd4_Write_String(char *a)
{
     80e:	cf 93       	push	r28
     810:	df 93       	push	r29
     812:	ec 01       	movw	r28, r24
     814:	02 c0       	rjmp	.+4      	; 0x81a <Lcd4_Write_String+0xc>
	int i;
	for(i=0;a[i]!='\0';i++)
	Lcd4_Write_Char(a[i]);
     816:	0e 94 ca 03 	call	0x794	; 0x794 <Lcd4_Write_Char>
}

void Lcd4_Write_String(char *a)
{
	int i;
	for(i=0;a[i]!='\0';i++)
     81a:	89 91       	ld	r24, Y+
     81c:	88 23       	and	r24, r24
     81e:	d9 f7       	brne	.-10     	; 0x816 <Lcd4_Write_String+0x8>
	Lcd4_Write_Char(a[i]);
}
     820:	df 91       	pop	r29
     822:	cf 91       	pop	r28
     824:	08 95       	ret

00000826 <Lcd4_Shift_Right>:

void Lcd4_Shift_Right()
{
	Lcd4_Cmd(0x01);
     826:	81 e0       	ldi	r24, 0x01	; 1
     828:	0e 94 58 03 	call	0x6b0	; 0x6b0 <Lcd4_Cmd>
	Lcd4_Cmd(0x0C);
     82c:	8c e0       	ldi	r24, 0x0C	; 12
     82e:	0e 94 58 03 	call	0x6b0	; 0x6b0 <Lcd4_Cmd>
}
     832:	08 95       	ret

00000834 <Lcd4_Shift_Left>:

void Lcd4_Shift_Left()
{
	Lcd4_Cmd(0x01);
     834:	81 e0       	ldi	r24, 0x01	; 1
     836:	0e 94 58 03 	call	0x6b0	; 0x6b0 <Lcd4_Cmd>
	Lcd4_Cmd(0x08);
     83a:	88 e0       	ldi	r24, 0x08	; 8
     83c:	0e 94 58 03 	call	0x6b0	; 0x6b0 <Lcd4_Cmd>
}
     840:	08 95       	ret

00000842 <IsItPM>:

int second,minute,hour,day,date,month,year;

bool IsItPM(char hour_)
{
	if(hour_ & (AMPM))
     842:	90 e0       	ldi	r25, 0x00	; 0
     844:	25 e0       	ldi	r18, 0x05	; 5
     846:	96 95       	lsr	r25
     848:	87 95       	ror	r24
     84a:	2a 95       	dec	r18
     84c:	e1 f7       	brne	.-8      	; 0x846 <IsItPM+0x4>
	return 1;
	else
	return 0;
}
     84e:	81 70       	andi	r24, 0x01	; 1
     850:	08 95       	ret

00000852 <RTC_Read_Clock>:

void RTC_Read_Clock(char read_clock_address)
{
     852:	1f 93       	push	r17
     854:	18 2f       	mov	r17, r24
	I2C_Start(Device_Write_address);/* Start I2C communication with RTC */
     856:	80 ed       	ldi	r24, 0xD0	; 208
     858:	0e 94 4d 00 	call	0x9a	; 0x9a <I2C_Start>
	I2C_Write(read_clock_address);	/* Write address to read */
     85c:	81 2f       	mov	r24, r17
     85e:	0e 94 aa 00 	call	0x154	; 0x154 <I2C_Write>
	I2C_Repeated_Start(Device_Read_address);/* Repeated start with device read address */
     862:	81 ed       	ldi	r24, 0xD1	; 209
     864:	0e 94 6b 00 	call	0xd6	; 0xd6 <I2C_Repeated_Start>
	return 2;												/* Else return 2 to indicate data transmission failed */
}

int I2C_Read_Ack()											/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
     868:	84 ec       	ldi	r24, 0xC4	; 196
     86a:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     86c:	06 b6       	in	r0, 0x36	; 54
     86e:	07 fe       	sbrs	r0, 7
     870:	fd cf       	rjmp	.-6      	; 0x86c <RTC_Read_Clock+0x1a>
	return TWDR;											/* Return received data */
     872:	83 b1       	in	r24, 0x03	; 3

	second = I2C_Read_Ack();	/* Read second */
     874:	80 93 b8 00 	sts	0x00B8, r24
     878:	10 92 b9 00 	sts	0x00B9, r1
	return 2;												/* Else return 2 to indicate data transmission failed */
}

int I2C_Read_Ack()											/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
     87c:	84 ec       	ldi	r24, 0xC4	; 196
     87e:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     880:	06 b6       	in	r0, 0x36	; 54
     882:	07 fe       	sbrs	r0, 7
     884:	fd cf       	rjmp	.-6      	; 0x880 <RTC_Read_Clock+0x2e>
	return TWDR;											/* Return received data */
     886:	83 b1       	in	r24, 0x03	; 3
	minute = I2C_Read_Ack();	/* Read minute */
     888:	80 93 ba 00 	sts	0x00BA, r24
     88c:	10 92 bb 00 	sts	0x00BB, r1
}	

int I2C_Read_Nack()										/* I2C read nack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT);								/* Enable TWI and clear interrupt flag */
     890:	84 e8       	ldi	r24, 0x84	; 132
     892:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     894:	06 b6       	in	r0, 0x36	; 54
     896:	07 fe       	sbrs	r0, 7
     898:	fd cf       	rjmp	.-6      	; 0x894 <RTC_Read_Clock+0x42>
	return TWDR;											/* Return received data */
     89a:	83 b1       	in	r24, 0x03	; 3
	hour = I2C_Read_Nack();		/* Read hour with Nack */
     89c:	80 93 bc 00 	sts	0x00BC, r24
     8a0:	10 92 bd 00 	sts	0x00BD, r1
	return 3;												/* Else return 3 to indicate SLA+W failed */
}

void I2C_Stop()												/* I2C stop function */
{
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);					/* Enable TWI, generate stop condition and clear interrupt flag */
     8a4:	84 e9       	ldi	r24, 0x94	; 148
     8a6:	86 bf       	out	0x36, r24	; 54
	while(TWCR & (1<<TWSTO));								/* Wait until stop condition execution */ 
     8a8:	06 b6       	in	r0, 0x36	; 54
     8aa:	04 fc       	sbrc	r0, 4
     8ac:	fd cf       	rjmp	.-6      	; 0x8a8 <RTC_Read_Clock+0x56>
	I2C_Stop();			/* Stop i2C communication */
}
     8ae:	1f 91       	pop	r17
     8b0:	08 95       	ret

000008b2 <RTC_Read_Calendar>:

void RTC_Read_Calendar(char read_calendar_address)
{
     8b2:	1f 93       	push	r17
     8b4:	18 2f       	mov	r17, r24
	I2C_Start(Device_Write_address);
     8b6:	80 ed       	ldi	r24, 0xD0	; 208
     8b8:	0e 94 4d 00 	call	0x9a	; 0x9a <I2C_Start>
	I2C_Write(read_calendar_address);
     8bc:	81 2f       	mov	r24, r17
     8be:	0e 94 aa 00 	call	0x154	; 0x154 <I2C_Write>
	I2C_Repeated_Start(Device_Read_address);
     8c2:	81 ed       	ldi	r24, 0xD1	; 209
     8c4:	0e 94 6b 00 	call	0xd6	; 0xd6 <I2C_Repeated_Start>
	return 2;												/* Else return 2 to indicate data transmission failed */
}

int I2C_Read_Ack()											/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
     8c8:	84 ec       	ldi	r24, 0xC4	; 196
     8ca:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     8cc:	06 b6       	in	r0, 0x36	; 54
     8ce:	07 fe       	sbrs	r0, 7
     8d0:	fd cf       	rjmp	.-6      	; 0x8cc <RTC_Read_Calendar+0x1a>
	return TWDR;											/* Return received data */
     8d2:	83 b1       	in	r24, 0x03	; 3

	day = I2C_Read_Ack();		/* Read day */ 
     8d4:	80 93 c0 00 	sts	0x00C0, r24
     8d8:	10 92 c1 00 	sts	0x00C1, r1
	return 2;												/* Else return 2 to indicate data transmission failed */
}

int I2C_Read_Ack()											/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
     8dc:	84 ec       	ldi	r24, 0xC4	; 196
     8de:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     8e0:	06 b6       	in	r0, 0x36	; 54
     8e2:	07 fe       	sbrs	r0, 7
     8e4:	fd cf       	rjmp	.-6      	; 0x8e0 <RTC_Read_Calendar+0x2e>
	return TWDR;											/* Return received data */
     8e6:	83 b1       	in	r24, 0x03	; 3
	date = I2C_Read_Ack();		/* Read date */
     8e8:	80 93 c2 00 	sts	0x00C2, r24
     8ec:	10 92 c3 00 	sts	0x00C3, r1
	return 2;												/* Else return 2 to indicate data transmission failed */
}

int I2C_Read_Ack()											/* I2C read ack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT)|(1<<TWEA);					/* Enable TWI, generation of ack and clear interrupt flag */
     8f0:	84 ec       	ldi	r24, 0xC4	; 196
     8f2:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     8f4:	06 b6       	in	r0, 0x36	; 54
     8f6:	07 fe       	sbrs	r0, 7
     8f8:	fd cf       	rjmp	.-6      	; 0x8f4 <RTC_Read_Calendar+0x42>
	return TWDR;											/* Return received data */
     8fa:	83 b1       	in	r24, 0x03	; 3
	month = I2C_Read_Ack();		/* Read month */
     8fc:	80 93 b6 00 	sts	0x00B6, r24
     900:	10 92 b7 00 	sts	0x00B7, r1
}	

int I2C_Read_Nack()										/* I2C read nack function */
{
	TWCR=(1<<TWEN)|(1<<TWINT);								/* Enable TWI and clear interrupt flag */
     904:	84 e8       	ldi	r24, 0x84	; 132
     906:	86 bf       	out	0x36, r24	; 54
	while (!(TWCR & (1<<TWINT)));							/* Wait until TWI finish its current job (read operation) */
     908:	06 b6       	in	r0, 0x36	; 54
     90a:	07 fe       	sbrs	r0, 7
     90c:	fd cf       	rjmp	.-6      	; 0x908 <RTC_Read_Calendar+0x56>
	return TWDR;											/* Return received data */
     90e:	83 b1       	in	r24, 0x03	; 3
	year = I2C_Read_Nack();		/* Read the year with Nack */
     910:	80 93 be 00 	sts	0x00BE, r24
     914:	10 92 bf 00 	sts	0x00BF, r1
	return 3;												/* Else return 3 to indicate SLA+W failed */
}

void I2C_Stop()												/* I2C stop function */
{
	TWCR=(1<<TWSTO)|(1<<TWINT)|(1<<TWEN);					/* Enable TWI, generate stop condition and clear interrupt flag */
     918:	84 e9       	ldi	r24, 0x94	; 148
     91a:	86 bf       	out	0x36, r24	; 54
	while(TWCR & (1<<TWSTO));								/* Wait until stop condition execution */ 
     91c:	06 b6       	in	r0, 0x36	; 54
     91e:	04 fc       	sbrc	r0, 4
     920:	fd cf       	rjmp	.-6      	; 0x91c <RTC_Read_Calendar+0x6a>
	I2C_Stop();			/* Stop i2C communication */
}
     922:	1f 91       	pop	r17
     924:	08 95       	ret

00000926 <main>:

int main(void)
{
     926:	af 92       	push	r10
     928:	bf 92       	push	r11
     92a:	cf 92       	push	r12
     92c:	df 92       	push	r13
     92e:	ef 92       	push	r14
     930:	ff 92       	push	r15
     932:	0f 93       	push	r16
     934:	1f 93       	push	r17
     936:	df 93       	push	r29
     938:	cf 93       	push	r28
     93a:	cd b7       	in	r28, 0x3d	; 61
     93c:	de b7       	in	r29, 0x3e	; 62
     93e:	a2 97       	sbiw	r28, 0x22	; 34
     940:	0f b6       	in	r0, 0x3f	; 63
     942:	f8 94       	cli
     944:	de bf       	out	0x3e, r29	; 62
     946:	0f be       	out	0x3f, r0	; 63
     948:	cd bf       	out	0x3d, r28	; 61
	char buffer[20];
	char* days[7]= {"Sun","Mon","Tue","Wed","Thu","Fri","Sat"};
     94a:	de 01       	movw	r26, r28
     94c:	11 96       	adiw	r26, 0x01	; 1
     94e:	e7 ea       	ldi	r30, 0xA7	; 167
     950:	f0 e0       	ldi	r31, 0x00	; 0
     952:	8e e0       	ldi	r24, 0x0E	; 14
     954:	01 90       	ld	r0, Z+
     956:	0d 92       	st	X+, r0
     958:	81 50       	subi	r24, 0x01	; 1
     95a:	e1 f7       	brne	.-8      	; 0x954 <main+0x2e>
int I2C_Read_Ack(void);							/* I2C read ack function */
int I2C_Read_Nack(void);							/* I2C read nack function */

void I2C_Init()												/* I2C initialize function */
{
	TWBR = BITRATE(TWSR = 0x00);							/* Get bit rate register value by formula */
     95c:	11 b8       	out	0x01, r1	; 1
     95e:	88 e4       	ldi	r24, 0x48	; 72
     960:	80 b9       	out	0x00, r24	; 0

	I2C_Init();			/* Initialize I2C */
	Lcd4_Init();			/* Initialize LCD16x2 */
     962:	0e 94 97 03 	call	0x72e	; 0x72e <Lcd4_Init>
     966:	8e 01       	movw	r16, r28
     968:	01 5f       	subi	r16, 0xF1	; 241
     96a:	1f 4f       	sbci	r17, 0xFF	; 255
     96c:	50 e6       	ldi	r21, 0x60	; 96
     96e:	e5 2e       	mov	r14, r21
     970:	50 e0       	ldi	r21, 0x00	; 0
     972:	f5 2e       	mov	r15, r21
			sprintf(buffer, "%02x:%02x:%02x  ", (hour & 0b00011111), minute, second);
			Lcd4_Set_Cursor(1,1);
			Lcd4_Write_String(buffer);
		}
		RTC_Read_Calendar(3);	/* Read calendar with day address i.e location is 3 */
		sprintf(buffer, "%02x/%02x/%02x %3s ", date, month, year,days[day-1]);
     974:	44 e7       	ldi	r20, 0x74	; 116
     976:	a4 2e       	mov	r10, r20
     978:	40 e0       	ldi	r20, 0x00	; 0
     97a:	b4 2e       	mov	r11, r20
     97c:	6e 01       	movw	r12, r28
     97e:	08 94       	sec
     980:	c1 1c       	adc	r12, r1
     982:	d1 1c       	adc	r13, r1
	I2C_Init();			/* Initialize I2C */
	Lcd4_Init();			/* Initialize LCD16x2 */

    while(1)
    {
		RTC_Read_Clock(0);	/* Read clock with second add. i.e location is 0 */
     984:	80 e0       	ldi	r24, 0x00	; 0
     986:	0e 94 29 04 	call	0x852	; 0x852 <RTC_Read_Clock>
		if (hour & TimeFormat12)	
     98a:	80 91 bc 00 	lds	r24, 0x00BC
     98e:	90 91 bd 00 	lds	r25, 0x00BD
     992:	9c 01       	movw	r18, r24
     994:	2f 71       	andi	r18, 0x1F	; 31
     996:	30 70       	andi	r19, 0x00	; 0
     998:	86 ff       	sbrs	r24, 6
     99a:	35 c0       	rjmp	.+106    	; 0xa06 <main+0xe0>
		{
			sprintf(buffer, "%02x:%02x:%02x  ", (hour & 0b00011111), minute, second);
     99c:	8d b7       	in	r24, 0x3d	; 61
     99e:	9e b7       	in	r25, 0x3e	; 62
     9a0:	0a 97       	sbiw	r24, 0x0a	; 10
     9a2:	0f b6       	in	r0, 0x3f	; 63
     9a4:	f8 94       	cli
     9a6:	9e bf       	out	0x3e, r25	; 62
     9a8:	0f be       	out	0x3f, r0	; 63
     9aa:	8d bf       	out	0x3d, r24	; 61
     9ac:	ed b7       	in	r30, 0x3d	; 61
     9ae:	fe b7       	in	r31, 0x3e	; 62
     9b0:	31 96       	adiw	r30, 0x01	; 1
     9b2:	ad b7       	in	r26, 0x3d	; 61
     9b4:	be b7       	in	r27, 0x3e	; 62
     9b6:	12 96       	adiw	r26, 0x02	; 2
     9b8:	1c 93       	st	X, r17
     9ba:	0e 93       	st	-X, r16
     9bc:	11 97       	sbiw	r26, 0x01	; 1
     9be:	f3 82       	std	Z+3, r15	; 0x03
     9c0:	e2 82       	std	Z+2, r14	; 0x02
     9c2:	35 83       	std	Z+5, r19	; 0x05
     9c4:	24 83       	std	Z+4, r18	; 0x04
     9c6:	80 91 ba 00 	lds	r24, 0x00BA
     9ca:	90 91 bb 00 	lds	r25, 0x00BB
     9ce:	97 83       	std	Z+7, r25	; 0x07
     9d0:	86 83       	std	Z+6, r24	; 0x06
     9d2:	80 91 b8 00 	lds	r24, 0x00B8
     9d6:	90 91 b9 00 	lds	r25, 0x00B9
     9da:	91 87       	std	Z+9, r25	; 0x09
     9dc:	80 87       	std	Z+8, r24	; 0x08
     9de:	0e 94 95 05 	call	0xb2a	; 0xb2a <sprintf>

int second,minute,hour,day,date,month,year;

bool IsItPM(char hour_)
{
	if(hour_ & (AMPM))
     9e2:	80 91 bc 00 	lds	r24, 0x00BC
     9e6:	ed b7       	in	r30, 0x3d	; 61
     9e8:	fe b7       	in	r31, 0x3e	; 62
     9ea:	3a 96       	adiw	r30, 0x0a	; 10
     9ec:	0f b6       	in	r0, 0x3f	; 63
     9ee:	f8 94       	cli
     9f0:	fe bf       	out	0x3e, r31	; 62
     9f2:	0f be       	out	0x3f, r0	; 63
     9f4:	ed bf       	out	0x3d, r30	; 61
     9f6:	85 ff       	sbrs	r24, 5
     9f8:	89 c0       	rjmp	.+274    	; 0xb0c <main+0x1e6>
		RTC_Read_Clock(0);	/* Read clock with second add. i.e location is 0 */
		if (hour & TimeFormat12)	
		{
			sprintf(buffer, "%02x:%02x:%02x  ", (hour & 0b00011111), minute, second);
			if(IsItPM(hour))
			strcat(buffer, "PM");
     9fa:	c8 01       	movw	r24, r16
     9fc:	61 e7       	ldi	r22, 0x71	; 113
     9fe:	70 e0       	ldi	r23, 0x00	; 0
     a00:	0e 94 8a 05 	call	0xb14	; 0xb14 <strcat>
     a04:	2b c0       	rjmp	.+86     	; 0xa5c <main+0x136>
			Lcd4_Write_String(buffer);
		}
		
		else
		{
			sprintf(buffer, "%02x:%02x:%02x  ", (hour & 0b00011111), minute, second);
     a06:	8d b7       	in	r24, 0x3d	; 61
     a08:	9e b7       	in	r25, 0x3e	; 62
     a0a:	0a 97       	sbiw	r24, 0x0a	; 10
     a0c:	0f b6       	in	r0, 0x3f	; 63
     a0e:	f8 94       	cli
     a10:	9e bf       	out	0x3e, r25	; 62
     a12:	0f be       	out	0x3f, r0	; 63
     a14:	8d bf       	out	0x3d, r24	; 61
     a16:	ed b7       	in	r30, 0x3d	; 61
     a18:	fe b7       	in	r31, 0x3e	; 62
     a1a:	31 96       	adiw	r30, 0x01	; 1
     a1c:	ad b7       	in	r26, 0x3d	; 61
     a1e:	be b7       	in	r27, 0x3e	; 62
     a20:	12 96       	adiw	r26, 0x02	; 2
     a22:	1c 93       	st	X, r17
     a24:	0e 93       	st	-X, r16
     a26:	11 97       	sbiw	r26, 0x01	; 1
     a28:	f3 82       	std	Z+3, r15	; 0x03
     a2a:	e2 82       	std	Z+2, r14	; 0x02
     a2c:	35 83       	std	Z+5, r19	; 0x05
     a2e:	24 83       	std	Z+4, r18	; 0x04
     a30:	80 91 ba 00 	lds	r24, 0x00BA
     a34:	90 91 bb 00 	lds	r25, 0x00BB
     a38:	97 83       	std	Z+7, r25	; 0x07
     a3a:	86 83       	std	Z+6, r24	; 0x06
     a3c:	80 91 b8 00 	lds	r24, 0x00B8
     a40:	90 91 b9 00 	lds	r25, 0x00B9
     a44:	91 87       	std	Z+9, r25	; 0x09
     a46:	80 87       	std	Z+8, r24	; 0x08
     a48:	0e 94 95 05 	call	0xb2a	; 0xb2a <sprintf>
			Lcd4_Set_Cursor(1,1);
     a4c:	ed b7       	in	r30, 0x3d	; 61
     a4e:	fe b7       	in	r31, 0x3e	; 62
     a50:	3a 96       	adiw	r30, 0x0a	; 10
     a52:	0f b6       	in	r0, 0x3f	; 63
     a54:	f8 94       	cli
     a56:	fe bf       	out	0x3e, r31	; 62
     a58:	0f be       	out	0x3f, r0	; 63
     a5a:	ed bf       	out	0x3d, r30	; 61
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	61 e0       	ldi	r22, 0x01	; 1
     a60:	0e 94 82 03 	call	0x704	; 0x704 <Lcd4_Set_Cursor>
			Lcd4_Write_String(buffer);
     a64:	c8 01       	movw	r24, r16
     a66:	0e 94 07 04 	call	0x80e	; 0x80e <Lcd4_Write_String>
		}
		RTC_Read_Calendar(3);	/* Read calendar with day address i.e location is 3 */
     a6a:	83 e0       	ldi	r24, 0x03	; 3
     a6c:	0e 94 59 04 	call	0x8b2	; 0x8b2 <RTC_Read_Calendar>
		sprintf(buffer, "%02x/%02x/%02x %3s ", date, month, year,days[day-1]);
     a70:	2d b7       	in	r18, 0x3d	; 61
     a72:	3e b7       	in	r19, 0x3e	; 62
     a74:	2c 50       	subi	r18, 0x0C	; 12
     a76:	30 40       	sbci	r19, 0x00	; 0
     a78:	0f b6       	in	r0, 0x3f	; 63
     a7a:	f8 94       	cli
     a7c:	3e bf       	out	0x3e, r19	; 62
     a7e:	0f be       	out	0x3f, r0	; 63
     a80:	2d bf       	out	0x3d, r18	; 61
     a82:	ad b7       	in	r26, 0x3d	; 61
     a84:	be b7       	in	r27, 0x3e	; 62
     a86:	11 96       	adiw	r26, 0x01	; 1
     a88:	ed b7       	in	r30, 0x3d	; 61
     a8a:	fe b7       	in	r31, 0x3e	; 62
     a8c:	12 83       	std	Z+2, r17	; 0x02
     a8e:	01 83       	std	Z+1, r16	; 0x01
     a90:	13 96       	adiw	r26, 0x03	; 3
     a92:	bc 92       	st	X, r11
     a94:	ae 92       	st	-X, r10
     a96:	12 97       	sbiw	r26, 0x02	; 2
     a98:	80 91 c2 00 	lds	r24, 0x00C2
     a9c:	90 91 c3 00 	lds	r25, 0x00C3
     aa0:	15 96       	adiw	r26, 0x05	; 5
     aa2:	9c 93       	st	X, r25
     aa4:	8e 93       	st	-X, r24
     aa6:	14 97       	sbiw	r26, 0x04	; 4
     aa8:	80 91 b6 00 	lds	r24, 0x00B6
     aac:	90 91 b7 00 	lds	r25, 0x00B7
     ab0:	17 96       	adiw	r26, 0x07	; 7
     ab2:	9c 93       	st	X, r25
     ab4:	8e 93       	st	-X, r24
     ab6:	16 97       	sbiw	r26, 0x06	; 6
     ab8:	80 91 be 00 	lds	r24, 0x00BE
     abc:	90 91 bf 00 	lds	r25, 0x00BF
     ac0:	19 96       	adiw	r26, 0x09	; 9
     ac2:	9c 93       	st	X, r25
     ac4:	8e 93       	st	-X, r24
     ac6:	18 97       	sbiw	r26, 0x08	; 8
     ac8:	e0 91 c0 00 	lds	r30, 0x00C0
     acc:	f0 91 c1 00 	lds	r31, 0x00C1
     ad0:	31 97       	sbiw	r30, 0x01	; 1
     ad2:	ee 0f       	add	r30, r30
     ad4:	ff 1f       	adc	r31, r31
     ad6:	ec 0d       	add	r30, r12
     ad8:	fd 1d       	adc	r31, r13
     ada:	80 81       	ld	r24, Z
     adc:	91 81       	ldd	r25, Z+1	; 0x01
     ade:	1b 96       	adiw	r26, 0x0b	; 11
     ae0:	9c 93       	st	X, r25
     ae2:	8e 93       	st	-X, r24
     ae4:	1a 97       	sbiw	r26, 0x0a	; 10
     ae6:	0e 94 95 05 	call	0xb2a	; 0xb2a <sprintf>
		Lcd4_Set_Cursor(2,1);
     aea:	2d b7       	in	r18, 0x3d	; 61
     aec:	3e b7       	in	r19, 0x3e	; 62
     aee:	24 5f       	subi	r18, 0xF4	; 244
     af0:	3f 4f       	sbci	r19, 0xFF	; 255
     af2:	0f b6       	in	r0, 0x3f	; 63
     af4:	f8 94       	cli
     af6:	3e bf       	out	0x3e, r19	; 62
     af8:	0f be       	out	0x3f, r0	; 63
     afa:	2d bf       	out	0x3d, r18	; 61
     afc:	82 e0       	ldi	r24, 0x02	; 2
     afe:	61 e0       	ldi	r22, 0x01	; 1
     b00:	0e 94 82 03 	call	0x704	; 0x704 <Lcd4_Set_Cursor>
			Lcd4_Write_String(buffer);
     b04:	c8 01       	movw	r24, r16
     b06:	0e 94 07 04 	call	0x80e	; 0x80e <Lcd4_Write_String>
     b0a:	3c cf       	rjmp	.-392    	; 0x984 <main+0x5e>
		{
			sprintf(buffer, "%02x:%02x:%02x  ", (hour & 0b00011111), minute, second);
			if(IsItPM(hour))
			strcat(buffer, "PM");
			else
			strcat(buffer, "AM");
     b0c:	c8 01       	movw	r24, r16
     b0e:	68 e8       	ldi	r22, 0x88	; 136
     b10:	70 e0       	ldi	r23, 0x00	; 0
     b12:	76 cf       	rjmp	.-276    	; 0xa00 <main+0xda>

00000b14 <strcat>:
     b14:	fb 01       	movw	r30, r22
     b16:	dc 01       	movw	r26, r24
     b18:	0d 90       	ld	r0, X+
     b1a:	00 20       	and	r0, r0
     b1c:	e9 f7       	brne	.-6      	; 0xb18 <strcat+0x4>
     b1e:	11 97       	sbiw	r26, 0x01	; 1
     b20:	01 90       	ld	r0, Z+
     b22:	0d 92       	st	X+, r0
     b24:	00 20       	and	r0, r0
     b26:	e1 f7       	brne	.-8      	; 0xb20 <strcat+0xc>
     b28:	08 95       	ret

00000b2a <sprintf>:
     b2a:	ae e0       	ldi	r26, 0x0E	; 14
     b2c:	b0 e0       	ldi	r27, 0x00	; 0
     b2e:	eb e9       	ldi	r30, 0x9B	; 155
     b30:	f5 e0       	ldi	r31, 0x05	; 5
     b32:	0c 94 44 08 	jmp	0x1088	; 0x1088 <__prologue_saves__+0x1c>
     b36:	0d 89       	ldd	r16, Y+21	; 0x15
     b38:	1e 89       	ldd	r17, Y+22	; 0x16
     b3a:	86 e0       	ldi	r24, 0x06	; 6
     b3c:	8c 83       	std	Y+4, r24	; 0x04
     b3e:	1a 83       	std	Y+2, r17	; 0x02
     b40:	09 83       	std	Y+1, r16	; 0x01
     b42:	8f ef       	ldi	r24, 0xFF	; 255
     b44:	9f e7       	ldi	r25, 0x7F	; 127
     b46:	9e 83       	std	Y+6, r25	; 0x06
     b48:	8d 83       	std	Y+5, r24	; 0x05
     b4a:	9e 01       	movw	r18, r28
     b4c:	27 5e       	subi	r18, 0xE7	; 231
     b4e:	3f 4f       	sbci	r19, 0xFF	; 255
     b50:	ce 01       	movw	r24, r28
     b52:	01 96       	adiw	r24, 0x01	; 1
     b54:	6f 89       	ldd	r22, Y+23	; 0x17
     b56:	78 8d       	ldd	r23, Y+24	; 0x18
     b58:	a9 01       	movw	r20, r18
     b5a:	0e 94 b9 05 	call	0xb72	; 0xb72 <vfprintf>
     b5e:	2f 81       	ldd	r18, Y+7	; 0x07
     b60:	38 85       	ldd	r19, Y+8	; 0x08
     b62:	02 0f       	add	r16, r18
     b64:	13 1f       	adc	r17, r19
     b66:	f8 01       	movw	r30, r16
     b68:	10 82       	st	Z, r1
     b6a:	2e 96       	adiw	r28, 0x0e	; 14
     b6c:	e4 e0       	ldi	r30, 0x04	; 4
     b6e:	0c 94 60 08 	jmp	0x10c0	; 0x10c0 <__epilogue_restores__+0x1c>

00000b72 <vfprintf>:
     b72:	ab e0       	ldi	r26, 0x0B	; 11
     b74:	b0 e0       	ldi	r27, 0x00	; 0
     b76:	ef eb       	ldi	r30, 0xBF	; 191
     b78:	f5 e0       	ldi	r31, 0x05	; 5
     b7a:	0c 94 36 08 	jmp	0x106c	; 0x106c <__prologue_saves__>
     b7e:	3c 01       	movw	r6, r24
     b80:	2b 01       	movw	r4, r22
     b82:	5a 01       	movw	r10, r20
     b84:	fc 01       	movw	r30, r24
     b86:	17 82       	std	Z+7, r1	; 0x07
     b88:	16 82       	std	Z+6, r1	; 0x06
     b8a:	83 81       	ldd	r24, Z+3	; 0x03
     b8c:	81 fd       	sbrc	r24, 1
     b8e:	03 c0       	rjmp	.+6      	; 0xb96 <vfprintf+0x24>
     b90:	6f ef       	ldi	r22, 0xFF	; 255
     b92:	7f ef       	ldi	r23, 0xFF	; 255
     b94:	c6 c1       	rjmp	.+908    	; 0xf22 <vfprintf+0x3b0>
     b96:	9a e0       	ldi	r25, 0x0A	; 10
     b98:	89 2e       	mov	r8, r25
     b9a:	1e 01       	movw	r2, r28
     b9c:	08 94       	sec
     b9e:	21 1c       	adc	r2, r1
     ba0:	31 1c       	adc	r3, r1
     ba2:	f3 01       	movw	r30, r6
     ba4:	23 81       	ldd	r18, Z+3	; 0x03
     ba6:	f2 01       	movw	r30, r4
     ba8:	23 fd       	sbrc	r18, 3
     baa:	85 91       	lpm	r24, Z+
     bac:	23 ff       	sbrs	r18, 3
     bae:	81 91       	ld	r24, Z+
     bb0:	2f 01       	movw	r4, r30
     bb2:	88 23       	and	r24, r24
     bb4:	09 f4       	brne	.+2      	; 0xbb8 <vfprintf+0x46>
     bb6:	b2 c1       	rjmp	.+868    	; 0xf1c <vfprintf+0x3aa>
     bb8:	85 32       	cpi	r24, 0x25	; 37
     bba:	39 f4       	brne	.+14     	; 0xbca <vfprintf+0x58>
     bbc:	23 fd       	sbrc	r18, 3
     bbe:	85 91       	lpm	r24, Z+
     bc0:	23 ff       	sbrs	r18, 3
     bc2:	81 91       	ld	r24, Z+
     bc4:	2f 01       	movw	r4, r30
     bc6:	85 32       	cpi	r24, 0x25	; 37
     bc8:	29 f4       	brne	.+10     	; 0xbd4 <vfprintf+0x62>
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	b3 01       	movw	r22, r6
     bce:	0e 94 ac 07 	call	0xf58	; 0xf58 <fputc>
     bd2:	e7 cf       	rjmp	.-50     	; 0xba2 <vfprintf+0x30>
     bd4:	98 2f       	mov	r25, r24
     bd6:	ff 24       	eor	r15, r15
     bd8:	ee 24       	eor	r14, r14
     bda:	99 24       	eor	r9, r9
     bdc:	ff e1       	ldi	r31, 0x1F	; 31
     bde:	ff 15       	cp	r31, r15
     be0:	d0 f0       	brcs	.+52     	; 0xc16 <vfprintf+0xa4>
     be2:	9b 32       	cpi	r25, 0x2B	; 43
     be4:	69 f0       	breq	.+26     	; 0xc00 <vfprintf+0x8e>
     be6:	9c 32       	cpi	r25, 0x2C	; 44
     be8:	28 f4       	brcc	.+10     	; 0xbf4 <vfprintf+0x82>
     bea:	90 32       	cpi	r25, 0x20	; 32
     bec:	59 f0       	breq	.+22     	; 0xc04 <vfprintf+0x92>
     bee:	93 32       	cpi	r25, 0x23	; 35
     bf0:	91 f4       	brne	.+36     	; 0xc16 <vfprintf+0xa4>
     bf2:	0e c0       	rjmp	.+28     	; 0xc10 <vfprintf+0x9e>
     bf4:	9d 32       	cpi	r25, 0x2D	; 45
     bf6:	49 f0       	breq	.+18     	; 0xc0a <vfprintf+0x98>
     bf8:	90 33       	cpi	r25, 0x30	; 48
     bfa:	69 f4       	brne	.+26     	; 0xc16 <vfprintf+0xa4>
     bfc:	41 e0       	ldi	r20, 0x01	; 1
     bfe:	24 c0       	rjmp	.+72     	; 0xc48 <vfprintf+0xd6>
     c00:	52 e0       	ldi	r21, 0x02	; 2
     c02:	f5 2a       	or	r15, r21
     c04:	84 e0       	ldi	r24, 0x04	; 4
     c06:	f8 2a       	or	r15, r24
     c08:	28 c0       	rjmp	.+80     	; 0xc5a <vfprintf+0xe8>
     c0a:	98 e0       	ldi	r25, 0x08	; 8
     c0c:	f9 2a       	or	r15, r25
     c0e:	25 c0       	rjmp	.+74     	; 0xc5a <vfprintf+0xe8>
     c10:	e0 e1       	ldi	r30, 0x10	; 16
     c12:	fe 2a       	or	r15, r30
     c14:	22 c0       	rjmp	.+68     	; 0xc5a <vfprintf+0xe8>
     c16:	f7 fc       	sbrc	r15, 7
     c18:	29 c0       	rjmp	.+82     	; 0xc6c <vfprintf+0xfa>
     c1a:	89 2f       	mov	r24, r25
     c1c:	80 53       	subi	r24, 0x30	; 48
     c1e:	8a 30       	cpi	r24, 0x0A	; 10
     c20:	70 f4       	brcc	.+28     	; 0xc3e <vfprintf+0xcc>
     c22:	f6 fe       	sbrs	r15, 6
     c24:	05 c0       	rjmp	.+10     	; 0xc30 <vfprintf+0xbe>
     c26:	98 9c       	mul	r9, r8
     c28:	90 2c       	mov	r9, r0
     c2a:	11 24       	eor	r1, r1
     c2c:	98 0e       	add	r9, r24
     c2e:	15 c0       	rjmp	.+42     	; 0xc5a <vfprintf+0xe8>
     c30:	e8 9c       	mul	r14, r8
     c32:	e0 2c       	mov	r14, r0
     c34:	11 24       	eor	r1, r1
     c36:	e8 0e       	add	r14, r24
     c38:	f0 e2       	ldi	r31, 0x20	; 32
     c3a:	ff 2a       	or	r15, r31
     c3c:	0e c0       	rjmp	.+28     	; 0xc5a <vfprintf+0xe8>
     c3e:	9e 32       	cpi	r25, 0x2E	; 46
     c40:	29 f4       	brne	.+10     	; 0xc4c <vfprintf+0xda>
     c42:	f6 fc       	sbrc	r15, 6
     c44:	6b c1       	rjmp	.+726    	; 0xf1c <vfprintf+0x3aa>
     c46:	40 e4       	ldi	r20, 0x40	; 64
     c48:	f4 2a       	or	r15, r20
     c4a:	07 c0       	rjmp	.+14     	; 0xc5a <vfprintf+0xe8>
     c4c:	9c 36       	cpi	r25, 0x6C	; 108
     c4e:	19 f4       	brne	.+6      	; 0xc56 <vfprintf+0xe4>
     c50:	50 e8       	ldi	r21, 0x80	; 128
     c52:	f5 2a       	or	r15, r21
     c54:	02 c0       	rjmp	.+4      	; 0xc5a <vfprintf+0xe8>
     c56:	98 36       	cpi	r25, 0x68	; 104
     c58:	49 f4       	brne	.+18     	; 0xc6c <vfprintf+0xfa>
     c5a:	f2 01       	movw	r30, r4
     c5c:	23 fd       	sbrc	r18, 3
     c5e:	95 91       	lpm	r25, Z+
     c60:	23 ff       	sbrs	r18, 3
     c62:	91 91       	ld	r25, Z+
     c64:	2f 01       	movw	r4, r30
     c66:	99 23       	and	r25, r25
     c68:	09 f0       	breq	.+2      	; 0xc6c <vfprintf+0xfa>
     c6a:	b8 cf       	rjmp	.-144    	; 0xbdc <vfprintf+0x6a>
     c6c:	89 2f       	mov	r24, r25
     c6e:	85 54       	subi	r24, 0x45	; 69
     c70:	83 30       	cpi	r24, 0x03	; 3
     c72:	18 f0       	brcs	.+6      	; 0xc7a <vfprintf+0x108>
     c74:	80 52       	subi	r24, 0x20	; 32
     c76:	83 30       	cpi	r24, 0x03	; 3
     c78:	38 f4       	brcc	.+14     	; 0xc88 <vfprintf+0x116>
     c7a:	44 e0       	ldi	r20, 0x04	; 4
     c7c:	50 e0       	ldi	r21, 0x00	; 0
     c7e:	a4 0e       	add	r10, r20
     c80:	b5 1e       	adc	r11, r21
     c82:	5f e3       	ldi	r21, 0x3F	; 63
     c84:	59 83       	std	Y+1, r21	; 0x01
     c86:	0f c0       	rjmp	.+30     	; 0xca6 <vfprintf+0x134>
     c88:	93 36       	cpi	r25, 0x63	; 99
     c8a:	31 f0       	breq	.+12     	; 0xc98 <vfprintf+0x126>
     c8c:	93 37       	cpi	r25, 0x73	; 115
     c8e:	79 f0       	breq	.+30     	; 0xcae <vfprintf+0x13c>
     c90:	93 35       	cpi	r25, 0x53	; 83
     c92:	09 f0       	breq	.+2      	; 0xc96 <vfprintf+0x124>
     c94:	56 c0       	rjmp	.+172    	; 0xd42 <vfprintf+0x1d0>
     c96:	20 c0       	rjmp	.+64     	; 0xcd8 <vfprintf+0x166>
     c98:	f5 01       	movw	r30, r10
     c9a:	80 81       	ld	r24, Z
     c9c:	89 83       	std	Y+1, r24	; 0x01
     c9e:	42 e0       	ldi	r20, 0x02	; 2
     ca0:	50 e0       	ldi	r21, 0x00	; 0
     ca2:	a4 0e       	add	r10, r20
     ca4:	b5 1e       	adc	r11, r21
     ca6:	61 01       	movw	r12, r2
     ca8:	01 e0       	ldi	r16, 0x01	; 1
     caa:	10 e0       	ldi	r17, 0x00	; 0
     cac:	12 c0       	rjmp	.+36     	; 0xcd2 <vfprintf+0x160>
     cae:	f5 01       	movw	r30, r10
     cb0:	c0 80       	ld	r12, Z
     cb2:	d1 80       	ldd	r13, Z+1	; 0x01
     cb4:	f6 fc       	sbrc	r15, 6
     cb6:	03 c0       	rjmp	.+6      	; 0xcbe <vfprintf+0x14c>
     cb8:	6f ef       	ldi	r22, 0xFF	; 255
     cba:	7f ef       	ldi	r23, 0xFF	; 255
     cbc:	02 c0       	rjmp	.+4      	; 0xcc2 <vfprintf+0x150>
     cbe:	69 2d       	mov	r22, r9
     cc0:	70 e0       	ldi	r23, 0x00	; 0
     cc2:	42 e0       	ldi	r20, 0x02	; 2
     cc4:	50 e0       	ldi	r21, 0x00	; 0
     cc6:	a4 0e       	add	r10, r20
     cc8:	b5 1e       	adc	r11, r21
     cca:	c6 01       	movw	r24, r12
     ccc:	0e 94 a1 07 	call	0xf42	; 0xf42 <strnlen>
     cd0:	8c 01       	movw	r16, r24
     cd2:	5f e7       	ldi	r21, 0x7F	; 127
     cd4:	f5 22       	and	r15, r21
     cd6:	14 c0       	rjmp	.+40     	; 0xd00 <vfprintf+0x18e>
     cd8:	f5 01       	movw	r30, r10
     cda:	c0 80       	ld	r12, Z
     cdc:	d1 80       	ldd	r13, Z+1	; 0x01
     cde:	f6 fc       	sbrc	r15, 6
     ce0:	03 c0       	rjmp	.+6      	; 0xce8 <vfprintf+0x176>
     ce2:	6f ef       	ldi	r22, 0xFF	; 255
     ce4:	7f ef       	ldi	r23, 0xFF	; 255
     ce6:	02 c0       	rjmp	.+4      	; 0xcec <vfprintf+0x17a>
     ce8:	69 2d       	mov	r22, r9
     cea:	70 e0       	ldi	r23, 0x00	; 0
     cec:	42 e0       	ldi	r20, 0x02	; 2
     cee:	50 e0       	ldi	r21, 0x00	; 0
     cf0:	a4 0e       	add	r10, r20
     cf2:	b5 1e       	adc	r11, r21
     cf4:	c6 01       	movw	r24, r12
     cf6:	0e 94 96 07 	call	0xf2c	; 0xf2c <strnlen_P>
     cfa:	8c 01       	movw	r16, r24
     cfc:	50 e8       	ldi	r21, 0x80	; 128
     cfe:	f5 2a       	or	r15, r21
     d00:	f3 fe       	sbrs	r15, 3
     d02:	07 c0       	rjmp	.+14     	; 0xd12 <vfprintf+0x1a0>
     d04:	1a c0       	rjmp	.+52     	; 0xd3a <vfprintf+0x1c8>
     d06:	80 e2       	ldi	r24, 0x20	; 32
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	b3 01       	movw	r22, r6
     d0c:	0e 94 ac 07 	call	0xf58	; 0xf58 <fputc>
     d10:	ea 94       	dec	r14
     d12:	8e 2d       	mov	r24, r14
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	08 17       	cp	r16, r24
     d18:	19 07       	cpc	r17, r25
     d1a:	a8 f3       	brcs	.-22     	; 0xd06 <vfprintf+0x194>
     d1c:	0e c0       	rjmp	.+28     	; 0xd3a <vfprintf+0x1c8>
     d1e:	f6 01       	movw	r30, r12
     d20:	f7 fc       	sbrc	r15, 7
     d22:	85 91       	lpm	r24, Z+
     d24:	f7 fe       	sbrs	r15, 7
     d26:	81 91       	ld	r24, Z+
     d28:	6f 01       	movw	r12, r30
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	b3 01       	movw	r22, r6
     d2e:	0e 94 ac 07 	call	0xf58	; 0xf58 <fputc>
     d32:	e1 10       	cpse	r14, r1
     d34:	ea 94       	dec	r14
     d36:	01 50       	subi	r16, 0x01	; 1
     d38:	10 40       	sbci	r17, 0x00	; 0
     d3a:	01 15       	cp	r16, r1
     d3c:	11 05       	cpc	r17, r1
     d3e:	79 f7       	brne	.-34     	; 0xd1e <vfprintf+0x1ac>
     d40:	ea c0       	rjmp	.+468    	; 0xf16 <vfprintf+0x3a4>
     d42:	94 36       	cpi	r25, 0x64	; 100
     d44:	11 f0       	breq	.+4      	; 0xd4a <vfprintf+0x1d8>
     d46:	99 36       	cpi	r25, 0x69	; 105
     d48:	69 f5       	brne	.+90     	; 0xda4 <vfprintf+0x232>
     d4a:	f7 fe       	sbrs	r15, 7
     d4c:	08 c0       	rjmp	.+16     	; 0xd5e <vfprintf+0x1ec>
     d4e:	f5 01       	movw	r30, r10
     d50:	20 81       	ld	r18, Z
     d52:	31 81       	ldd	r19, Z+1	; 0x01
     d54:	42 81       	ldd	r20, Z+2	; 0x02
     d56:	53 81       	ldd	r21, Z+3	; 0x03
     d58:	84 e0       	ldi	r24, 0x04	; 4
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	0a c0       	rjmp	.+20     	; 0xd72 <vfprintf+0x200>
     d5e:	f5 01       	movw	r30, r10
     d60:	80 81       	ld	r24, Z
     d62:	91 81       	ldd	r25, Z+1	; 0x01
     d64:	9c 01       	movw	r18, r24
     d66:	44 27       	eor	r20, r20
     d68:	37 fd       	sbrc	r19, 7
     d6a:	40 95       	com	r20
     d6c:	54 2f       	mov	r21, r20
     d6e:	82 e0       	ldi	r24, 0x02	; 2
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	a8 0e       	add	r10, r24
     d74:	b9 1e       	adc	r11, r25
     d76:	9f e6       	ldi	r25, 0x6F	; 111
     d78:	f9 22       	and	r15, r25
     d7a:	57 ff       	sbrs	r21, 7
     d7c:	09 c0       	rjmp	.+18     	; 0xd90 <vfprintf+0x21e>
     d7e:	50 95       	com	r21
     d80:	40 95       	com	r20
     d82:	30 95       	com	r19
     d84:	21 95       	neg	r18
     d86:	3f 4f       	sbci	r19, 0xFF	; 255
     d88:	4f 4f       	sbci	r20, 0xFF	; 255
     d8a:	5f 4f       	sbci	r21, 0xFF	; 255
     d8c:	e0 e8       	ldi	r30, 0x80	; 128
     d8e:	fe 2a       	or	r15, r30
     d90:	ca 01       	movw	r24, r20
     d92:	b9 01       	movw	r22, r18
     d94:	a1 01       	movw	r20, r2
     d96:	2a e0       	ldi	r18, 0x0A	; 10
     d98:	30 e0       	ldi	r19, 0x00	; 0
     d9a:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <__ultoa_invert>
     d9e:	d8 2e       	mov	r13, r24
     da0:	d2 18       	sub	r13, r2
     da2:	40 c0       	rjmp	.+128    	; 0xe24 <vfprintf+0x2b2>
     da4:	95 37       	cpi	r25, 0x75	; 117
     da6:	29 f4       	brne	.+10     	; 0xdb2 <vfprintf+0x240>
     da8:	1f 2d       	mov	r17, r15
     daa:	1f 7e       	andi	r17, 0xEF	; 239
     dac:	2a e0       	ldi	r18, 0x0A	; 10
     dae:	30 e0       	ldi	r19, 0x00	; 0
     db0:	1d c0       	rjmp	.+58     	; 0xdec <vfprintf+0x27a>
     db2:	1f 2d       	mov	r17, r15
     db4:	19 7f       	andi	r17, 0xF9	; 249
     db6:	9f 36       	cpi	r25, 0x6F	; 111
     db8:	61 f0       	breq	.+24     	; 0xdd2 <vfprintf+0x260>
     dba:	90 37       	cpi	r25, 0x70	; 112
     dbc:	20 f4       	brcc	.+8      	; 0xdc6 <vfprintf+0x254>
     dbe:	98 35       	cpi	r25, 0x58	; 88
     dc0:	09 f0       	breq	.+2      	; 0xdc4 <vfprintf+0x252>
     dc2:	ac c0       	rjmp	.+344    	; 0xf1c <vfprintf+0x3aa>
     dc4:	0f c0       	rjmp	.+30     	; 0xde4 <vfprintf+0x272>
     dc6:	90 37       	cpi	r25, 0x70	; 112
     dc8:	39 f0       	breq	.+14     	; 0xdd8 <vfprintf+0x266>
     dca:	98 37       	cpi	r25, 0x78	; 120
     dcc:	09 f0       	breq	.+2      	; 0xdd0 <vfprintf+0x25e>
     dce:	a6 c0       	rjmp	.+332    	; 0xf1c <vfprintf+0x3aa>
     dd0:	04 c0       	rjmp	.+8      	; 0xdda <vfprintf+0x268>
     dd2:	28 e0       	ldi	r18, 0x08	; 8
     dd4:	30 e0       	ldi	r19, 0x00	; 0
     dd6:	0a c0       	rjmp	.+20     	; 0xdec <vfprintf+0x27a>
     dd8:	10 61       	ori	r17, 0x10	; 16
     dda:	14 fd       	sbrc	r17, 4
     ddc:	14 60       	ori	r17, 0x04	; 4
     dde:	20 e1       	ldi	r18, 0x10	; 16
     de0:	30 e0       	ldi	r19, 0x00	; 0
     de2:	04 c0       	rjmp	.+8      	; 0xdec <vfprintf+0x27a>
     de4:	14 fd       	sbrc	r17, 4
     de6:	16 60       	ori	r17, 0x06	; 6
     de8:	20 e1       	ldi	r18, 0x10	; 16
     dea:	32 e0       	ldi	r19, 0x02	; 2
     dec:	17 ff       	sbrs	r17, 7
     dee:	08 c0       	rjmp	.+16     	; 0xe00 <vfprintf+0x28e>
     df0:	f5 01       	movw	r30, r10
     df2:	60 81       	ld	r22, Z
     df4:	71 81       	ldd	r23, Z+1	; 0x01
     df6:	82 81       	ldd	r24, Z+2	; 0x02
     df8:	93 81       	ldd	r25, Z+3	; 0x03
     dfa:	44 e0       	ldi	r20, 0x04	; 4
     dfc:	50 e0       	ldi	r21, 0x00	; 0
     dfe:	08 c0       	rjmp	.+16     	; 0xe10 <vfprintf+0x29e>
     e00:	f5 01       	movw	r30, r10
     e02:	80 81       	ld	r24, Z
     e04:	91 81       	ldd	r25, Z+1	; 0x01
     e06:	bc 01       	movw	r22, r24
     e08:	80 e0       	ldi	r24, 0x00	; 0
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	42 e0       	ldi	r20, 0x02	; 2
     e0e:	50 e0       	ldi	r21, 0x00	; 0
     e10:	a4 0e       	add	r10, r20
     e12:	b5 1e       	adc	r11, r21
     e14:	a1 01       	movw	r20, r2
     e16:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <__ultoa_invert>
     e1a:	d8 2e       	mov	r13, r24
     e1c:	d2 18       	sub	r13, r2
     e1e:	8f e7       	ldi	r24, 0x7F	; 127
     e20:	f8 2e       	mov	r15, r24
     e22:	f1 22       	and	r15, r17
     e24:	f6 fe       	sbrs	r15, 6
     e26:	0b c0       	rjmp	.+22     	; 0xe3e <vfprintf+0x2cc>
     e28:	5e ef       	ldi	r21, 0xFE	; 254
     e2a:	f5 22       	and	r15, r21
     e2c:	d9 14       	cp	r13, r9
     e2e:	38 f4       	brcc	.+14     	; 0xe3e <vfprintf+0x2cc>
     e30:	f4 fe       	sbrs	r15, 4
     e32:	07 c0       	rjmp	.+14     	; 0xe42 <vfprintf+0x2d0>
     e34:	f2 fc       	sbrc	r15, 2
     e36:	05 c0       	rjmp	.+10     	; 0xe42 <vfprintf+0x2d0>
     e38:	8f ee       	ldi	r24, 0xEF	; 239
     e3a:	f8 22       	and	r15, r24
     e3c:	02 c0       	rjmp	.+4      	; 0xe42 <vfprintf+0x2d0>
     e3e:	1d 2d       	mov	r17, r13
     e40:	01 c0       	rjmp	.+2      	; 0xe44 <vfprintf+0x2d2>
     e42:	19 2d       	mov	r17, r9
     e44:	f4 fe       	sbrs	r15, 4
     e46:	0d c0       	rjmp	.+26     	; 0xe62 <vfprintf+0x2f0>
     e48:	fe 01       	movw	r30, r28
     e4a:	ed 0d       	add	r30, r13
     e4c:	f1 1d       	adc	r31, r1
     e4e:	80 81       	ld	r24, Z
     e50:	80 33       	cpi	r24, 0x30	; 48
     e52:	19 f4       	brne	.+6      	; 0xe5a <vfprintf+0x2e8>
     e54:	99 ee       	ldi	r25, 0xE9	; 233
     e56:	f9 22       	and	r15, r25
     e58:	08 c0       	rjmp	.+16     	; 0xe6a <vfprintf+0x2f8>
     e5a:	1f 5f       	subi	r17, 0xFF	; 255
     e5c:	f2 fe       	sbrs	r15, 2
     e5e:	05 c0       	rjmp	.+10     	; 0xe6a <vfprintf+0x2f8>
     e60:	03 c0       	rjmp	.+6      	; 0xe68 <vfprintf+0x2f6>
     e62:	8f 2d       	mov	r24, r15
     e64:	86 78       	andi	r24, 0x86	; 134
     e66:	09 f0       	breq	.+2      	; 0xe6a <vfprintf+0x2f8>
     e68:	1f 5f       	subi	r17, 0xFF	; 255
     e6a:	0f 2d       	mov	r16, r15
     e6c:	f3 fc       	sbrc	r15, 3
     e6e:	14 c0       	rjmp	.+40     	; 0xe98 <vfprintf+0x326>
     e70:	f0 fe       	sbrs	r15, 0
     e72:	0f c0       	rjmp	.+30     	; 0xe92 <vfprintf+0x320>
     e74:	1e 15       	cp	r17, r14
     e76:	10 f0       	brcs	.+4      	; 0xe7c <vfprintf+0x30a>
     e78:	9d 2c       	mov	r9, r13
     e7a:	0b c0       	rjmp	.+22     	; 0xe92 <vfprintf+0x320>
     e7c:	9d 2c       	mov	r9, r13
     e7e:	9e 0c       	add	r9, r14
     e80:	91 1a       	sub	r9, r17
     e82:	1e 2d       	mov	r17, r14
     e84:	06 c0       	rjmp	.+12     	; 0xe92 <vfprintf+0x320>
     e86:	80 e2       	ldi	r24, 0x20	; 32
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	b3 01       	movw	r22, r6
     e8c:	0e 94 ac 07 	call	0xf58	; 0xf58 <fputc>
     e90:	1f 5f       	subi	r17, 0xFF	; 255
     e92:	1e 15       	cp	r17, r14
     e94:	c0 f3       	brcs	.-16     	; 0xe86 <vfprintf+0x314>
     e96:	04 c0       	rjmp	.+8      	; 0xea0 <vfprintf+0x32e>
     e98:	1e 15       	cp	r17, r14
     e9a:	10 f4       	brcc	.+4      	; 0xea0 <vfprintf+0x32e>
     e9c:	e1 1a       	sub	r14, r17
     e9e:	01 c0       	rjmp	.+2      	; 0xea2 <vfprintf+0x330>
     ea0:	ee 24       	eor	r14, r14
     ea2:	04 ff       	sbrs	r16, 4
     ea4:	0f c0       	rjmp	.+30     	; 0xec4 <vfprintf+0x352>
     ea6:	80 e3       	ldi	r24, 0x30	; 48
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	b3 01       	movw	r22, r6
     eac:	0e 94 ac 07 	call	0xf58	; 0xf58 <fputc>
     eb0:	02 ff       	sbrs	r16, 2
     eb2:	1d c0       	rjmp	.+58     	; 0xeee <vfprintf+0x37c>
     eb4:	01 fd       	sbrc	r16, 1
     eb6:	03 c0       	rjmp	.+6      	; 0xebe <vfprintf+0x34c>
     eb8:	88 e7       	ldi	r24, 0x78	; 120
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	0e c0       	rjmp	.+28     	; 0xeda <vfprintf+0x368>
     ebe:	88 e5       	ldi	r24, 0x58	; 88
     ec0:	90 e0       	ldi	r25, 0x00	; 0
     ec2:	0b c0       	rjmp	.+22     	; 0xeda <vfprintf+0x368>
     ec4:	80 2f       	mov	r24, r16
     ec6:	86 78       	andi	r24, 0x86	; 134
     ec8:	91 f0       	breq	.+36     	; 0xeee <vfprintf+0x37c>
     eca:	01 ff       	sbrs	r16, 1
     ecc:	02 c0       	rjmp	.+4      	; 0xed2 <vfprintf+0x360>
     ece:	8b e2       	ldi	r24, 0x2B	; 43
     ed0:	01 c0       	rjmp	.+2      	; 0xed4 <vfprintf+0x362>
     ed2:	80 e2       	ldi	r24, 0x20	; 32
     ed4:	f7 fc       	sbrc	r15, 7
     ed6:	8d e2       	ldi	r24, 0x2D	; 45
     ed8:	90 e0       	ldi	r25, 0x00	; 0
     eda:	b3 01       	movw	r22, r6
     edc:	0e 94 ac 07 	call	0xf58	; 0xf58 <fputc>
     ee0:	06 c0       	rjmp	.+12     	; 0xeee <vfprintf+0x37c>
     ee2:	80 e3       	ldi	r24, 0x30	; 48
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	b3 01       	movw	r22, r6
     ee8:	0e 94 ac 07 	call	0xf58	; 0xf58 <fputc>
     eec:	9a 94       	dec	r9
     eee:	d9 14       	cp	r13, r9
     ef0:	c0 f3       	brcs	.-16     	; 0xee2 <vfprintf+0x370>
     ef2:	da 94       	dec	r13
     ef4:	f1 01       	movw	r30, r2
     ef6:	ed 0d       	add	r30, r13
     ef8:	f1 1d       	adc	r31, r1
     efa:	80 81       	ld	r24, Z
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	b3 01       	movw	r22, r6
     f00:	0e 94 ac 07 	call	0xf58	; 0xf58 <fputc>
     f04:	dd 20       	and	r13, r13
     f06:	a9 f7       	brne	.-22     	; 0xef2 <vfprintf+0x380>
     f08:	06 c0       	rjmp	.+12     	; 0xf16 <vfprintf+0x3a4>
     f0a:	80 e2       	ldi	r24, 0x20	; 32
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	b3 01       	movw	r22, r6
     f10:	0e 94 ac 07 	call	0xf58	; 0xf58 <fputc>
     f14:	ea 94       	dec	r14
     f16:	ee 20       	and	r14, r14
     f18:	c1 f7       	brne	.-16     	; 0xf0a <vfprintf+0x398>
     f1a:	43 ce       	rjmp	.-890    	; 0xba2 <vfprintf+0x30>
     f1c:	f3 01       	movw	r30, r6
     f1e:	66 81       	ldd	r22, Z+6	; 0x06
     f20:	77 81       	ldd	r23, Z+7	; 0x07
     f22:	cb 01       	movw	r24, r22
     f24:	2b 96       	adiw	r28, 0x0b	; 11
     f26:	e2 e1       	ldi	r30, 0x12	; 18
     f28:	0c 94 52 08 	jmp	0x10a4	; 0x10a4 <__epilogue_restores__>

00000f2c <strnlen_P>:
     f2c:	fc 01       	movw	r30, r24
     f2e:	05 90       	lpm	r0, Z+
     f30:	61 50       	subi	r22, 0x01	; 1
     f32:	70 40       	sbci	r23, 0x00	; 0
     f34:	01 10       	cpse	r0, r1
     f36:	d8 f7       	brcc	.-10     	; 0xf2e <strnlen_P+0x2>
     f38:	80 95       	com	r24
     f3a:	90 95       	com	r25
     f3c:	8e 0f       	add	r24, r30
     f3e:	9f 1f       	adc	r25, r31
     f40:	08 95       	ret

00000f42 <strnlen>:
     f42:	fc 01       	movw	r30, r24
     f44:	61 50       	subi	r22, 0x01	; 1
     f46:	70 40       	sbci	r23, 0x00	; 0
     f48:	01 90       	ld	r0, Z+
     f4a:	01 10       	cpse	r0, r1
     f4c:	d8 f7       	brcc	.-10     	; 0xf44 <strnlen+0x2>
     f4e:	80 95       	com	r24
     f50:	90 95       	com	r25
     f52:	8e 0f       	add	r24, r30
     f54:	9f 1f       	adc	r25, r31
     f56:	08 95       	ret

00000f58 <fputc>:
     f58:	0f 93       	push	r16
     f5a:	1f 93       	push	r17
     f5c:	cf 93       	push	r28
     f5e:	df 93       	push	r29
     f60:	8c 01       	movw	r16, r24
     f62:	eb 01       	movw	r28, r22
     f64:	8b 81       	ldd	r24, Y+3	; 0x03
     f66:	81 ff       	sbrs	r24, 1
     f68:	1b c0       	rjmp	.+54     	; 0xfa0 <fputc+0x48>
     f6a:	82 ff       	sbrs	r24, 2
     f6c:	0d c0       	rjmp	.+26     	; 0xf88 <fputc+0x30>
     f6e:	2e 81       	ldd	r18, Y+6	; 0x06
     f70:	3f 81       	ldd	r19, Y+7	; 0x07
     f72:	8c 81       	ldd	r24, Y+4	; 0x04
     f74:	9d 81       	ldd	r25, Y+5	; 0x05
     f76:	28 17       	cp	r18, r24
     f78:	39 07       	cpc	r19, r25
     f7a:	64 f4       	brge	.+24     	; 0xf94 <fputc+0x3c>
     f7c:	e8 81       	ld	r30, Y
     f7e:	f9 81       	ldd	r31, Y+1	; 0x01
     f80:	01 93       	st	Z+, r16
     f82:	f9 83       	std	Y+1, r31	; 0x01
     f84:	e8 83       	st	Y, r30
     f86:	06 c0       	rjmp	.+12     	; 0xf94 <fputc+0x3c>
     f88:	e8 85       	ldd	r30, Y+8	; 0x08
     f8a:	f9 85       	ldd	r31, Y+9	; 0x09
     f8c:	80 2f       	mov	r24, r16
     f8e:	09 95       	icall
     f90:	89 2b       	or	r24, r25
     f92:	31 f4       	brne	.+12     	; 0xfa0 <fputc+0x48>
     f94:	8e 81       	ldd	r24, Y+6	; 0x06
     f96:	9f 81       	ldd	r25, Y+7	; 0x07
     f98:	01 96       	adiw	r24, 0x01	; 1
     f9a:	9f 83       	std	Y+7, r25	; 0x07
     f9c:	8e 83       	std	Y+6, r24	; 0x06
     f9e:	02 c0       	rjmp	.+4      	; 0xfa4 <fputc+0x4c>
     fa0:	0f ef       	ldi	r16, 0xFF	; 255
     fa2:	1f ef       	ldi	r17, 0xFF	; 255
     fa4:	c8 01       	movw	r24, r16
     fa6:	df 91       	pop	r29
     fa8:	cf 91       	pop	r28
     faa:	1f 91       	pop	r17
     fac:	0f 91       	pop	r16
     fae:	08 95       	ret

00000fb0 <__ultoa_invert>:
     fb0:	fa 01       	movw	r30, r20
     fb2:	aa 27       	eor	r26, r26
     fb4:	28 30       	cpi	r18, 0x08	; 8
     fb6:	51 f1       	breq	.+84     	; 0x100c <__ultoa_invert+0x5c>
     fb8:	20 31       	cpi	r18, 0x10	; 16
     fba:	81 f1       	breq	.+96     	; 0x101c <__ultoa_invert+0x6c>
     fbc:	e8 94       	clt
     fbe:	6f 93       	push	r22
     fc0:	6e 7f       	andi	r22, 0xFE	; 254
     fc2:	6e 5f       	subi	r22, 0xFE	; 254
     fc4:	7f 4f       	sbci	r23, 0xFF	; 255
     fc6:	8f 4f       	sbci	r24, 0xFF	; 255
     fc8:	9f 4f       	sbci	r25, 0xFF	; 255
     fca:	af 4f       	sbci	r26, 0xFF	; 255
     fcc:	b1 e0       	ldi	r27, 0x01	; 1
     fce:	3e d0       	rcall	.+124    	; 0x104c <__ultoa_invert+0x9c>
     fd0:	b4 e0       	ldi	r27, 0x04	; 4
     fd2:	3c d0       	rcall	.+120    	; 0x104c <__ultoa_invert+0x9c>
     fd4:	67 0f       	add	r22, r23
     fd6:	78 1f       	adc	r23, r24
     fd8:	89 1f       	adc	r24, r25
     fda:	9a 1f       	adc	r25, r26
     fdc:	a1 1d       	adc	r26, r1
     fde:	68 0f       	add	r22, r24
     fe0:	79 1f       	adc	r23, r25
     fe2:	8a 1f       	adc	r24, r26
     fe4:	91 1d       	adc	r25, r1
     fe6:	a1 1d       	adc	r26, r1
     fe8:	6a 0f       	add	r22, r26
     fea:	71 1d       	adc	r23, r1
     fec:	81 1d       	adc	r24, r1
     fee:	91 1d       	adc	r25, r1
     ff0:	a1 1d       	adc	r26, r1
     ff2:	20 d0       	rcall	.+64     	; 0x1034 <__ultoa_invert+0x84>
     ff4:	09 f4       	brne	.+2      	; 0xff8 <__ultoa_invert+0x48>
     ff6:	68 94       	set
     ff8:	3f 91       	pop	r19
     ffa:	2a e0       	ldi	r18, 0x0A	; 10
     ffc:	26 9f       	mul	r18, r22
     ffe:	11 24       	eor	r1, r1
    1000:	30 19       	sub	r19, r0
    1002:	30 5d       	subi	r19, 0xD0	; 208
    1004:	31 93       	st	Z+, r19
    1006:	de f6       	brtc	.-74     	; 0xfbe <__ultoa_invert+0xe>
    1008:	cf 01       	movw	r24, r30
    100a:	08 95       	ret
    100c:	46 2f       	mov	r20, r22
    100e:	47 70       	andi	r20, 0x07	; 7
    1010:	40 5d       	subi	r20, 0xD0	; 208
    1012:	41 93       	st	Z+, r20
    1014:	b3 e0       	ldi	r27, 0x03	; 3
    1016:	0f d0       	rcall	.+30     	; 0x1036 <__ultoa_invert+0x86>
    1018:	c9 f7       	brne	.-14     	; 0x100c <__ultoa_invert+0x5c>
    101a:	f6 cf       	rjmp	.-20     	; 0x1008 <__ultoa_invert+0x58>
    101c:	46 2f       	mov	r20, r22
    101e:	4f 70       	andi	r20, 0x0F	; 15
    1020:	40 5d       	subi	r20, 0xD0	; 208
    1022:	4a 33       	cpi	r20, 0x3A	; 58
    1024:	18 f0       	brcs	.+6      	; 0x102c <__ultoa_invert+0x7c>
    1026:	49 5d       	subi	r20, 0xD9	; 217
    1028:	31 fd       	sbrc	r19, 1
    102a:	40 52       	subi	r20, 0x20	; 32
    102c:	41 93       	st	Z+, r20
    102e:	02 d0       	rcall	.+4      	; 0x1034 <__ultoa_invert+0x84>
    1030:	a9 f7       	brne	.-22     	; 0x101c <__ultoa_invert+0x6c>
    1032:	ea cf       	rjmp	.-44     	; 0x1008 <__ultoa_invert+0x58>
    1034:	b4 e0       	ldi	r27, 0x04	; 4
    1036:	a6 95       	lsr	r26
    1038:	97 95       	ror	r25
    103a:	87 95       	ror	r24
    103c:	77 95       	ror	r23
    103e:	67 95       	ror	r22
    1040:	ba 95       	dec	r27
    1042:	c9 f7       	brne	.-14     	; 0x1036 <__ultoa_invert+0x86>
    1044:	00 97       	sbiw	r24, 0x00	; 0
    1046:	61 05       	cpc	r22, r1
    1048:	71 05       	cpc	r23, r1
    104a:	08 95       	ret
    104c:	9b 01       	movw	r18, r22
    104e:	ac 01       	movw	r20, r24
    1050:	0a 2e       	mov	r0, r26
    1052:	06 94       	lsr	r0
    1054:	57 95       	ror	r21
    1056:	47 95       	ror	r20
    1058:	37 95       	ror	r19
    105a:	27 95       	ror	r18
    105c:	ba 95       	dec	r27
    105e:	c9 f7       	brne	.-14     	; 0x1052 <__ultoa_invert+0xa2>
    1060:	62 0f       	add	r22, r18
    1062:	73 1f       	adc	r23, r19
    1064:	84 1f       	adc	r24, r20
    1066:	95 1f       	adc	r25, r21
    1068:	a0 1d       	adc	r26, r0
    106a:	08 95       	ret

0000106c <__prologue_saves__>:
    106c:	2f 92       	push	r2
    106e:	3f 92       	push	r3
    1070:	4f 92       	push	r4
    1072:	5f 92       	push	r5
    1074:	6f 92       	push	r6
    1076:	7f 92       	push	r7
    1078:	8f 92       	push	r8
    107a:	9f 92       	push	r9
    107c:	af 92       	push	r10
    107e:	bf 92       	push	r11
    1080:	cf 92       	push	r12
    1082:	df 92       	push	r13
    1084:	ef 92       	push	r14
    1086:	ff 92       	push	r15
    1088:	0f 93       	push	r16
    108a:	1f 93       	push	r17
    108c:	cf 93       	push	r28
    108e:	df 93       	push	r29
    1090:	cd b7       	in	r28, 0x3d	; 61
    1092:	de b7       	in	r29, 0x3e	; 62
    1094:	ca 1b       	sub	r28, r26
    1096:	db 0b       	sbc	r29, r27
    1098:	0f b6       	in	r0, 0x3f	; 63
    109a:	f8 94       	cli
    109c:	de bf       	out	0x3e, r29	; 62
    109e:	0f be       	out	0x3f, r0	; 63
    10a0:	cd bf       	out	0x3d, r28	; 61
    10a2:	09 94       	ijmp

000010a4 <__epilogue_restores__>:
    10a4:	2a 88       	ldd	r2, Y+18	; 0x12
    10a6:	39 88       	ldd	r3, Y+17	; 0x11
    10a8:	48 88       	ldd	r4, Y+16	; 0x10
    10aa:	5f 84       	ldd	r5, Y+15	; 0x0f
    10ac:	6e 84       	ldd	r6, Y+14	; 0x0e
    10ae:	7d 84       	ldd	r7, Y+13	; 0x0d
    10b0:	8c 84       	ldd	r8, Y+12	; 0x0c
    10b2:	9b 84       	ldd	r9, Y+11	; 0x0b
    10b4:	aa 84       	ldd	r10, Y+10	; 0x0a
    10b6:	b9 84       	ldd	r11, Y+9	; 0x09
    10b8:	c8 84       	ldd	r12, Y+8	; 0x08
    10ba:	df 80       	ldd	r13, Y+7	; 0x07
    10bc:	ee 80       	ldd	r14, Y+6	; 0x06
    10be:	fd 80       	ldd	r15, Y+5	; 0x05
    10c0:	0c 81       	ldd	r16, Y+4	; 0x04
    10c2:	1b 81       	ldd	r17, Y+3	; 0x03
    10c4:	aa 81       	ldd	r26, Y+2	; 0x02
    10c6:	b9 81       	ldd	r27, Y+1	; 0x01
    10c8:	ce 0f       	add	r28, r30
    10ca:	d1 1d       	adc	r29, r1
    10cc:	0f b6       	in	r0, 0x3f	; 63
    10ce:	f8 94       	cli
    10d0:	de bf       	out	0x3e, r29	; 62
    10d2:	0f be       	out	0x3f, r0	; 63
    10d4:	cd bf       	out	0x3d, r28	; 61
    10d6:	ed 01       	movw	r28, r26
    10d8:	08 95       	ret

000010da <_exit>:
    10da:	f8 94       	cli

000010dc <__stop_program>:
    10dc:	ff cf       	rjmp	.-2      	; 0x10dc <__stop_program>
