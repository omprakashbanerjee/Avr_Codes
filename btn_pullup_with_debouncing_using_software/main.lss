
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000000fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  0000011a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000110  00000000  00000000  00000135  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000b2  00000000  00000000  00000245  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000151  00000000  00000000  000002f7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  00000448  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000c5  00000000  00000000  00000468  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000018  00000000  00000000  0000052d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  00000545  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include<avr/io.h>
#include<util/delay.h>
 int main(void)
 {
	DDRB |=(1<<PB0)|(1<<PB1);
  6c:	87 b3       	in	r24, 0x17	; 23
  6e:	83 60       	ori	r24, 0x03	; 3
  70:	87 bb       	out	0x17, r24	; 23
	DDRB &=~(1<<PB6);  //pullup button is connected to pin6 of portb
  72:	be 98       	cbi	0x17, 6	; 23
	PORTB |=(1<<PB6);// PB6 is pullup through software already
  74:	c6 9a       	sbi	0x18, 6	; 24
	PORTB^=(1<<PB0); //if we dont do this then both led will be at same state each time we press the button
  76:	88 b3       	in	r24, 0x18	; 24
  78:	91 e0       	ldi	r25, 0x01	; 1
  7a:	89 27       	eor	r24, r25
  7c:	88 bb       	out	0x18, r24	; 24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  7e:	20 e9       	ldi	r18, 0x90	; 144
  80:	31 e0       	ldi	r19, 0x01	; 1
	while(1)
	{
		if(bit_is_clear(PINB,6)) //when we press the button PB6 willget 0v input
		{ _delay_ms(50); //small delay to ignore the bouncing time
			if(PINB &(1<<PB6)) // then on releasing the button task will be done
			{PORTB^=(1<<PB0)|(1<<PB1);}
  82:	43 e0       	ldi	r20, 0x03	; 3
	PORTB^=(1<<PB0); //if we dont do this then both led will be at same state each time we press the button
//unsigned int count=0; 
	
	while(1)
	{
		if(bit_is_clear(PINB,6)) //when we press the button PB6 willget 0v input
  84:	b6 99       	sbic	0x16, 6	; 22
  86:	fe cf       	rjmp	.-4      	; 0x84 <main+0x18>
  88:	84 ef       	ldi	r24, 0xF4	; 244
  8a:	91 e0       	ldi	r25, 0x01	; 1
  8c:	f9 01       	movw	r30, r18
  8e:	31 97       	sbiw	r30, 0x01	; 1
  90:	f1 f7       	brne	.-4      	; 0x8e <main+0x22>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  92:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  94:	d9 f7       	brne	.-10     	; 0x8c <main+0x20>
		{ _delay_ms(50); //small delay to ignore the bouncing time
			if(PINB &(1<<PB6)) // then on releasing the button task will be done
  96:	b6 9b       	sbis	0x16, 6	; 22
  98:	f5 cf       	rjmp	.-22     	; 0x84 <main+0x18>
			{PORTB^=(1<<PB0)|(1<<PB1);}
  9a:	88 b3       	in	r24, 0x18	; 24
  9c:	84 27       	eor	r24, r20
  9e:	88 bb       	out	0x18, r24	; 24
  a0:	f1 cf       	rjmp	.-30     	; 0x84 <main+0x18>

000000a2 <_exit>:
  a2:	f8 94       	cli

000000a4 <__stop_program>:
  a4:	ff cf       	rjmp	.-2      	; 0xa4 <__stop_program>
