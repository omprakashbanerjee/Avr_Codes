
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000000fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000028  00000000  00000000  0000011a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000167  00000000  00000000  00000142  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000fe  00000000  00000000  000002a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000015e  00000000  00000000  000003a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000030  00000000  00000000  00000508  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000ad  00000000  00000000  00000538  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000040  00000000  00000000  000005e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  00000625  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 3a 00 	call	0x74	; 0x74 <main>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <PWM_init>:


void PWM_init(void)
{
	/*set fast PWM mode with non-inverted output*/
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS00);
  6c:	89 e6       	ldi	r24, 0x69	; 105
  6e:	83 bf       	out	0x33, r24	; 51
	DDRB|=(1<<PB3);  /*set OC0 pin as output*/
  70:	bb 9a       	sbi	0x17, 3	; 23
}
  72:	08 95       	ret

00000074 <main>:


void PWM_init(void)
{
	/*set fast PWM mode with non-inverted output*/
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS00);
  74:	89 e6       	ldi	r24, 0x69	; 105
  76:	83 bf       	out	0x33, r24	; 51
	DDRB|=(1<<PB3);  /*set OC0 pin as output*/
  78:	bb 9a       	sbi	0x17, 3	; 23
  7a:	20 e0       	ldi	r18, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  7c:	40 e0       	ldi	r20, 0x00	; 0
  7e:	5d e7       	ldi	r21, 0x7D	; 125
  80:	05 c0       	rjmp	.+10     	; 0x8c <main+0x18>
	PWM_init();
	while (1)
	{
		for(duty=0; duty<255; duty++)
		{	
			OCR0=duty;  /*increase the LED light intensity*/
  82:	2c bf       	out	0x3c, r18	; 60
  84:	ca 01       	movw	r24, r20
  86:	01 97       	sbiw	r24, 0x01	; 1
  88:	f1 f7       	brne	.-4      	; 0x86 <main+0x12>
	unsigned char duty;
	
	PWM_init();
	while (1)
	{
		for(duty=0; duty<255; duty++)
  8a:	2f 5f       	subi	r18, 0xFF	; 255
  8c:	2f 3f       	cpi	r18, 0xFF	; 255
  8e:	c9 f7       	brne	.-14     	; 0x82 <main+0xe>
			OCR0=duty;  /*increase the LED light intensity*/
			_delay_ms(8);
		}
		for(duty=255; duty>1; duty--)
		{
			OCR0=duty;  /*decrease the LED light intensity*/
  90:	2c bf       	out	0x3c, r18	; 60
  92:	ca 01       	movw	r24, r20
  94:	01 97       	sbiw	r24, 0x01	; 1
  96:	f1 f7       	brne	.-4      	; 0x94 <main+0x20>
		for(duty=0; duty<255; duty++)
		{	
			OCR0=duty;  /*increase the LED light intensity*/
			_delay_ms(8);
		}
		for(duty=255; duty>1; duty--)
  98:	21 50       	subi	r18, 0x01	; 1
  9a:	21 30       	cpi	r18, 0x01	; 1
  9c:	c9 f7       	brne	.-14     	; 0x90 <main+0x1c>
  9e:	20 e0       	ldi	r18, 0x00	; 0
  a0:	f0 cf       	rjmp	.-32     	; 0x82 <main+0xe>

000000a2 <_exit>:
  a2:	f8 94       	cli

000000a4 <__stop_program>:
  a4:	ff cf       	rjmp	.-2      	; 0xa4 <__stop_program>
