
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000128  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000002  00800060  00800060  0000019c  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000053  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000002b1  00000000  00000000  0000020f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000f5  00000000  00000000  000004c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000290  00000000  00000000  000005b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000070  00000000  00000000  00000848  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000b8  00000000  00000000  000008b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 36       	cpi	r26, 0x62	; 98
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 5e 00 	call	0xbc	; 0xbc <main>
  74:	0c 94 92 00 	jmp	0x124	; 0x124 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <right>:
	
	}
}
void right(void)
	{
	PORTB |=(1<<PB3);//left motor on
  7c:	c3 9a       	sbi	0x18, 3	; 24
	PORTB &=~(1<<PB4);
  7e:	c4 98       	cbi	0x18, 4	; 24
	PORTB&=~(1<<PB5);
  80:	c5 98       	cbi	0x18, 5	; 24
	PORTB &=~(1<<PB6);
  82:	c6 98       	cbi	0x18, 6	; 24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  84:	80 e4       	ldi	r24, 0x40	; 64
  86:	9c e9       	ldi	r25, 0x9C	; 156
  88:	01 97       	sbiw	r24, 0x01	; 1
  8a:	f1 f7       	brne	.-4      	; 0x88 <right+0xc>
	_delay_ms(10);
	
	}
  8c:	08 95       	ret

0000008e <left>:
void left(void)
	{
	PORTB &=~(1<<PB3);
  8e:	c3 98       	cbi	0x18, 3	; 24
	PORTB &=~(1<<PB4);
  90:	c4 98       	cbi	0x18, 4	; 24
	PORTB|=(1<<PB5);//right motor on
  92:	c5 9a       	sbi	0x18, 5	; 24
	PORTB &=~(1<<PB6);
  94:	c6 98       	cbi	0x18, 6	; 24
  96:	80 e4       	ldi	r24, 0x40	; 64
  98:	9c e9       	ldi	r25, 0x9C	; 156
  9a:	01 97       	sbiw	r24, 0x01	; 1
  9c:	f1 f7       	brne	.-4      	; 0x9a <left+0xc>
	_delay_ms(10);
	
	}
  9e:	08 95       	ret

000000a0 <front>:
void front(void)
	{
	PORTB |=(1<<PB3);
  a0:	c3 9a       	sbi	0x18, 3	; 24
	PORTB &=~(1<<PB4);
  a2:	c4 98       	cbi	0x18, 4	; 24
	PORTB|=(1<<PB5);
  a4:	c5 9a       	sbi	0x18, 5	; 24
	PORTB &=~(1<<PB6);
  a6:	c6 98       	cbi	0x18, 6	; 24
  a8:	88 ee       	ldi	r24, 0xE8	; 232
  aa:	93 e0       	ldi	r25, 0x03	; 3
  ac:	20 e9       	ldi	r18, 0x90	; 144
  ae:	31 e0       	ldi	r19, 0x01	; 1
  b0:	f9 01       	movw	r30, r18
  b2:	31 97       	sbiw	r30, 0x01	; 1
  b4:	f1 f7       	brne	.-4      	; 0xb2 <front+0x12>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  b6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  b8:	d9 f7       	brne	.-10     	; 0xb0 <front+0x10>
	_delay_ms(100);
	}
  ba:	08 95       	ret

000000bc <main>:
#include<avr/interrupt.h>

unsigned int count=0;
 int main(void)
 {
	DDRB |=(1<<PB3); //left motor1 +input
  bc:	bb 9a       	sbi	0x17, 3	; 23
	DDRB |=(1<<PB4); //left motor1 -input
  be:	bc 9a       	sbi	0x17, 4	; 23
	DDRB|=(1<<PB5)|(1<<PB6); //pb5 moto2+input , pb6 motor2 -input
  c0:	87 b3       	in	r24, 0x17	; 23
  c2:	80 66       	ori	r24, 0x60	; 96
  c4:	87 bb       	out	0x17, r24	; 23
	DDRD &=~((1<<PD3)|(1<<PD4));
  c6:	81 b3       	in	r24, 0x11	; 17
  c8:	87 7e       	andi	r24, 0xE7	; 231
  ca:	81 bb       	out	0x11, r24	; 17
	void right(void);
	void left(void);
	
	while(1)
	{
	front();
  cc:	0e 94 50 00 	call	0xa0	; 0xa0 <front>
	if(PIND&(1<<PD3))//when there is nothing IR sensor gives 1 output
  d0:	83 9b       	sbis	0x10, 3	; 16
  d2:	03 c0       	rjmp	.+6      	; 0xda <main+0x1e>
		left();
  d4:	0e 94 47 00 	call	0x8e	; 0x8e <left>
  d8:	f9 cf       	rjmp	.-14     	; 0xcc <main+0x10>
	else if(PIND&(1<<PD4))
  da:	84 9b       	sbis	0x10, 4	; 16
  dc:	f7 cf       	rjmp	.-18     	; 0xcc <main+0x10>
		right();
  de:	0e 94 3e 00 	call	0x7c	; 0x7c <right>
  e2:	f4 cf       	rjmp	.-24     	; 0xcc <main+0x10>

000000e4 <back>:
	PORTB &=~(1<<PB6);
	_delay_ms(100);
	}
void back(void)
		{ 	
		PORTB &=~(1<<PB3);
  e4:	c3 98       	cbi	0x18, 3	; 24
		PORTB |=(1<<PB4);
  e6:	c4 9a       	sbi	0x18, 4	; 24
		PORTB&=~(1<<PB5);
  e8:	c5 98       	cbi	0x18, 5	; 24
		PORTB |=(1<<PB6);
  ea:	c6 9a       	sbi	0x18, 6	; 24
  ec:	88 ee       	ldi	r24, 0xE8	; 232
  ee:	93 e0       	ldi	r25, 0x03	; 3
  f0:	20 e9       	ldi	r18, 0x90	; 144
  f2:	31 e0       	ldi	r19, 0x01	; 1
  f4:	f9 01       	movw	r30, r18
  f6:	31 97       	sbiw	r30, 0x01	; 1
  f8:	f1 f7       	brne	.-4      	; 0xf6 <back+0x12>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  fa:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  fc:	d9 f7       	brne	.-10     	; 0xf4 <back+0x10>
		_delay_ms(100);
		}
  fe:	08 95       	ret

00000100 <off>:
void off(void)
	{
		count=0	;
 100:	10 92 61 00 	sts	0x0061, r1
 104:	10 92 60 00 	sts	0x0060, r1
		PORTB &=~(1<<PB3);
 108:	c3 98       	cbi	0x18, 3	; 24
		PORTB &=~((1<<PB4)|(1<<PB5)|(1<<PB6));	
 10a:	88 b3       	in	r24, 0x18	; 24
 10c:	8f 78       	andi	r24, 0x8F	; 143
 10e:	88 bb       	out	0x18, r24	; 24
 110:	88 ee       	ldi	r24, 0xE8	; 232
 112:	93 e0       	ldi	r25, 0x03	; 3
 114:	20 e9       	ldi	r18, 0x90	; 144
 116:	31 e0       	ldi	r19, 0x01	; 1
 118:	f9 01       	movw	r30, r18
 11a:	31 97       	sbiw	r30, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <off+0x1a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 11e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 120:	d9 f7       	brne	.-10     	; 0x118 <off+0x18>
		_delay_ms(100);
 122:	08 95       	ret

00000124 <_exit>:
 124:	f8 94       	cli

00000126 <__stop_program>:
 126:	ff cf       	rjmp	.-2      	; 0x126 <__stop_program>
