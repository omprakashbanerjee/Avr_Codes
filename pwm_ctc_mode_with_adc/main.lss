
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000108  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000003  00800060  00800060  0000017c  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  0000017c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000005d  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000000f1  00000000  00000000  000001f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000007b  00000000  00000000  000002ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000012b  00000000  00000000  00000365  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000050  00000000  00000000  00000490  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000ad  00000000  00000000  000004e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__vector_14>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 6d 00 	jmp	0xda	; 0xda <__vector_19>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a3 36       	cpi	r26, 0x63	; 99
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 49 00 	call	0x92	; 0x92 <main>
  74:	0c 94 82 00 	jmp	0x104	; 0x104 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <pwm_init>:
void pwm_init()
{
	// WGM0[1:0]= 10, for CTC mode
	// COM0[1:0]= 01, to toggle OC0 on compare match

	TCCR0=(1<<WGM01)|(1<<COM00)|(5<<CS00);// CS0[2:0] =010. for prescaler 8
  7c:	8d e1       	ldi	r24, 0x1D	; 29
  7e:	83 bf       	out	0x33, r24	; 51
	DDRB|=(1<<PB3)|(1<<PB0); // select as output pin 
  80:	87 b3       	in	r24, 0x17	; 23
  82:	89 60       	ori	r24, 0x09	; 9
  84:	87 bb       	out	0x17, r24	; 23
	TIMSK|=(1<<OCIE0); //enable output compare interrupt 
  86:	89 b7       	in	r24, 0x39	; 57
  88:	82 60       	ori	r24, 0x02	; 2
  8a:	89 bf       	out	0x39, r24	; 57
	OCR0=99;
  8c:	83 e6       	ldi	r24, 0x63	; 99
  8e:	8c bf       	out	0x3c, r24	; 60
}
  90:	08 95       	ret

00000092 <main>:
uint16_t ADC_val;
volatile uint8_t duty;

int main(void)
{ 
	sei(); // enable global interrupts
  92:	78 94       	sei
	ADMUX |=(1<<REFS0)|(0<<MUX0);
  94:	3e 9a       	sbi	0x07, 6	; 7
	ADCSRA |=(1<<ADIE)|(3<<ADPS0)|(1<<ADEN)|(1<<ADATE);
  96:	86 b1       	in	r24, 0x06	; 6
  98:	8b 6a       	ori	r24, 0xAB	; 171
  9a:	86 b9       	out	0x06, r24	; 6
		pwm_init(); // timer initialize
  9c:	0e 94 3e 00 	call	0x7c	; 0x7c <pwm_init>

	ADCSRA|=(1<<ADSC);
  a0:	36 9a       	sbi	0x06, 6	; 6
  a2:	ff cf       	rjmp	.-2      	; 0xa2 <main+0x10>

000000a4 <__vector_14>:
	OCR0=99;
}
 

ISR(ADC_vect)
{	/* for ADLAR=1 ADC results will be left adjusted
  a4:	1f 92       	push	r1
  a6:	0f 92       	push	r0
  a8:	0f b6       	in	r0, 0x3f	; 63
  aa:	0f 92       	push	r0
  ac:	11 24       	eor	r1, r1
  ae:	8f 93       	push	r24
  b0:	9f 93       	push	r25

	/* for ADLAR=0 ADC results will be right adjusted
	uint8_t ADC_low=ADCL;
	ADC_val=ADCH<<8|ADC_low;
	*/
	ADC_val=ADC; //for adlar=0 ,we can do this too
  b2:	84 b1       	in	r24, 0x04	; 4
  b4:	95 b1       	in	r25, 0x05	; 5
  b6:	90 93 61 00 	sts	0x0061, r25
  ba:	80 93 60 00 	sts	0x0060, r24
	//duty=(uint8_t)ADC_val/4; bcz of this (type_casting) our result value was coming in between 0 to 63
	duty=ADC_val/4;
  be:	96 95       	lsr	r25
  c0:	87 95       	ror	r24
  c2:	96 95       	lsr	r25
  c4:	87 95       	ror	r24
  c6:	80 93 62 00 	sts	0x0062, r24
	//OCR0=duty;
	//_delay_ms(10);
	
	ADCSRA |=1<<ADSC;
  ca:	36 9a       	sbi	0x06, 6	; 6
}
  cc:	9f 91       	pop	r25
  ce:	8f 91       	pop	r24
  d0:	0f 90       	pop	r0
  d2:	0f be       	out	0x3f, r0	; 63
  d4:	0f 90       	pop	r0
  d6:	1f 90       	pop	r1
  d8:	18 95       	reti

000000da <__vector_19>:

ISR(TIMER0_COMP_vect) // interrupt subroutine
{
  da:	1f 92       	push	r1
  dc:	0f 92       	push	r0
  de:	0f b6       	in	r0, 0x3f	; 63
  e0:	0f 92       	push	r0
  e2:	11 24       	eor	r1, r1
  e4:	8f 93       	push	r24
  e6:	9f 93       	push	r25
	OCR0=duty;
  e8:	80 91 62 00 	lds	r24, 0x0062
  ec:	8c bf       	out	0x3c, r24	; 60
	PORTB ^=(1<<PB0);//OCR0=duty; //put OCR value
  ee:	88 b3       	in	r24, 0x18	; 24
  f0:	91 e0       	ldi	r25, 0x01	; 1
  f2:	89 27       	eor	r24, r25
  f4:	88 bb       	out	0x18, r24	; 24
}
  f6:	9f 91       	pop	r25
  f8:	8f 91       	pop	r24
  fa:	0f 90       	pop	r0
  fc:	0f be       	out	0x3f, r0	; 63
  fe:	0f 90       	pop	r0
 100:	1f 90       	pop	r1
 102:	18 95       	reti

00000104 <_exit>:
 104:	f8 94       	cli

00000106 <__stop_program>:
 106:	ff cf       	rjmp	.-2      	; 0x106 <__stop_program>
