
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000bc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000110  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  00000130  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000000a3  00000000  00000000  0000014b  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 0000006c  00000000  00000000  000001ee  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000000ba  00000000  00000000  0000025a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  00000314  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000082  00000000  00000000  00000334  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000028  00000000  00000000  000003b6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include<avr/io.h>
#include<util/delay.h>
#include<avr/interrupt.h>
 int main(void)
 {
	DDRB |=(1<<PB0)|(1<<PB1);
  6c:	87 b3       	in	r24, 0x17	; 23
  6e:	83 60       	ori	r24, 0x03	; 3
  70:	87 bb       	out	0x17, r24	; 23
	
	DDRB &=~(1<<PB6);
  72:	be 98       	cbi	0x17, 6	; 23
	PORTB |=(1<<PB6) ;
  74:	c6 9a       	sbi	0x18, 6	; 24
	PORTB^=(1<<PB0);
  76:	88 b3       	in	r24, 0x18	; 24
  78:	91 e0       	ldi	r25, 0x01	; 1
  7a:	89 27       	eor	r24, r25
  7c:	88 bb       	out	0x18, r24	; 24
  7e:	80 e0       	ldi	r24, 0x00	; 0
  80:	90 e0       	ldi	r25, 0x00	; 0
  82:	20 e0       	ldi	r18, 0x00	; 0
  84:	30 e0       	ldi	r19, 0x00	; 0
				bounce_high++;
				if(bounce_high>200)
				{
					if(pressed==0)
						{	pressed=1;
							PORTB^=(1<<PB0);
  86:	51 e0       	ldi	r21, 0x01	; 1
							PORTB^=(1<<PB1);
  88:	42 e0       	ldi	r20, 0x02	; 2
  8a:	02 c0       	rjmp	.+4      	; 0x90 <main+0x24>
 {
	DDRB |=(1<<PB0)|(1<<PB1);
	
	DDRB &=~(1<<PB6);
	PORTB |=(1<<PB6) ;
	PORTB^=(1<<PB0);
  8c:	20 e0       	ldi	r18, 0x00	; 0
  8e:	30 e0       	ldi	r19, 0x00	; 0
	unsigned int bounce_high=0,bounce_low=0,pressed=0;
	
	while(1)
	{
		if(bit_is_clear(PINB,6))
  90:	b6 99       	sbic	0x16, 6	; 22
  92:	fe cf       	rjmp	.-4      	; 0x90 <main+0x24>
		  {
				bounce_high++;
  94:	01 96       	adiw	r24, 0x01	; 1
				if(bounce_high>200)
  96:	89 3c       	cpi	r24, 0xC9	; 201
  98:	91 05       	cpc	r25, r1
  9a:	c0 f3       	brcs	.-16     	; 0x8c <main+0x20>
				{
					if(pressed==0)
  9c:	21 15       	cp	r18, r1
  9e:	31 05       	cpc	r19, r1
  a0:	b9 f7       	brne	.-18     	; 0x90 <main+0x24>
						{	pressed=1;
							PORTB^=(1<<PB0);
  a2:	88 b3       	in	r24, 0x18	; 24
  a4:	85 27       	eor	r24, r21
  a6:	88 bb       	out	0x18, r24	; 24
							PORTB^=(1<<PB1);
  a8:	88 b3       	in	r24, 0x18	; 24
  aa:	84 27       	eor	r24, r20
  ac:	88 bb       	out	0x18, r24	; 24
  ae:	80 e0       	ldi	r24, 0x00	; 0
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	30 e0       	ldi	r19, 0x00	; 0
  b6:	ec cf       	rjmp	.-40     	; 0x90 <main+0x24>

000000b8 <_exit>:
  b8:	f8 94       	cli

000000ba <__stop_program>:
  ba:	ff cf       	rjmp	.-2      	; 0xba <__stop_program>
